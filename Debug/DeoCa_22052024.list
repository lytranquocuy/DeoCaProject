
DeoCa_22052024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e76c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a3c  0800e900  0800e900  0000f900  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f33c  0800f33c  00011208  2**0
                  CONTENTS
  4 .ARM          00000008  0800f33c  0800f33c  0001033c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f344  0800f344  00011208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f344  0800f344  00010344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f348  0800f348  00010348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000208  20000000  0800f34c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00011208  2**0
                  CONTENTS
 10 .bss          00000d48  20000208  20000208  00011208  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000f50  20000f50  00011208  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00011208  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014dd4  00000000  00000000  00011238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ee5  00000000  00000000  0002600c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a0  00000000  00000000  00028ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e96  00000000  00000000  0002a198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000243fd  00000000  00000000  0002b02e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000191af  00000000  00000000  0004f42b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d145e  00000000  00000000  000685da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00139a38  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006608  00000000  00000000  00139a7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000051  00000000  00000000  00140084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e8e4 	.word	0x0800e8e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	0800e8e4 	.word	0x0800e8e4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <HAL_UART_RxCpltCallback>:

board_parameter_t BoardParameter;

#endif

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
#ifdef RUN_LigoSENSOR
	if(huart == &huart1 &&flag_Received == 0){
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a2f      	ldr	r2, [pc, #188]	@ (80010ac <HAL_UART_RxCpltCallback+0xc8>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d113      	bne.n	800101c <HAL_UART_RxCpltCallback+0x38>
 8000ff4:	4b2e      	ldr	r3, [pc, #184]	@ (80010b0 <HAL_UART_RxCpltCallback+0xcc>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d10f      	bne.n	800101c <HAL_UART_RxCpltCallback+0x38>
		// save received byte into rxBuffer
		flag_Received = 1;
 8000ffc:	4b2c      	ldr	r3, [pc, #176]	@ (80010b0 <HAL_UART_RxCpltCallback+0xcc>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	701a      	strb	r2, [r3, #0]
		Checksum_Response = data_txCommand_Checksum(data_rxResponse, 4);
 8001002:	2104      	movs	r1, #4
 8001004:	482b      	ldr	r0, [pc, #172]	@ (80010b4 <HAL_UART_RxCpltCallback+0xd0>)
 8001006:	f001 fe79 	bl	8002cfc <data_txCommand_Checksum>
 800100a:	4603      	mov	r3, r0
 800100c:	461a      	mov	r2, r3
 800100e:	4b2a      	ldr	r3, [pc, #168]	@ (80010b8 <HAL_UART_RxCpltCallback+0xd4>)
 8001010:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &rx_buff, 1);
 8001012:	2201      	movs	r2, #1
 8001014:	4929      	ldr	r1, [pc, #164]	@ (80010bc <HAL_UART_RxCpltCallback+0xd8>)
 8001016:	4825      	ldr	r0, [pc, #148]	@ (80010ac <HAL_UART_RxCpltCallback+0xc8>)
 8001018:	f007 fa6d 	bl	80084f6 <HAL_UART_Receive_IT>
	}
	if(huart == &huart1 && flag_Received == 1 ){
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a23      	ldr	r2, [pc, #140]	@ (80010ac <HAL_UART_RxCpltCallback+0xc8>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d137      	bne.n	8001094 <HAL_UART_RxCpltCallback+0xb0>
 8001024:	4b22      	ldr	r3, [pc, #136]	@ (80010b0 <HAL_UART_RxCpltCallback+0xcc>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d133      	bne.n	8001094 <HAL_UART_RxCpltCallback+0xb0>
		receive_rx(rx_buff);
 800102c:	4b23      	ldr	r3, [pc, #140]	@ (80010bc <HAL_UART_RxCpltCallback+0xd8>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	4618      	mov	r0, r3
 8001032:	f001 fdd5 	bl	8002be0 <receive_rx>
		rxBuffer[rxIndex++] = uart_read();
 8001036:	4b22      	ldr	r3, [pc, #136]	@ (80010c0 <HAL_UART_RxCpltCallback+0xdc>)
 8001038:	f993 2000 	ldrsb.w	r2, [r3]
 800103c:	b2d3      	uxtb	r3, r2
 800103e:	3301      	adds	r3, #1
 8001040:	b2db      	uxtb	r3, r3
 8001042:	b259      	sxtb	r1, r3
 8001044:	4b1e      	ldr	r3, [pc, #120]	@ (80010c0 <HAL_UART_RxCpltCallback+0xdc>)
 8001046:	7019      	strb	r1, [r3, #0]
 8001048:	4614      	mov	r4, r2
 800104a:	f001 fdd9 	bl	8002c00 <uart_read>
 800104e:	4603      	mov	r3, r0
 8001050:	461a      	mov	r2, r3
 8001052:	4b1c      	ldr	r3, [pc, #112]	@ (80010c4 <HAL_UART_RxCpltCallback+0xe0>)
 8001054:	551a      	strb	r2, [r3, r4]
		if(rxIndex == FRAM_SIZE){
 8001056:	4b1a      	ldr	r3, [pc, #104]	@ (80010c0 <HAL_UART_RxCpltCallback+0xdc>)
 8001058:	f993 3000 	ldrsb.w	r3, [r3]
 800105c:	2b0b      	cmp	r3, #11
 800105e:	d114      	bne.n	800108a <HAL_UART_RxCpltCallback+0xa6>
			Process_Received_Data(rxBuffer, &frame);
 8001060:	4919      	ldr	r1, [pc, #100]	@ (80010c8 <HAL_UART_RxCpltCallback+0xe4>)
 8001062:	4818      	ldr	r0, [pc, #96]	@ (80010c4 <HAL_UART_RxCpltCallback+0xe0>)
 8001064:	f001 fe98 	bl	8002d98 <Process_Received_Data>
			Checksum_Periodly_Data = data_txCommand_Checksum(rxBuffer, 10);
 8001068:	210a      	movs	r1, #10
 800106a:	4816      	ldr	r0, [pc, #88]	@ (80010c4 <HAL_UART_RxCpltCallback+0xe0>)
 800106c:	f001 fe46 	bl	8002cfc <data_txCommand_Checksum>
 8001070:	4603      	mov	r3, r0
 8001072:	461a      	mov	r2, r3
 8001074:	4b15      	ldr	r3, [pc, #84]	@ (80010cc <HAL_UART_RxCpltCallback+0xe8>)
 8001076:	701a      	strb	r2, [r3, #0]
			rxIndex = 0;
 8001078:	4b11      	ldr	r3, [pc, #68]	@ (80010c0 <HAL_UART_RxCpltCallback+0xdc>)
 800107a:	2200      	movs	r2, #0
 800107c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart1, &rx_buff, 1);
 800107e:	2201      	movs	r2, #1
 8001080:	490e      	ldr	r1, [pc, #56]	@ (80010bc <HAL_UART_RxCpltCallback+0xd8>)
 8001082:	480a      	ldr	r0, [pc, #40]	@ (80010ac <HAL_UART_RxCpltCallback+0xc8>)
 8001084:	f007 fa37 	bl	80084f6 <HAL_UART_Receive_IT>
 8001088:	e004      	b.n	8001094 <HAL_UART_RxCpltCallback+0xb0>
		}
		else{
			HAL_UART_Receive_IT(&huart1, &rx_buff, 1);
 800108a:	2201      	movs	r2, #1
 800108c:	490b      	ldr	r1, [pc, #44]	@ (80010bc <HAL_UART_RxCpltCallback+0xd8>)
 800108e:	4807      	ldr	r0, [pc, #28]	@ (80010ac <HAL_UART_RxCpltCallback+0xc8>)
 8001090:	f007 fa31 	bl	80084f6 <HAL_UART_Receive_IT>
	}
#endif

// GPS Interrupt
#ifdef RUN_GPS
	if(huart == &huart3){
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a0e      	ldr	r2, [pc, #56]	@ (80010d0 <HAL_UART_RxCpltCallback+0xec>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d102      	bne.n	80010a2 <HAL_UART_RxCpltCallback+0xbe>
		GPS_UART_CallBack(&gps);
 800109c:	480d      	ldr	r0, [pc, #52]	@ (80010d4 <HAL_UART_RxCpltCallback+0xf0>)
 800109e:	f001 fed1 	bl	8002e44 <GPS_UART_CallBack>
	}
#endif
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd90      	pop	{r4, r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200007dc 	.word	0x200007dc
 80010b0:	20000944 	.word	0x20000944
 80010b4:	20000930 	.word	0x20000930
 80010b8:	20000958 	.word	0x20000958
 80010bc:	20000943 	.word	0x20000943
 80010c0:	20000000 	.word	0x20000000
 80010c4:	20000938 	.word	0x20000938
 80010c8:	20000948 	.word	0x20000948
 80010cc:	20000959 	.word	0x20000959
 80010d0:	2000086c 	.word	0x2000086c
 80010d4:	200005e8 	.word	0x200005e8

080010d8 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	460b      	mov	r3, r1
 80010e2:	807b      	strh	r3, [r7, #2]
#ifdef RUN_SIM
	SIM_UART_DMA_CallBack(&sim);
 80010e4:	4803      	ldr	r0, [pc, #12]	@ (80010f4 <HAL_UARTEx_RxEventCallback+0x1c>)
 80010e6:	f002 f975 	bl	80033d4 <SIM_UART_DMA_CallBack>
#endif
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000224 	.word	0x20000224

080010f8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	80fb      	strh	r3, [r7, #6]
	ACC_State = HAL_GPIO_ReadPin(ACC_GPIO_Port, ACC_Pin);
 8001102:	2104      	movs	r1, #4
 8001104:	4805      	ldr	r0, [pc, #20]	@ (800111c <HAL_GPIO_EXTI_Callback+0x24>)
 8001106:	f004 fb5f 	bl	80057c8 <HAL_GPIO_ReadPin>
 800110a:	4603      	mov	r3, r0
 800110c:	461a      	mov	r2, r3
 800110e:	4b04      	ldr	r3, [pc, #16]	@ (8001120 <HAL_GPIO_EXTI_Callback+0x28>)
 8001110:	701a      	strb	r2, [r3, #0]
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40020800 	.word	0x40020800
 8001120:	20000914 	.word	0x20000914

08001124 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
//	Interrupt 50ms
	if(htim->Instance == TIM2){
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001134:	d102      	bne.n	800113c <HAL_TIM_PeriodElapsedCallback+0x18>
		Flag_CallBack(&_Flag);
 8001136:	4803      	ldr	r0, [pc, #12]	@ (8001144 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001138:	f001 fa68 	bl	800260c <Flag_CallBack>
	}
//	Interrupt 2S
	if(htim->Instance == TIM3){

	}
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000644 	.word	0x20000644

08001148 <PostDataToServer>:

char DataToPost[200];

char DebugGPSLocation[200];

void PostDataToServer(){
 8001148:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800114c:	b099      	sub	sp, #100	@ 0x64
 800114e:	af10      	add	r7, sp, #64	@ 0x40
	DS3231_read_time(&date_time);
 8001150:	4839      	ldr	r0, [pc, #228]	@ (8001238 <PostDataToServer+0xf0>)
 8001152:	f001 fc7f 	bl	8002a54 <DS3231_read_time>
	sprintf(DataToPost,"{\"ID\": \"%s\",\"S\": \"%f;%f;%f;%d;0;0;%d;32.5;80.6;%d%d;%d:%d:%d %d/%d/%d;790136787923;1\"}", BoardParameter.ID, Longitude, Latitude, Speed, ACC_State, frame.rxRelative_level, sim.Signal, sim.NetTech, date_time.Hour, date_time.Minute, date_time.Second, date_time.Date, date_time.Month, (date_time.Year + 2000));
 8001156:	4b39      	ldr	r3, [pc, #228]	@ (800123c <PostDataToServer+0xf4>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff f9f4 	bl	8000548 <__aeabi_f2d>
 8001160:	4604      	mov	r4, r0
 8001162:	460d      	mov	r5, r1
 8001164:	4b36      	ldr	r3, [pc, #216]	@ (8001240 <PostDataToServer+0xf8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff f9ed 	bl	8000548 <__aeabi_f2d>
 800116e:	4680      	mov	r8, r0
 8001170:	4689      	mov	r9, r1
 8001172:	4b34      	ldr	r3, [pc, #208]	@ (8001244 <PostDataToServer+0xfc>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff f9e6 	bl	8000548 <__aeabi_f2d>
 800117c:	4b32      	ldr	r3, [pc, #200]	@ (8001248 <PostDataToServer+0x100>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	61fb      	str	r3, [r7, #28]
 8001182:	4b32      	ldr	r3, [pc, #200]	@ (800124c <PostDataToServer+0x104>)
 8001184:	889b      	ldrh	r3, [r3, #4]
 8001186:	61bb      	str	r3, [r7, #24]
 8001188:	4b31      	ldr	r3, [pc, #196]	@ (8001250 <PostDataToServer+0x108>)
 800118a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800118c:	617a      	str	r2, [r7, #20]
 800118e:	4b30      	ldr	r3, [pc, #192]	@ (8001250 <PostDataToServer+0x108>)
 8001190:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	4b28      	ldr	r3, [pc, #160]	@ (8001238 <PostDataToServer+0xf0>)
 8001198:	691e      	ldr	r6, [r3, #16]
 800119a:	60fe      	str	r6, [r7, #12]
 800119c:	4b26      	ldr	r3, [pc, #152]	@ (8001238 <PostDataToServer+0xf0>)
 800119e:	695a      	ldr	r2, [r3, #20]
 80011a0:	60ba      	str	r2, [r7, #8]
 80011a2:	4b25      	ldr	r3, [pc, #148]	@ (8001238 <PostDataToServer+0xf0>)
 80011a4:	699e      	ldr	r6, [r3, #24]
 80011a6:	607e      	str	r6, [r7, #4]
 80011a8:	4b23      	ldr	r3, [pc, #140]	@ (8001238 <PostDataToServer+0xf0>)
 80011aa:	685e      	ldr	r6, [r3, #4]
 80011ac:	4b22      	ldr	r3, [pc, #136]	@ (8001238 <PostDataToServer+0xf0>)
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	4b21      	ldr	r3, [pc, #132]	@ (8001238 <PostDataToServer+0xf0>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80011b8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80011ba:	920e      	str	r2, [sp, #56]	@ 0x38
 80011bc:	960d      	str	r6, [sp, #52]	@ 0x34
 80011be:	687e      	ldr	r6, [r7, #4]
 80011c0:	960c      	str	r6, [sp, #48]	@ 0x30
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	920b      	str	r2, [sp, #44]	@ 0x2c
 80011c6:	68fe      	ldr	r6, [r7, #12]
 80011c8:	960a      	str	r6, [sp, #40]	@ 0x28
 80011ca:	693e      	ldr	r6, [r7, #16]
 80011cc:	9609      	str	r6, [sp, #36]	@ 0x24
 80011ce:	697a      	ldr	r2, [r7, #20]
 80011d0:	9208      	str	r2, [sp, #32]
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	9207      	str	r2, [sp, #28]
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	9306      	str	r3, [sp, #24]
 80011da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80011de:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80011e2:	e9cd 4500 	strd	r4, r5, [sp]
 80011e6:	4a1b      	ldr	r2, [pc, #108]	@ (8001254 <PostDataToServer+0x10c>)
 80011e8:	491b      	ldr	r1, [pc, #108]	@ (8001258 <PostDataToServer+0x110>)
 80011ea:	481c      	ldr	r0, [pc, #112]	@ (800125c <PostDataToServer+0x114>)
 80011ec:	f009 fac8 	bl	800a780 <siprintf>
	if(http_post(&sim, API_POST_DATA_IOTVISION, DataToPost) == SIM7600_OK){
 80011f0:	4a1a      	ldr	r2, [pc, #104]	@ (800125c <PostDataToServer+0x114>)
 80011f2:	491b      	ldr	r1, [pc, #108]	@ (8001260 <PostDataToServer+0x118>)
 80011f4:	4816      	ldr	r0, [pc, #88]	@ (8001250 <PostDataToServer+0x108>)
 80011f6:	f003 f9b7 	bl	8004568 <http_post>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d103      	bne.n	8001208 <PostDataToServer+0xc0>
		ServerConnected = 1;
 8001200:	4b18      	ldr	r3, [pc, #96]	@ (8001264 <PostDataToServer+0x11c>)
 8001202:	2201      	movs	r2, #1
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	e002      	b.n	800120e <PostDataToServer+0xc6>
	}
	else{
		ServerConnected = 0;
 8001208:	4b16      	ldr	r3, [pc, #88]	@ (8001264 <PostDataToServer+0x11c>)
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
	}

	if(http_post(&sim, API_POST_DATA_DEOCA, DataToPost) == SIM7600_OK){
 800120e:	4a13      	ldr	r2, [pc, #76]	@ (800125c <PostDataToServer+0x114>)
 8001210:	4915      	ldr	r1, [pc, #84]	@ (8001268 <PostDataToServer+0x120>)
 8001212:	480f      	ldr	r0, [pc, #60]	@ (8001250 <PostDataToServer+0x108>)
 8001214:	f003 f9a8 	bl	8004568 <http_post>
 8001218:	4603      	mov	r3, r0
 800121a:	2b01      	cmp	r3, #1
 800121c:	d103      	bne.n	8001226 <PostDataToServer+0xde>
		ServerConnected = 1;
 800121e:	4b11      	ldr	r3, [pc, #68]	@ (8001264 <PostDataToServer+0x11c>)
 8001220:	2201      	movs	r2, #1
 8001222:	601a      	str	r2, [r3, #0]
	}
	else{
		ServerConnected = 0;
	}
}
 8001224:	e002      	b.n	800122c <PostDataToServer+0xe4>
		ServerConnected = 0;
 8001226:	4b0f      	ldr	r3, [pc, #60]	@ (8001264 <PostDataToServer+0x11c>)
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
}
 800122c:	bf00      	nop
 800122e:	3724      	adds	r7, #36	@ 0x24
 8001230:	46bd      	mov	sp, r7
 8001232:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001236:	bf00      	nop
 8001238:	20000688 	.word	0x20000688
 800123c:	2000091c 	.word	0x2000091c
 8001240:	20000918 	.word	0x20000918
 8001244:	20000920 	.word	0x20000920
 8001248:	20000914 	.word	0x20000914
 800124c:	20000948 	.word	0x20000948
 8001250:	20000224 	.word	0x20000224
 8001254:	20000b69 	.word	0x20000b69
 8001258:	0800e900 	.word	0x0800e900
 800125c:	20000b94 	.word	0x20000b94
 8001260:	0800e958 	.word	0x0800e958
 8001264:	20000928 	.word	0x20000928
 8001268:	0800e980 	.word	0x0800e980

0800126c <GetCodeFromServer>:

void GetCodeFromServer(){
 800126c:	b580      	push	{r7, lr}
 800126e:	b0bc      	sub	sp, #240	@ 0xf0
 8001270:	af00      	add	r7, sp, #0
	char urlStr[100];
	sprintf(urlStr, "%s%s", API_GET_CODE_IOTVISION, BoardParameter.ID);
 8001272:	f107 0078 	add.w	r0, r7, #120	@ 0x78
 8001276:	4b76      	ldr	r3, [pc, #472]	@ (8001450 <GetCodeFromServer+0x1e4>)
 8001278:	4a76      	ldr	r2, [pc, #472]	@ (8001454 <GetCodeFromServer+0x1e8>)
 800127a:	4977      	ldr	r1, [pc, #476]	@ (8001458 <GetCodeFromServer+0x1ec>)
 800127c:	f009 fa80 	bl	800a780 <siprintf>

	if(http_get(&sim, urlStr, _Server.HTTPGetResponse, &_Server.HTTPGetCode) == SIM7600_OK){
 8001280:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8001284:	4b75      	ldr	r3, [pc, #468]	@ (800145c <GetCodeFromServer+0x1f0>)
 8001286:	4a76      	ldr	r2, [pc, #472]	@ (8001460 <GetCodeFromServer+0x1f4>)
 8001288:	4876      	ldr	r0, [pc, #472]	@ (8001464 <GetCodeFromServer+0x1f8>)
 800128a:	f002 fea3 	bl	8003fd4 <http_get>
 800128e:	4603      	mov	r3, r0
 8001290:	2b01      	cmp	r3, #1
 8001292:	f040 80d8 	bne.w	8001446 <GetCodeFromServer+0x1da>
		if(_Server.HTTPGetCode == 200){
 8001296:	4b74      	ldr	r3, [pc, #464]	@ (8001468 <GetCodeFromServer+0x1fc>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2bc8      	cmp	r3, #200	@ 0xc8
 800129c:	f040 80d3 	bne.w	8001446 <GetCodeFromServer+0x1da>
			int foundRes = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
			int count = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
			for(int i = 0; i <= 256; ++i){
 80012ac:	2300      	movs	r3, #0
 80012ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80012b2:	e01b      	b.n	80012ec <GetCodeFromServer+0x80>
				if(_Server.HTTPGetResponse[i] == '\"') ++count;
 80012b4:	4a6c      	ldr	r2, [pc, #432]	@ (8001468 <GetCodeFromServer+0x1fc>)
 80012b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80012ba:	4413      	add	r3, r2
 80012bc:	330c      	adds	r3, #12
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b22      	cmp	r3, #34	@ 0x22
 80012c2:	d104      	bne.n	80012ce <GetCodeFromServer+0x62>
 80012c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80012c8:	3301      	adds	r3, #1
 80012ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
				if(count == 7){
 80012ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80012d2:	2b07      	cmp	r3, #7
 80012d4:	d105      	bne.n	80012e2 <GetCodeFromServer+0x76>
					foundRes = i + 1;
 80012d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80012da:	3301      	adds	r3, #1
 80012dc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
					break;
 80012e0:	e009      	b.n	80012f6 <GetCodeFromServer+0x8a>
			for(int i = 0; i <= 256; ++i){
 80012e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80012e6:	3301      	adds	r3, #1
 80012e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80012ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80012f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80012f4:	ddde      	ble.n	80012b4 <GetCodeFromServer+0x48>
				}
			}

			_Server.CodeGet = 0;
 80012f6:	4b5c      	ldr	r3, [pc, #368]	@ (8001468 <GetCodeFromServer+0x1fc>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
			for(int i = foundRes; i<=256; ++i){
 80012fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001300:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001304:	e029      	b.n	800135a <GetCodeFromServer+0xee>
				if(_Server.HTTPGetResponse[i] == ';') break;
 8001306:	4a58      	ldr	r2, [pc, #352]	@ (8001468 <GetCodeFromServer+0x1fc>)
 8001308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800130c:	4413      	add	r3, r2
 800130e:	330c      	adds	r3, #12
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b3b      	cmp	r3, #59	@ 0x3b
 8001314:	d027      	beq.n	8001366 <GetCodeFromServer+0xfa>
				if(_Server.HTTPGetResponse[i] == '\"') break;
 8001316:	4a54      	ldr	r2, [pc, #336]	@ (8001468 <GetCodeFromServer+0x1fc>)
 8001318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800131c:	4413      	add	r3, r2
 800131e:	330c      	adds	r3, #12
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b22      	cmp	r3, #34	@ 0x22
 8001324:	d021      	beq.n	800136a <GetCodeFromServer+0xfe>
				_Server.CodeGet *= 10;
 8001326:	4b50      	ldr	r3, [pc, #320]	@ (8001468 <GetCodeFromServer+0x1fc>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	4613      	mov	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4413      	add	r3, r2
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	461a      	mov	r2, r3
 8001334:	4b4c      	ldr	r3, [pc, #304]	@ (8001468 <GetCodeFromServer+0x1fc>)
 8001336:	601a      	str	r2, [r3, #0]
				_Server.CodeGet += _Server.HTTPGetResponse[foundRes] - 48;
 8001338:	4b4b      	ldr	r3, [pc, #300]	@ (8001468 <GetCodeFromServer+0x1fc>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	494a      	ldr	r1, [pc, #296]	@ (8001468 <GetCodeFromServer+0x1fc>)
 800133e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001342:	440b      	add	r3, r1
 8001344:	330c      	adds	r3, #12
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	3b30      	subs	r3, #48	@ 0x30
 800134a:	4413      	add	r3, r2
 800134c:	4a46      	ldr	r2, [pc, #280]	@ (8001468 <GetCodeFromServer+0x1fc>)
 800134e:	6013      	str	r3, [r2, #0]
			for(int i = foundRes; i<=256; ++i){
 8001350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001354:	3301      	adds	r3, #1
 8001356:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800135a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800135e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001362:	ddd0      	ble.n	8001306 <GetCodeFromServer+0x9a>
 8001364:	e002      	b.n	800136c <GetCodeFromServer+0x100>
				if(_Server.HTTPGetResponse[i] == ';') break;
 8001366:	bf00      	nop
 8001368:	e000      	b.n	800136c <GetCodeFromServer+0x100>
				if(_Server.HTTPGetResponse[i] == '\"') break;
 800136a:	bf00      	nop
			}

			switch (_Server.CodeGet){
 800136c:	4b3e      	ldr	r3, [pc, #248]	@ (8001468 <GetCodeFromServer+0x1fc>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b03      	cmp	r3, #3
 8001372:	d001      	beq.n	8001378 <GetCodeFromServer+0x10c>
 8001374:	2b04      	cmp	r3, #4
					}

					break;
				case 4:

					break;
 8001376:	e060      	b.n	800143a <GetCodeFromServer+0x1ce>
					strcpy(oldID, BoardParameter.ID);
 8001378:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800137c:	4934      	ldr	r1, [pc, #208]	@ (8001450 <GetCodeFromServer+0x1e4>)
 800137e:	4618      	mov	r0, r3
 8001380:	f009 fb1f 	bl	800a9c2 <strcpy>
					memset(BoardParameter.ID, 0, sizeof(BoardParameter.ID));
 8001384:	220f      	movs	r2, #15
 8001386:	2100      	movs	r1, #0
 8001388:	4831      	ldr	r0, [pc, #196]	@ (8001450 <GetCodeFromServer+0x1e4>)
 800138a:	f009 fa88 	bl	800a89e <memset>
					count = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
					for(int i = foundRes + 2; i <= 256; ++i){
 8001394:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001398:	3302      	adds	r3, #2
 800139a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800139e:	e01e      	b.n	80013de <GetCodeFromServer+0x172>
						if(_Server.HTTPGetResponse[i] == '\"') break;
 80013a0:	4a31      	ldr	r2, [pc, #196]	@ (8001468 <GetCodeFromServer+0x1fc>)
 80013a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80013a6:	4413      	add	r3, r2
 80013a8:	330c      	adds	r3, #12
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b22      	cmp	r3, #34	@ 0x22
 80013ae:	d01c      	beq.n	80013ea <GetCodeFromServer+0x17e>
						BoardParameter.ID[count] = _Server.HTTPGetResponse[i];
 80013b0:	4a2d      	ldr	r2, [pc, #180]	@ (8001468 <GetCodeFromServer+0x1fc>)
 80013b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80013b6:	4413      	add	r3, r2
 80013b8:	330c      	adds	r3, #12
 80013ba:	7819      	ldrb	r1, [r3, #0]
 80013bc:	4a2b      	ldr	r2, [pc, #172]	@ (800146c <GetCodeFromServer+0x200>)
 80013be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80013c2:	4413      	add	r3, r2
 80013c4:	3301      	adds	r3, #1
 80013c6:	460a      	mov	r2, r1
 80013c8:	701a      	strb	r2, [r3, #0]
						++count;
 80013ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80013ce:	3301      	adds	r3, #1
 80013d0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
					for(int i = foundRes + 2; i <= 256; ++i){
 80013d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80013d8:	3301      	adds	r3, #1
 80013da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80013de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80013e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80013e6:	dddb      	ble.n	80013a0 <GetCodeFromServer+0x134>
 80013e8:	e000      	b.n	80013ec <GetCodeFromServer+0x180>
						if(_Server.HTTPGetResponse[i] == '\"') break;
 80013ea:	bf00      	nop
					sprintf(DataResponseToServer, "{\"ID\":\"%s\",\"S\":\"31\"}", oldID);
 80013ec:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	491f      	ldr	r1, [pc, #124]	@ (8001470 <GetCodeFromServer+0x204>)
 80013f4:	4618      	mov	r0, r3
 80013f6:	f009 f9c3 	bl	800a780 <siprintf>
					if((http_post(&sim, API_POST_CODE_IOTVISION, DataResponseToServer) == SIM7600_ERROR) || (strlen(BoardParameter.ID) == 0)){
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	461a      	mov	r2, r3
 80013fe:	491d      	ldr	r1, [pc, #116]	@ (8001474 <GetCodeFromServer+0x208>)
 8001400:	4818      	ldr	r0, [pc, #96]	@ (8001464 <GetCodeFromServer+0x1f8>)
 8001402:	f003 f8b1 	bl	8004568 <http_post>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d003      	beq.n	8001414 <GetCodeFromServer+0x1a8>
 800140c:	4b10      	ldr	r3, [pc, #64]	@ (8001450 <GetCodeFromServer+0x1e4>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d10b      	bne.n	800142c <GetCodeFromServer+0x1c0>
						memset(BoardParameter.ID, 0, sizeof(BoardParameter.ID));
 8001414:	220f      	movs	r2, #15
 8001416:	2100      	movs	r1, #0
 8001418:	480d      	ldr	r0, [pc, #52]	@ (8001450 <GetCodeFromServer+0x1e4>)
 800141a:	f009 fa40 	bl	800a89e <memset>
						strcpy(BoardParameter.ID, oldID);
 800141e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001422:	4619      	mov	r1, r3
 8001424:	480a      	ldr	r0, [pc, #40]	@ (8001450 <GetCodeFromServer+0x1e4>)
 8001426:	f009 facc 	bl	800a9c2 <strcpy>
					break;
 800142a:	e005      	b.n	8001438 <GetCodeFromServer+0x1cc>
						EEPROM_write_bytes(&eeprom, 0, (uint8_t *)&BoardParameter, sizeof(BoardParameter));
 800142c:	232a      	movs	r3, #42	@ 0x2a
 800142e:	4a0f      	ldr	r2, [pc, #60]	@ (800146c <GetCodeFromServer+0x200>)
 8001430:	2100      	movs	r1, #0
 8001432:	4811      	ldr	r0, [pc, #68]	@ (8001478 <GetCodeFromServer+0x20c>)
 8001434:	f001 fa23 	bl	800287e <EEPROM_write_bytes>
					break;
 8001438:	bf00      	nop
			}

			memset(_Server.HTTPGetResponse, 0, sizeof(_Server.HTTPGetResponse));
 800143a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800143e:	2100      	movs	r1, #0
 8001440:	4807      	ldr	r0, [pc, #28]	@ (8001460 <GetCodeFromServer+0x1f4>)
 8001442:	f009 fa2c 	bl	800a89e <memset>
	//			_Server.get_code = 0;
	//			sprintf(_Server.HTTPGetResponse, "[{\"ID\":\"51A94887\",\"S\":\"%d\"}]", _Server.get_code);
	//			http_post(&sim, API_POST_CODE_IOTVISION, _Server.HTTPGetResponse);
	//		}
	//				http_get(&sim, API_GET_TEST, HTTPGetResponse, &HTTPGetCode);
}
 8001446:	bf00      	nop
 8001448:	37f0      	adds	r7, #240	@ 0xf0
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000b69 	.word	0x20000b69
 8001454:	0800e9a8 	.word	0x0800e9a8
 8001458:	0800e9ec 	.word	0x0800e9ec
 800145c:	20000960 	.word	0x20000960
 8001460:	20000968 	.word	0x20000968
 8001464:	20000224 	.word	0x20000224
 8001468:	2000095c 	.word	0x2000095c
 800146c:	20000b68 	.word	0x20000b68
 8001470:	0800e9f4 	.word	0x0800e9f4
 8001474:	0800ea0c 	.word	0x0800ea0c
 8001478:	200006a4 	.word	0x200006a4

0800147c <Bip>:

void Bip(){
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8001480:	2201      	movs	r2, #1
 8001482:	2102      	movs	r1, #2
 8001484:	4807      	ldr	r0, [pc, #28]	@ (80014a4 <Bip+0x28>)
 8001486:	f004 f9b7 	bl	80057f8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800148a:	2032      	movs	r0, #50	@ 0x32
 800148c:	f003 fac8 	bl	8004a20 <HAL_Delay>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001490:	2200      	movs	r2, #0
 8001492:	2102      	movs	r1, #2
 8001494:	4803      	ldr	r0, [pc, #12]	@ (80014a4 <Bip+0x28>)
 8001496:	f004 f9af 	bl	80057f8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800149a:	2032      	movs	r0, #50	@ 0x32
 800149c:	f003 fac0 	bl	8004a20 <HAL_Delay>

}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40020400 	.word	0x40020400

080014a8 <RunMainProgram>:

void RunMainProgram(){
 80014a8:	b5b0      	push	{r4, r5, r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af02      	add	r7, sp, #8
// Timer 50ms
#ifdef FLAG_50ms
	if(_Flag.t50ms){
 80014ae:	4b3c      	ldr	r3, [pc, #240]	@ (80015a0 <RunMainProgram+0xf8>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d002      	beq.n	80014bc <RunMainProgram+0x14>

		_Flag.t50ms = 0;
 80014b6:	4b3a      	ldr	r3, [pc, #232]	@ (80015a0 <RunMainProgram+0xf8>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	701a      	strb	r2, [r3, #0]
	}
#endif

// Timer 100ms
#ifdef FLAG_100ms
	if(_Flag.t100ms){
 80014bc:	4b38      	ldr	r3, [pc, #224]	@ (80015a0 <RunMainProgram+0xf8>)
 80014be:	791b      	ldrb	r3, [r3, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d002      	beq.n	80014ca <RunMainProgram+0x22>

		_Flag.t100ms = 0;
 80014c4:	4b36      	ldr	r3, [pc, #216]	@ (80015a0 <RunMainProgram+0xf8>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	711a      	strb	r2, [r3, #4]
	}
#endif

// Timer 250ms
#ifdef FLAG_250ms
	if(_Flag.t250ms){
 80014ca:	4b35      	ldr	r3, [pc, #212]	@ (80015a0 <RunMainProgram+0xf8>)
 80014cc:	7a1b      	ldrb	r3, [r3, #8]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d002      	beq.n	80014d8 <RunMainProgram+0x30>

		_Flag.t250ms = 0;
 80014d2:	4b33      	ldr	r3, [pc, #204]	@ (80015a0 <RunMainProgram+0xf8>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	721a      	strb	r2, [r3, #8]
	}
#endif

// Timer 500ms
#ifdef FLAG_500ms
	if(_Flag.t500ms){
 80014d8:	4b31      	ldr	r3, [pc, #196]	@ (80015a0 <RunMainProgram+0xf8>)
 80014da:	7b1b      	ldrb	r3, [r3, #12]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d020      	beq.n	8001522 <RunMainProgram+0x7a>
		if(flag_Received == 1){
 80014e0:	4b30      	ldr	r3, [pc, #192]	@ (80015a4 <RunMainProgram+0xfc>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d105      	bne.n	80014f4 <RunMainProgram+0x4c>
			HAL_GPIO_WritePin(LED_SENSOR_GPIO_Port, LED_SENSOR_Pin, GPIO_PIN_SET);
 80014e8:	2201      	movs	r2, #1
 80014ea:	2110      	movs	r1, #16
 80014ec:	482e      	ldr	r0, [pc, #184]	@ (80015a8 <RunMainProgram+0x100>)
 80014ee:	f004 f983 	bl	80057f8 <HAL_GPIO_WritePin>
 80014f2:	e004      	b.n	80014fe <RunMainProgram+0x56>
		}
		else{
			HAL_GPIO_WritePin(LED_SENSOR_GPIO_Port, LED_SENSOR_Pin, GPIO_PIN_RESET);
 80014f4:	2200      	movs	r2, #0
 80014f6:	2110      	movs	r1, #16
 80014f8:	482b      	ldr	r0, [pc, #172]	@ (80015a8 <RunMainProgram+0x100>)
 80014fa:	f004 f97d 	bl	80057f8 <HAL_GPIO_WritePin>
		}

		if(ServerConnected == 1){
 80014fe:	4b2b      	ldr	r3, [pc, #172]	@ (80015ac <RunMainProgram+0x104>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d105      	bne.n	8001512 <RunMainProgram+0x6a>
			HAL_GPIO_WritePin(LED_SERVER_GPIO_Port, LED_SERVER_Pin, GPIO_PIN_SET);
 8001506:	2201      	movs	r2, #1
 8001508:	2140      	movs	r1, #64	@ 0x40
 800150a:	4827      	ldr	r0, [pc, #156]	@ (80015a8 <RunMainProgram+0x100>)
 800150c:	f004 f974 	bl	80057f8 <HAL_GPIO_WritePin>
 8001510:	e004      	b.n	800151c <RunMainProgram+0x74>
		}
		else{
			HAL_GPIO_WritePin(LED_SERVER_GPIO_Port, LED_SERVER_Pin, GPIO_PIN_RESET);
 8001512:	2200      	movs	r2, #0
 8001514:	2140      	movs	r1, #64	@ 0x40
 8001516:	4824      	ldr	r0, [pc, #144]	@ (80015a8 <RunMainProgram+0x100>)
 8001518:	f004 f96e 	bl	80057f8 <HAL_GPIO_WritePin>
		}
		_Flag.t500ms = 0;
 800151c:	4b20      	ldr	r3, [pc, #128]	@ (80015a0 <RunMainProgram+0xf8>)
 800151e:	2200      	movs	r2, #0
 8001520:	731a      	strb	r2, [r3, #12]
	}
#endif

// Timer 1s
#ifdef FLAG_1s
	if(_Flag.t1s){
 8001522:	4b1f      	ldr	r3, [pc, #124]	@ (80015a0 <RunMainProgram+0xf8>)
 8001524:	7c1b      	ldrb	r3, [r3, #16]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d004      	beq.n	8001534 <RunMainProgram+0x8c>

		GetCodeFromServer();
 800152a:	f7ff fe9f 	bl	800126c <GetCodeFromServer>

		_Flag.t1s = 0;
 800152e:	4b1c      	ldr	r3, [pc, #112]	@ (80015a0 <RunMainProgram+0xf8>)
 8001530:	2200      	movs	r2, #0
 8001532:	741a      	strb	r2, [r3, #16]
	}
#endif

// Timer 1500ms
#ifdef FLAG_1500ms
	if(_Flag.t1500ms){
 8001534:	4b1a      	ldr	r3, [pc, #104]	@ (80015a0 <RunMainProgram+0xf8>)
 8001536:	7d1b      	ldrb	r3, [r3, #20]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d002      	beq.n	8001542 <RunMainProgram+0x9a>

		_Flag.t1500ms = 0;
 800153c:	4b18      	ldr	r3, [pc, #96]	@ (80015a0 <RunMainProgram+0xf8>)
 800153e:	2200      	movs	r2, #0
 8001540:	751a      	strb	r2, [r3, #20]
	}
#endif

// Timer 2s
#ifdef FLAG_2s
	if(_Flag.t2s){
 8001542:	4b17      	ldr	r3, [pc, #92]	@ (80015a0 <RunMainProgram+0xf8>)
 8001544:	7e1b      	ldrb	r3, [r3, #24]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d07a      	beq.n	8001640 <RunMainProgram+0x198>
#ifdef RUN_SIM
//		CheckSimConnect(&sim);
		GetSignal(&sim);
 800154a:	4819      	ldr	r0, [pc, #100]	@ (80015b0 <RunMainProgram+0x108>)
 800154c:	f002 fc96 	bl	8003e7c <GetSignal>
#endif

		Satelites = getSatelitesNum(&gps);
 8001550:	4818      	ldr	r0, [pc, #96]	@ (80015b4 <RunMainProgram+0x10c>)
 8001552:	f001 fe72 	bl	800323a <getSatelitesNum>
 8001556:	eef0 7a40 	vmov.f32	s15, s0
 800155a:	4b17      	ldr	r3, [pc, #92]	@ (80015b8 <RunMainProgram+0x110>)
 800155c:	edc3 7a00 	vstr	s15, [r3]
		if((Satelites < 8) && (sim.Signal > 0)){
 8001560:	4b15      	ldr	r3, [pc, #84]	@ (80015b8 <RunMainProgram+0x110>)
 8001562:	edd3 7a00 	vldr	s15, [r3]
 8001566:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800156a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800156e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001572:	d529      	bpl.n	80015c8 <RunMainProgram+0x120>
 8001574:	4b0e      	ldr	r3, [pc, #56]	@ (80015b0 <RunMainProgram+0x108>)
 8001576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001578:	2b00      	cmp	r3, #0
 800157a:	dd25      	ble.n	80015c8 <RunMainProgram+0x120>
			GetLBS(&sim);
 800157c:	480c      	ldr	r0, [pc, #48]	@ (80015b0 <RunMainProgram+0x108>)
 800157e:	f002 fb43 	bl	8003c08 <GetLBS>
			Latitude = sim.LBS_Loc.Latitude;
 8001582:	4b0b      	ldr	r3, [pc, #44]	@ (80015b0 <RunMainProgram+0x108>)
 8001584:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001588:	4a0c      	ldr	r2, [pc, #48]	@ (80015bc <RunMainProgram+0x114>)
 800158a:	6013      	str	r3, [r2, #0]
			Longitude = sim.LBS_Loc.Longitude;
 800158c:	4b08      	ldr	r3, [pc, #32]	@ (80015b0 <RunMainProgram+0x108>)
 800158e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001592:	4a0b      	ldr	r2, [pc, #44]	@ (80015c0 <RunMainProgram+0x118>)
 8001594:	6013      	str	r3, [r2, #0]
			Speed = 0;
 8001596:	4b0b      	ldr	r3, [pc, #44]	@ (80015c4 <RunMainProgram+0x11c>)
 8001598:	f04f 0200 	mov.w	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	e02b      	b.n	80015f8 <RunMainProgram+0x150>
 80015a0:	20000644 	.word	0x20000644
 80015a4:	20000944 	.word	0x20000944
 80015a8:	40020c00 	.word	0x40020c00
 80015ac:	20000928 	.word	0x20000928
 80015b0:	20000224 	.word	0x20000224
 80015b4:	200005e8 	.word	0x200005e8
 80015b8:	20000924 	.word	0x20000924
 80015bc:	20000918 	.word	0x20000918
 80015c0:	2000091c 	.word	0x2000091c
 80015c4:	20000920 	.word	0x20000920
		}
		else{
			Latitude = getLatitude(&gps);
 80015c8:	4867      	ldr	r0, [pc, #412]	@ (8001768 <RunMainProgram+0x2c0>)
 80015ca:	f001 fe09 	bl	80031e0 <getLatitude>
 80015ce:	eef0 7a40 	vmov.f32	s15, s0
 80015d2:	4b66      	ldr	r3, [pc, #408]	@ (800176c <RunMainProgram+0x2c4>)
 80015d4:	edc3 7a00 	vstr	s15, [r3]
			Longitude = getLongitude(&gps);
 80015d8:	4863      	ldr	r0, [pc, #396]	@ (8001768 <RunMainProgram+0x2c0>)
 80015da:	f001 fe10 	bl	80031fe <getLongitude>
 80015de:	eef0 7a40 	vmov.f32	s15, s0
 80015e2:	4b63      	ldr	r3, [pc, #396]	@ (8001770 <RunMainProgram+0x2c8>)
 80015e4:	edc3 7a00 	vstr	s15, [r3]
			Speed = getSpeed(&gps);
 80015e8:	485f      	ldr	r0, [pc, #380]	@ (8001768 <RunMainProgram+0x2c0>)
 80015ea:	f001 fe17 	bl	800321c <getSpeed>
 80015ee:	eef0 7a40 	vmov.f32	s15, s0
 80015f2:	4b60      	ldr	r3, [pc, #384]	@ (8001774 <RunMainProgram+0x2cc>)
 80015f4:	edc3 7a00 	vstr	s15, [r3]
		}
		sprintf(DebugGPSLocation,"https://www.google.com/maps/?q=%f,%f\r\n", Latitude, Longitude);
 80015f8:	4b5c      	ldr	r3, [pc, #368]	@ (800176c <RunMainProgram+0x2c4>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe ffa3 	bl	8000548 <__aeabi_f2d>
 8001602:	4604      	mov	r4, r0
 8001604:	460d      	mov	r5, r1
 8001606:	4b5a      	ldr	r3, [pc, #360]	@ (8001770 <RunMainProgram+0x2c8>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe ff9c 	bl	8000548 <__aeabi_f2d>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	e9cd 2300 	strd	r2, r3, [sp]
 8001618:	4622      	mov	r2, r4
 800161a:	462b      	mov	r3, r5
 800161c:	4956      	ldr	r1, [pc, #344]	@ (8001778 <RunMainProgram+0x2d0>)
 800161e:	4857      	ldr	r0, [pc, #348]	@ (800177c <RunMainProgram+0x2d4>)
 8001620:	f009 f8ae 	bl	800a780 <siprintf>

		HAL_UART_Transmit(&huart4, (uint8_t *)DebugGPSLocation, strlen(DebugGPSLocation), 1000);
 8001624:	4855      	ldr	r0, [pc, #340]	@ (800177c <RunMainProgram+0x2d4>)
 8001626:	f7fe fe23 	bl	8000270 <strlen>
 800162a:	4603      	mov	r3, r0
 800162c:	b29a      	uxth	r2, r3
 800162e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001632:	4952      	ldr	r1, [pc, #328]	@ (800177c <RunMainProgram+0x2d4>)
 8001634:	4852      	ldr	r0, [pc, #328]	@ (8001780 <RunMainProgram+0x2d8>)
 8001636:	f006 fed3 	bl	80083e0 <HAL_UART_Transmit>
		_Flag.t2s = 0;
 800163a:	4b52      	ldr	r3, [pc, #328]	@ (8001784 <RunMainProgram+0x2dc>)
 800163c:	2200      	movs	r2, #0
 800163e:	761a      	strb	r2, [r3, #24]
	}
#endif

// Timer 3s
#ifdef FLAG_3s
	if(_Flag.t3s){
 8001640:	4b50      	ldr	r3, [pc, #320]	@ (8001784 <RunMainProgram+0x2dc>)
 8001642:	7f1b      	ldrb	r3, [r3, #28]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d002      	beq.n	800164e <RunMainProgram+0x1a6>

		_Flag.t3s = 0;
 8001648:	4b4e      	ldr	r3, [pc, #312]	@ (8001784 <RunMainProgram+0x2dc>)
 800164a:	2200      	movs	r2, #0
 800164c:	771a      	strb	r2, [r3, #28]
	}
#endif

// Timer 4s
#ifdef FLAG_4s
	if(_Flag.t4s){
 800164e:	4b4d      	ldr	r3, [pc, #308]	@ (8001784 <RunMainProgram+0x2dc>)
 8001650:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <RunMainProgram+0x1b8>

		_Flag.t4s = 0;
 8001658:	4b4a      	ldr	r3, [pc, #296]	@ (8001784 <RunMainProgram+0x2dc>)
 800165a:	2200      	movs	r2, #0
 800165c:	f883 2020 	strb.w	r2, [r3, #32]
	}
#endif

// Timer 5s
#ifdef FLAG_5s
	if(_Flag.t5s){
 8001660:	4b48      	ldr	r3, [pc, #288]	@ (8001784 <RunMainProgram+0x2dc>)
 8001662:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <RunMainProgram+0x1ca>
		//	  HAL_Delay(100);
		//	  http_post(&sim, API_POST_DATA_DEOCA, "{\"ID\":\"B0B21C9ED20C\",\"s\":\"11001111;32.5;80.6;79;20:11:13 06/03/2024\"}");
		//	  HAL_Delay(100);
		//#endif

		_Flag.t5s = 0;
 800166a:	4b46      	ldr	r3, [pc, #280]	@ (8001784 <RunMainProgram+0x2dc>)
 800166c:	2200      	movs	r2, #0
 800166e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	}
#endif

// Timer 6s
#ifdef FLAG_6s
	if(_Flag.t6s){
 8001672:	4b44      	ldr	r3, [pc, #272]	@ (8001784 <RunMainProgram+0x2dc>)
 8001674:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001678:	2b00      	cmp	r3, #0
 800167a:	d003      	beq.n	8001684 <RunMainProgram+0x1dc>

		_Flag.t6s = 0;
 800167c:	4b41      	ldr	r3, [pc, #260]	@ (8001784 <RunMainProgram+0x2dc>)
 800167e:	2200      	movs	r2, #0
 8001680:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	}
#endif

// Timer 10s
#ifdef FLAG_10s
	if(_Flag.t10s){
 8001684:	4b3f      	ldr	r3, [pc, #252]	@ (8001784 <RunMainProgram+0x2dc>)
 8001686:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <RunMainProgram+0x1ee>

		_Flag.t10s = 0;
 800168e:	4b3d      	ldr	r3, [pc, #244]	@ (8001784 <RunMainProgram+0x2dc>)
 8001690:	2200      	movs	r2, #0
 8001692:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	}
#endif

// Timer 15s
#ifdef FLAG_15s
	if(_Flag.t15s){
 8001696:	4b3b      	ldr	r3, [pc, #236]	@ (8001784 <RunMainProgram+0x2dc>)
 8001698:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800169c:	2b00      	cmp	r3, #0
 800169e:	d007      	beq.n	80016b0 <RunMainProgram+0x208>
#ifdef RUN_SIM
//		if(ACC_State == 1){
			PostDataToServer();
 80016a0:	f7ff fd52 	bl	8001148 <PostDataToServer>

			Bip();
 80016a4:	f7ff feea 	bl	800147c <Bip>
//		}
#endif
		_Flag.t15s = 0;
 80016a8:	4b36      	ldr	r3, [pc, #216]	@ (8001784 <RunMainProgram+0x2dc>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	}
#endif

// Timer 30s
#ifdef FLAG_30s
	if(_Flag.t30s){
 80016b0:	4b34      	ldr	r3, [pc, #208]	@ (8001784 <RunMainProgram+0x2dc>)
 80016b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <RunMainProgram+0x21a>

		_Flag.t30s = 0;
 80016ba:	4b32      	ldr	r3, [pc, #200]	@ (8001784 <RunMainProgram+0x2dc>)
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}
#endif

// Timer 35s
#ifdef FLAG_35s
	if(_Flag.t35s){
 80016c2:	4b30      	ldr	r3, [pc, #192]	@ (8001784 <RunMainProgram+0x2dc>)
 80016c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d003      	beq.n	80016d4 <RunMainProgram+0x22c>

		_Flag.t35s = 0;
 80016cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001784 <RunMainProgram+0x2dc>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	}
#endif

// Timer 15p
#ifdef FLAG_15p
	if(_Flag.t15p){
 80016d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001784 <RunMainProgram+0x2dc>)
 80016d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d041      	beq.n	8001762 <RunMainProgram+0x2ba>
#ifdef RUN_SIM

		GetLBS(&sim);
 80016de:	482a      	ldr	r0, [pc, #168]	@ (8001788 <RunMainProgram+0x2e0>)
 80016e0:	f002 fa92 	bl	8003c08 <GetLBS>

		if(sim.LBS_Date.Date != 0) date_time.Date = sim.LBS_Date.Date;
 80016e4:	4b28      	ldr	r3, [pc, #160]	@ (8001788 <RunMainProgram+0x2e0>)
 80016e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <RunMainProgram+0x24c>
 80016ec:	4b26      	ldr	r3, [pc, #152]	@ (8001788 <RunMainProgram+0x2e0>)
 80016ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80016f0:	4a26      	ldr	r2, [pc, #152]	@ (800178c <RunMainProgram+0x2e4>)
 80016f2:	6053      	str	r3, [r2, #4]
		if(sim.LBS_Date.Day != 0) date_time.Day = sim.LBS_Date.Day;
 80016f4:	4b24      	ldr	r3, [pc, #144]	@ (8001788 <RunMainProgram+0x2e0>)
 80016f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d003      	beq.n	8001704 <RunMainProgram+0x25c>
 80016fc:	4b22      	ldr	r3, [pc, #136]	@ (8001788 <RunMainProgram+0x2e0>)
 80016fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001700:	4a22      	ldr	r2, [pc, #136]	@ (800178c <RunMainProgram+0x2e4>)
 8001702:	6013      	str	r3, [r2, #0]
		if(sim.LBS_Date.Month != 0) date_time.Month = sim.LBS_Date.Month;
 8001704:	4b20      	ldr	r3, [pc, #128]	@ (8001788 <RunMainProgram+0x2e0>)
 8001706:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001708:	2b00      	cmp	r3, #0
 800170a:	d003      	beq.n	8001714 <RunMainProgram+0x26c>
 800170c:	4b1e      	ldr	r3, [pc, #120]	@ (8001788 <RunMainProgram+0x2e0>)
 800170e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001710:	4a1e      	ldr	r2, [pc, #120]	@ (800178c <RunMainProgram+0x2e4>)
 8001712:	6093      	str	r3, [r2, #8]
		if(sim.LBS_Date.Year != 0) date_time.Year = sim.LBS_Date.Year;
 8001714:	4b1c      	ldr	r3, [pc, #112]	@ (8001788 <RunMainProgram+0x2e0>)
 8001716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001718:	2b00      	cmp	r3, #0
 800171a:	d003      	beq.n	8001724 <RunMainProgram+0x27c>
 800171c:	4b1a      	ldr	r3, [pc, #104]	@ (8001788 <RunMainProgram+0x2e0>)
 800171e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001720:	4a1a      	ldr	r2, [pc, #104]	@ (800178c <RunMainProgram+0x2e4>)
 8001722:	60d3      	str	r3, [r2, #12]

		if(sim.LBS_Date.Hour != 0) date_time.Hour = sim.LBS_Date.Hour;
 8001724:	4b18      	ldr	r3, [pc, #96]	@ (8001788 <RunMainProgram+0x2e0>)
 8001726:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001728:	2b00      	cmp	r3, #0
 800172a:	d003      	beq.n	8001734 <RunMainProgram+0x28c>
 800172c:	4b16      	ldr	r3, [pc, #88]	@ (8001788 <RunMainProgram+0x2e0>)
 800172e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001730:	4a16      	ldr	r2, [pc, #88]	@ (800178c <RunMainProgram+0x2e4>)
 8001732:	6113      	str	r3, [r2, #16]
		if(sim.LBS_Date.Minute != 0) date_time.Minute = sim.LBS_Date.Minute;
 8001734:	4b14      	ldr	r3, [pc, #80]	@ (8001788 <RunMainProgram+0x2e0>)
 8001736:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <RunMainProgram+0x29c>
 800173c:	4b12      	ldr	r3, [pc, #72]	@ (8001788 <RunMainProgram+0x2e0>)
 800173e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001740:	4a12      	ldr	r2, [pc, #72]	@ (800178c <RunMainProgram+0x2e4>)
 8001742:	6153      	str	r3, [r2, #20]
		if(sim.LBS_Date.Second != 0) date_time.Second = sim.LBS_Date.Second;
 8001744:	4b10      	ldr	r3, [pc, #64]	@ (8001788 <RunMainProgram+0x2e0>)
 8001746:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <RunMainProgram+0x2ac>
 800174c:	4b0e      	ldr	r3, [pc, #56]	@ (8001788 <RunMainProgram+0x2e0>)
 800174e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001750:	4a0e      	ldr	r2, [pc, #56]	@ (800178c <RunMainProgram+0x2e4>)
 8001752:	6193      	str	r3, [r2, #24]

		DS3231_write_time(&date_time);
 8001754:	480d      	ldr	r0, [pc, #52]	@ (800178c <RunMainProgram+0x2e4>)
 8001756:	f001 f92f 	bl	80029b8 <DS3231_write_time>
#endif
		_Flag.t15p = 0;
 800175a:	4b0a      	ldr	r3, [pc, #40]	@ (8001784 <RunMainProgram+0x2dc>)
 800175c:	2200      	movs	r2, #0
 800175e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	}
#endif

}
 8001762:	bf00      	nop
 8001764:	46bd      	mov	sp, r7
 8001766:	bdb0      	pop	{r4, r5, r7, pc}
 8001768:	200005e8 	.word	0x200005e8
 800176c:	20000918 	.word	0x20000918
 8001770:	2000091c 	.word	0x2000091c
 8001774:	20000920 	.word	0x20000920
 8001778:	0800ea40 	.word	0x0800ea40
 800177c:	20000c5c 	.word	0x20000c5c
 8001780:	20000794 	.word	0x20000794
 8001784:	20000644 	.word	0x20000644
 8001788:	20000224 	.word	0x20000224
 800178c:	20000688 	.word	0x20000688

08001790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001796:	f003 f8d1 	bl	800493c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800179a:	f000 f87d 	bl	8001898 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800179e:	f000 fa75 	bl	8001c8c <MX_GPIO_Init>
  MX_DMA_Init();
 80017a2:	f000 fa53 	bl	8001c4c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80017a6:	f000 f9fd 	bl	8001ba4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80017aa:	f000 fa25 	bl	8001bf8 <MX_USART3_UART_Init>
  MX_UART4_Init();
 80017ae:	f000 f9a5 	bl	8001afc <MX_UART4_Init>
  MX_USART1_UART_Init();
 80017b2:	f000 f9cd 	bl	8001b50 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80017b6:	f000 f907 	bl	80019c8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80017ba:	f000 f951 	bl	8001a60 <MX_TIM3_Init>
  MX_I2C1_Init();
 80017be:	f000 f8d5 	bl	800196c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80017c2:	4824      	ldr	r0, [pc, #144]	@ (8001854 <main+0xc4>)
 80017c4:	f006 f996 	bl	8007af4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80017c8:	4823      	ldr	r0, [pc, #140]	@ (8001858 <main+0xc8>)
 80017ca:	f006 f993 	bl	8007af4 <HAL_TIM_Base_Start_IT>


  HAL_GPIO_WritePin(LED_SENSOR_GPIO_Port, LED_SENSOR_Pin, GPIO_PIN_SET);
 80017ce:	2201      	movs	r2, #1
 80017d0:	2110      	movs	r1, #16
 80017d2:	4822      	ldr	r0, [pc, #136]	@ (800185c <main+0xcc>)
 80017d4:	f004 f810 	bl	80057f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_DRIVER_GPIO_Port, LED_DRIVER_Pin, GPIO_PIN_SET);
 80017d8:	2201      	movs	r2, #1
 80017da:	2120      	movs	r1, #32
 80017dc:	481f      	ldr	r0, [pc, #124]	@ (800185c <main+0xcc>)
 80017de:	f004 f80b 	bl	80057f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_SERVER_GPIO_Port, LED_SERVER_Pin, GPIO_PIN_SET);
 80017e2:	2201      	movs	r2, #1
 80017e4:	2140      	movs	r1, #64	@ 0x40
 80017e6:	481d      	ldr	r0, [pc, #116]	@ (800185c <main+0xcc>)
 80017e8:	f004 f806 	bl	80057f8 <HAL_GPIO_WritePin>

  rtc_init(&hi2c1);
 80017ec:	481c      	ldr	r0, [pc, #112]	@ (8001860 <main+0xd0>)
 80017ee:	f001 f895 	bl	800291c <rtc_init>
  DS3231_read_time(&date_time);
 80017f2:	481c      	ldr	r0, [pc, #112]	@ (8001864 <main+0xd4>)
 80017f4:	f001 f92e 	bl	8002a54 <DS3231_read_time>

  EEPROM_init(&eeprom, &hi2c1, EEPROM_I2C_ADDRESS, EEPROM_SIZE);
 80017f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017fc:	2250      	movs	r2, #80	@ 0x50
 80017fe:	4918      	ldr	r1, [pc, #96]	@ (8001860 <main+0xd0>)
 8001800:	4819      	ldr	r0, [pc, #100]	@ (8001868 <main+0xd8>)
 8001802:	f000 fff6 	bl	80027f2 <EEPROM_init>
//  BoardParameter.update_status = 1;
//  strcpy(BoardParameter.ID, "51A94887");
//  EEPROM_write_bytes(&eeprom, 0, (uint8_t *)&BoardParameter, sizeof(BoardParameter));
//  clear_EEPROM(&eeprom);

  EEPROM_read_bytes(&eeprom, 0, (uint8_t *)&BoardParameter, sizeof(BoardParameter));
 8001806:	232a      	movs	r3, #42	@ 0x2a
 8001808:	4a18      	ldr	r2, [pc, #96]	@ (800186c <main+0xdc>)
 800180a:	2100      	movs	r1, #0
 800180c:	4816      	ldr	r0, [pc, #88]	@ (8001868 <main+0xd8>)
 800180e:	f001 f86f 	bl	80028f0 <EEPROM_read_bytes>

#ifdef RUN_LigoSENSOR
  Command_Format(data_txCommand, data_rxResponse);
 8001812:	4917      	ldr	r1, [pc, #92]	@ (8001870 <main+0xe0>)
 8001814:	4817      	ldr	r0, [pc, #92]	@ (8001874 <main+0xe4>)
 8001816:	f001 fa93 	bl	8002d40 <Command_Format>
#endif


#ifdef RUN_GPS
// Init GPS module
  GPS_Init(&gps, &huart3);
 800181a:	4917      	ldr	r1, [pc, #92]	@ (8001878 <main+0xe8>)
 800181c:	4817      	ldr	r0, [pc, #92]	@ (800187c <main+0xec>)
 800181e:	f001 fafb 	bl	8002e18 <GPS_Init>
#endif

#ifdef RUN_SIM
// Init SIMCOM module
  SIMInit(&sim, &huart2, &hdma_usart2_rx, SIM_PWR_Pin, SIM_PWR_GPIO_Port, SIM_RST_Pin, SIM_RST_GPIO_Port, SIM_STATUS_Pin, SIM_STATUS_GPIO_Port);
 8001822:	4b17      	ldr	r3, [pc, #92]	@ (8001880 <main+0xf0>)
 8001824:	9304      	str	r3, [sp, #16]
 8001826:	2301      	movs	r3, #1
 8001828:	9303      	str	r3, [sp, #12]
 800182a:	4b16      	ldr	r3, [pc, #88]	@ (8001884 <main+0xf4>)
 800182c:	9302      	str	r3, [sp, #8]
 800182e:	2320      	movs	r3, #32
 8001830:	9301      	str	r3, [sp, #4]
 8001832:	4b15      	ldr	r3, [pc, #84]	@ (8001888 <main+0xf8>)
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800183a:	4a14      	ldr	r2, [pc, #80]	@ (800188c <main+0xfc>)
 800183c:	4914      	ldr	r1, [pc, #80]	@ (8001890 <main+0x100>)
 800183e:	4815      	ldr	r0, [pc, #84]	@ (8001894 <main+0x104>)
 8001840:	f001 fefa 	bl	8003638 <SIMInit>
  HAL_Delay(1000);
 8001844:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001848:	f003 f8ea 	bl	8004a20 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  RunMainProgram();
 800184c:	f7ff fe2c 	bl	80014a8 <RunMainProgram>
 8001850:	e7fc      	b.n	800184c <main+0xbc>
 8001852:	bf00      	nop
 8001854:	20000704 	.word	0x20000704
 8001858:	2000074c 	.word	0x2000074c
 800185c:	40020c00 	.word	0x40020c00
 8001860:	200006b0 	.word	0x200006b0
 8001864:	20000688 	.word	0x20000688
 8001868:	200006a4 	.word	0x200006a4
 800186c:	20000b68 	.word	0x20000b68
 8001870:	20000930 	.word	0x20000930
 8001874:	2000092c 	.word	0x2000092c
 8001878:	2000086c 	.word	0x2000086c
 800187c:	200005e8 	.word	0x200005e8
 8001880:	40020400 	.word	0x40020400
 8001884:	40020800 	.word	0x40020800
 8001888:	40020000 	.word	0x40020000
 800188c:	200008b4 	.word	0x200008b4
 8001890:	20000824 	.word	0x20000824
 8001894:	20000224 	.word	0x20000224

08001898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b094      	sub	sp, #80	@ 0x50
 800189c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800189e:	f107 0320 	add.w	r3, r7, #32
 80018a2:	2230      	movs	r2, #48	@ 0x30
 80018a4:	2100      	movs	r1, #0
 80018a6:	4618      	mov	r0, r3
 80018a8:	f008 fff9 	bl	800a89e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018ac:	f107 030c 	add.w	r3, r7, #12
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018bc:	2300      	movs	r3, #0
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	4b28      	ldr	r3, [pc, #160]	@ (8001964 <SystemClock_Config+0xcc>)
 80018c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c4:	4a27      	ldr	r2, [pc, #156]	@ (8001964 <SystemClock_Config+0xcc>)
 80018c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80018cc:	4b25      	ldr	r3, [pc, #148]	@ (8001964 <SystemClock_Config+0xcc>)
 80018ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018d8:	2300      	movs	r3, #0
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	4b22      	ldr	r3, [pc, #136]	@ (8001968 <SystemClock_Config+0xd0>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a21      	ldr	r2, [pc, #132]	@ (8001968 <SystemClock_Config+0xd0>)
 80018e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001968 <SystemClock_Config+0xd0>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018f0:	607b      	str	r3, [r7, #4]
 80018f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018f4:	2302      	movs	r3, #2
 80018f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018f8:	2301      	movs	r3, #1
 80018fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018fc:	2310      	movs	r3, #16
 80018fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001900:	2302      	movs	r3, #2
 8001902:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001904:	2300      	movs	r3, #0
 8001906:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001908:	2308      	movs	r3, #8
 800190a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 800190c:	2340      	movs	r3, #64	@ 0x40
 800190e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001910:	2302      	movs	r3, #2
 8001912:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001914:	2304      	movs	r3, #4
 8001916:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001918:	f107 0320 	add.w	r3, r7, #32
 800191c:	4618      	mov	r0, r3
 800191e:	f005 fc41 	bl	80071a4 <HAL_RCC_OscConfig>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001928:	f000 fad0 	bl	8001ecc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800192c:	230f      	movs	r3, #15
 800192e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001930:	2302      	movs	r3, #2
 8001932:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001938:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800193c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800193e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001942:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001944:	f107 030c 	add.w	r3, r7, #12
 8001948:	2102      	movs	r1, #2
 800194a:	4618      	mov	r0, r3
 800194c:	f005 fea2 	bl	8007694 <HAL_RCC_ClockConfig>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001956:	f000 fab9 	bl	8001ecc <Error_Handler>
  }
}
 800195a:	bf00      	nop
 800195c:	3750      	adds	r7, #80	@ 0x50
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40023800 	.word	0x40023800
 8001968:	40007000 	.word	0x40007000

0800196c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001970:	4b12      	ldr	r3, [pc, #72]	@ (80019bc <MX_I2C1_Init+0x50>)
 8001972:	4a13      	ldr	r2, [pc, #76]	@ (80019c0 <MX_I2C1_Init+0x54>)
 8001974:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001976:	4b11      	ldr	r3, [pc, #68]	@ (80019bc <MX_I2C1_Init+0x50>)
 8001978:	4a12      	ldr	r2, [pc, #72]	@ (80019c4 <MX_I2C1_Init+0x58>)
 800197a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800197c:	4b0f      	ldr	r3, [pc, #60]	@ (80019bc <MX_I2C1_Init+0x50>)
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001982:	4b0e      	ldr	r3, [pc, #56]	@ (80019bc <MX_I2C1_Init+0x50>)
 8001984:	2200      	movs	r2, #0
 8001986:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001988:	4b0c      	ldr	r3, [pc, #48]	@ (80019bc <MX_I2C1_Init+0x50>)
 800198a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800198e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001990:	4b0a      	ldr	r3, [pc, #40]	@ (80019bc <MX_I2C1_Init+0x50>)
 8001992:	2200      	movs	r2, #0
 8001994:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001996:	4b09      	ldr	r3, [pc, #36]	@ (80019bc <MX_I2C1_Init+0x50>)
 8001998:	2200      	movs	r2, #0
 800199a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800199c:	4b07      	ldr	r3, [pc, #28]	@ (80019bc <MX_I2C1_Init+0x50>)
 800199e:	2200      	movs	r2, #0
 80019a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019a2:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <MX_I2C1_Init+0x50>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019a8:	4804      	ldr	r0, [pc, #16]	@ (80019bc <MX_I2C1_Init+0x50>)
 80019aa:	f003 ff57 	bl	800585c <HAL_I2C_Init>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019b4:	f000 fa8a 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	200006b0 	.word	0x200006b0
 80019c0:	40005400 	.word	0x40005400
 80019c4:	000186a0 	.word	0x000186a0

080019c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ce:	f107 0308 	add.w	r3, r7, #8
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019dc:	463b      	mov	r3, r7
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019e4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a5c <MX_TIM2_Init+0x94>)
 80019e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 80019ec:	4b1b      	ldr	r3, [pc, #108]	@ (8001a5c <MX_TIM2_Init+0x94>)
 80019ee:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 80019f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f4:	4b19      	ldr	r3, [pc, #100]	@ (8001a5c <MX_TIM2_Init+0x94>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49;
 80019fa:	4b18      	ldr	r3, [pc, #96]	@ (8001a5c <MX_TIM2_Init+0x94>)
 80019fc:	2231      	movs	r2, #49	@ 0x31
 80019fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a00:	4b16      	ldr	r3, [pc, #88]	@ (8001a5c <MX_TIM2_Init+0x94>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a06:	4b15      	ldr	r3, [pc, #84]	@ (8001a5c <MX_TIM2_Init+0x94>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a0c:	4813      	ldr	r0, [pc, #76]	@ (8001a5c <MX_TIM2_Init+0x94>)
 8001a0e:	f006 f821 	bl	8007a54 <HAL_TIM_Base_Init>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001a18:	f000 fa58 	bl	8001ecc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a22:	f107 0308 	add.w	r3, r7, #8
 8001a26:	4619      	mov	r1, r3
 8001a28:	480c      	ldr	r0, [pc, #48]	@ (8001a5c <MX_TIM2_Init+0x94>)
 8001a2a:	f006 f9c3 	bl	8007db4 <HAL_TIM_ConfigClockSource>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001a34:	f000 fa4a 	bl	8001ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a40:	463b      	mov	r3, r7
 8001a42:	4619      	mov	r1, r3
 8001a44:	4805      	ldr	r0, [pc, #20]	@ (8001a5c <MX_TIM2_Init+0x94>)
 8001a46:	f006 fbeb 	bl	8008220 <HAL_TIMEx_MasterConfigSynchronization>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001a50:	f000 fa3c 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a54:	bf00      	nop
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000704 	.word	0x20000704

08001a60 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a66:	f107 0308 	add.w	r3, r7, #8
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
 8001a70:	609a      	str	r2, [r3, #8]
 8001a72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a74:	463b      	mov	r3, r7
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001af4 <MX_TIM3_Init+0x94>)
 8001a7e:	4a1e      	ldr	r2, [pc, #120]	@ (8001af8 <MX_TIM3_Init+0x98>)
 8001a80:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63999;
 8001a82:	4b1c      	ldr	r3, [pc, #112]	@ (8001af4 <MX_TIM3_Init+0x94>)
 8001a84:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8001a88:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001af4 <MX_TIM3_Init+0x94>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 8001a90:	4b18      	ldr	r3, [pc, #96]	@ (8001af4 <MX_TIM3_Init+0x94>)
 8001a92:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001a96:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a98:	4b16      	ldr	r3, [pc, #88]	@ (8001af4 <MX_TIM3_Init+0x94>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a9e:	4b15      	ldr	r3, [pc, #84]	@ (8001af4 <MX_TIM3_Init+0x94>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001aa4:	4813      	ldr	r0, [pc, #76]	@ (8001af4 <MX_TIM3_Init+0x94>)
 8001aa6:	f005 ffd5 	bl	8007a54 <HAL_TIM_Base_Init>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001ab0:	f000 fa0c 	bl	8001ecc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ab4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ab8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001aba:	f107 0308 	add.w	r3, r7, #8
 8001abe:	4619      	mov	r1, r3
 8001ac0:	480c      	ldr	r0, [pc, #48]	@ (8001af4 <MX_TIM3_Init+0x94>)
 8001ac2:	f006 f977 	bl	8007db4 <HAL_TIM_ConfigClockSource>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001acc:	f000 f9fe 	bl	8001ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ad8:	463b      	mov	r3, r7
 8001ada:	4619      	mov	r1, r3
 8001adc:	4805      	ldr	r0, [pc, #20]	@ (8001af4 <MX_TIM3_Init+0x94>)
 8001ade:	f006 fb9f 	bl	8008220 <HAL_TIMEx_MasterConfigSynchronization>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001ae8:	f000 f9f0 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001aec:	bf00      	nop
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	2000074c 	.word	0x2000074c
 8001af8:	40000400 	.word	0x40000400

08001afc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001b00:	4b11      	ldr	r3, [pc, #68]	@ (8001b48 <MX_UART4_Init+0x4c>)
 8001b02:	4a12      	ldr	r2, [pc, #72]	@ (8001b4c <MX_UART4_Init+0x50>)
 8001b04:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001b06:	4b10      	ldr	r3, [pc, #64]	@ (8001b48 <MX_UART4_Init+0x4c>)
 8001b08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b0c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b48 <MX_UART4_Init+0x4c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001b14:	4b0c      	ldr	r3, [pc, #48]	@ (8001b48 <MX_UART4_Init+0x4c>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b48 <MX_UART4_Init+0x4c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001b20:	4b09      	ldr	r3, [pc, #36]	@ (8001b48 <MX_UART4_Init+0x4c>)
 8001b22:	220c      	movs	r2, #12
 8001b24:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b26:	4b08      	ldr	r3, [pc, #32]	@ (8001b48 <MX_UART4_Init+0x4c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b2c:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <MX_UART4_Init+0x4c>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001b32:	4805      	ldr	r0, [pc, #20]	@ (8001b48 <MX_UART4_Init+0x4c>)
 8001b34:	f006 fc04 	bl	8008340 <HAL_UART_Init>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001b3e:	f000 f9c5 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000794 	.word	0x20000794
 8001b4c:	40004c00 	.word	0x40004c00

08001b50 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b54:	4b11      	ldr	r3, [pc, #68]	@ (8001b9c <MX_USART1_UART_Init+0x4c>)
 8001b56:	4a12      	ldr	r2, [pc, #72]	@ (8001ba0 <MX_USART1_UART_Init+0x50>)
 8001b58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001b5a:	4b10      	ldr	r3, [pc, #64]	@ (8001b9c <MX_USART1_UART_Init+0x4c>)
 8001b5c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001b60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b62:	4b0e      	ldr	r3, [pc, #56]	@ (8001b9c <MX_USART1_UART_Init+0x4c>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b68:	4b0c      	ldr	r3, [pc, #48]	@ (8001b9c <MX_USART1_UART_Init+0x4c>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b9c <MX_USART1_UART_Init+0x4c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b74:	4b09      	ldr	r3, [pc, #36]	@ (8001b9c <MX_USART1_UART_Init+0x4c>)
 8001b76:	220c      	movs	r2, #12
 8001b78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b7a:	4b08      	ldr	r3, [pc, #32]	@ (8001b9c <MX_USART1_UART_Init+0x4c>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b80:	4b06      	ldr	r3, [pc, #24]	@ (8001b9c <MX_USART1_UART_Init+0x4c>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b86:	4805      	ldr	r0, [pc, #20]	@ (8001b9c <MX_USART1_UART_Init+0x4c>)
 8001b88:	f006 fbda 	bl	8008340 <HAL_UART_Init>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b92:	f000 f99b 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	200007dc 	.word	0x200007dc
 8001ba0:	40011000 	.word	0x40011000

08001ba4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ba8:	4b11      	ldr	r3, [pc, #68]	@ (8001bf0 <MX_USART2_UART_Init+0x4c>)
 8001baa:	4a12      	ldr	r2, [pc, #72]	@ (8001bf4 <MX_USART2_UART_Init+0x50>)
 8001bac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bae:	4b10      	ldr	r3, [pc, #64]	@ (8001bf0 <MX_USART2_UART_Init+0x4c>)
 8001bb0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf0 <MX_USART2_UART_Init+0x4c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf0 <MX_USART2_UART_Init+0x4c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf0 <MX_USART2_UART_Init+0x4c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bc8:	4b09      	ldr	r3, [pc, #36]	@ (8001bf0 <MX_USART2_UART_Init+0x4c>)
 8001bca:	220c      	movs	r2, #12
 8001bcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bce:	4b08      	ldr	r3, [pc, #32]	@ (8001bf0 <MX_USART2_UART_Init+0x4c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bd4:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <MX_USART2_UART_Init+0x4c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bda:	4805      	ldr	r0, [pc, #20]	@ (8001bf0 <MX_USART2_UART_Init+0x4c>)
 8001bdc:	f006 fbb0 	bl	8008340 <HAL_UART_Init>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001be6:	f000 f971 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000824 	.word	0x20000824
 8001bf4:	40004400 	.word	0x40004400

08001bf8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001bfc:	4b11      	ldr	r3, [pc, #68]	@ (8001c44 <MX_USART3_UART_Init+0x4c>)
 8001bfe:	4a12      	ldr	r2, [pc, #72]	@ (8001c48 <MX_USART3_UART_Init+0x50>)
 8001c00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c02:	4b10      	ldr	r3, [pc, #64]	@ (8001c44 <MX_USART3_UART_Init+0x4c>)
 8001c04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c44 <MX_USART3_UART_Init+0x4c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c10:	4b0c      	ldr	r3, [pc, #48]	@ (8001c44 <MX_USART3_UART_Init+0x4c>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c16:	4b0b      	ldr	r3, [pc, #44]	@ (8001c44 <MX_USART3_UART_Init+0x4c>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c1c:	4b09      	ldr	r3, [pc, #36]	@ (8001c44 <MX_USART3_UART_Init+0x4c>)
 8001c1e:	220c      	movs	r2, #12
 8001c20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c22:	4b08      	ldr	r3, [pc, #32]	@ (8001c44 <MX_USART3_UART_Init+0x4c>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c28:	4b06      	ldr	r3, [pc, #24]	@ (8001c44 <MX_USART3_UART_Init+0x4c>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c2e:	4805      	ldr	r0, [pc, #20]	@ (8001c44 <MX_USART3_UART_Init+0x4c>)
 8001c30:	f006 fb86 	bl	8008340 <HAL_UART_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001c3a:	f000 f947 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	2000086c 	.word	0x2000086c
 8001c48:	40004800 	.word	0x40004800

08001c4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	607b      	str	r3, [r7, #4]
 8001c56:	4b0c      	ldr	r3, [pc, #48]	@ (8001c88 <MX_DMA_Init+0x3c>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5a:	4a0b      	ldr	r2, [pc, #44]	@ (8001c88 <MX_DMA_Init+0x3c>)
 8001c5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c62:	4b09      	ldr	r3, [pc, #36]	@ (8001c88 <MX_DMA_Init+0x3c>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c6a:	607b      	str	r3, [r7, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2100      	movs	r1, #0
 8001c72:	2010      	movs	r0, #16
 8001c74:	f002 ffd3 	bl	8004c1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001c78:	2010      	movs	r0, #16
 8001c7a:	f002 ffec 	bl	8004c56 <HAL_NVIC_EnableIRQ>

}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40023800 	.word	0x40023800

08001c8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08c      	sub	sp, #48	@ 0x30
 8001c90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c92:	f107 031c 	add.w	r3, r7, #28
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	605a      	str	r2, [r3, #4]
 8001c9c:	609a      	str	r2, [r3, #8]
 8001c9e:	60da      	str	r2, [r3, #12]
 8001ca0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61bb      	str	r3, [r7, #24]
 8001ca6:	4b83      	ldr	r3, [pc, #524]	@ (8001eb4 <MX_GPIO_Init+0x228>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001caa:	4a82      	ldr	r2, [pc, #520]	@ (8001eb4 <MX_GPIO_Init+0x228>)
 8001cac:	f043 0310 	orr.w	r3, r3, #16
 8001cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cb2:	4b80      	ldr	r3, [pc, #512]	@ (8001eb4 <MX_GPIO_Init+0x228>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb6:	f003 0310 	and.w	r3, r3, #16
 8001cba:	61bb      	str	r3, [r7, #24]
 8001cbc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	4b7c      	ldr	r3, [pc, #496]	@ (8001eb4 <MX_GPIO_Init+0x228>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc6:	4a7b      	ldr	r2, [pc, #492]	@ (8001eb4 <MX_GPIO_Init+0x228>)
 8001cc8:	f043 0304 	orr.w	r3, r3, #4
 8001ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cce:	4b79      	ldr	r3, [pc, #484]	@ (8001eb4 <MX_GPIO_Init+0x228>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd2:	f003 0304 	and.w	r3, r3, #4
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	4b75      	ldr	r3, [pc, #468]	@ (8001eb4 <MX_GPIO_Init+0x228>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce2:	4a74      	ldr	r2, [pc, #464]	@ (8001eb4 <MX_GPIO_Init+0x228>)
 8001ce4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cea:	4b72      	ldr	r3, [pc, #456]	@ (8001eb4 <MX_GPIO_Init+0x228>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	4b6e      	ldr	r3, [pc, #440]	@ (8001eb4 <MX_GPIO_Init+0x228>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfe:	4a6d      	ldr	r2, [pc, #436]	@ (8001eb4 <MX_GPIO_Init+0x228>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d06:	4b6b      	ldr	r3, [pc, #428]	@ (8001eb4 <MX_GPIO_Init+0x228>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	60bb      	str	r3, [r7, #8]
 8001d16:	4b67      	ldr	r3, [pc, #412]	@ (8001eb4 <MX_GPIO_Init+0x228>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1a:	4a66      	ldr	r2, [pc, #408]	@ (8001eb4 <MX_GPIO_Init+0x228>)
 8001d1c:	f043 0302 	orr.w	r3, r3, #2
 8001d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d22:	4b64      	ldr	r3, [pc, #400]	@ (8001eb4 <MX_GPIO_Init+0x228>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	60bb      	str	r3, [r7, #8]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	607b      	str	r3, [r7, #4]
 8001d32:	4b60      	ldr	r3, [pc, #384]	@ (8001eb4 <MX_GPIO_Init+0x228>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d36:	4a5f      	ldr	r2, [pc, #380]	@ (8001eb4 <MX_GPIO_Init+0x228>)
 8001d38:	f043 0308 	orr.w	r3, r3, #8
 8001d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d3e:	4b5d      	ldr	r3, [pc, #372]	@ (8001eb4 <MX_GPIO_Init+0x228>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	607b      	str	r3, [r7, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIM_RST_GPIO_Port, SIM_RST_Pin, GPIO_PIN_RESET);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2120      	movs	r1, #32
 8001d4e:	485a      	ldr	r0, [pc, #360]	@ (8001eb8 <MX_GPIO_Init+0x22c>)
 8001d50:	f003 fd52 	bl	80057f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001d54:	2200      	movs	r2, #0
 8001d56:	2102      	movs	r1, #2
 8001d58:	4858      	ldr	r0, [pc, #352]	@ (8001ebc <MX_GPIO_Init+0x230>)
 8001d5a:	f003 fd4d 	bl	80057f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIM_PWR_GPIO_Port, SIM_PWR_Pin, GPIO_PIN_RESET);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d64:	4856      	ldr	r0, [pc, #344]	@ (8001ec0 <MX_GPIO_Init+0x234>)
 8001d66:	f003 fd47 	bl	80057f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_SENSOR_Pin|LED_DRIVER_Pin|LED_SERVER_Pin, GPIO_PIN_RESET);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2170      	movs	r1, #112	@ 0x70
 8001d6e:	4855      	ldr	r0, [pc, #340]	@ (8001ec4 <MX_GPIO_Init+0x238>)
 8001d70:	f003 fd42 	bl	80057f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001d74:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d78:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d82:	f107 031c 	add.w	r3, r7, #28
 8001d86:	4619      	mov	r1, r3
 8001d88:	484f      	ldr	r0, [pc, #316]	@ (8001ec8 <MX_GPIO_Init+0x23c>)
 8001d8a:	f003 fb81 	bl	8005490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC3 PC4 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8001d8e:	f64f 73db 	movw	r3, #65499	@ 0xffdb
 8001d92:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d94:	2303      	movs	r3, #3
 8001d96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d9c:	f107 031c 	add.w	r3, r7, #28
 8001da0:	4619      	mov	r1, r3
 8001da2:	4845      	ldr	r0, [pc, #276]	@ (8001eb8 <MX_GPIO_Init+0x22c>)
 8001da4:	f003 fb74 	bl	8005490 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_Pin */
  GPIO_InitStruct.Pin = ACC_Pin;
 8001da8:	2304      	movs	r3, #4
 8001daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001dac:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001db0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ACC_GPIO_Port, &GPIO_InitStruct);
 8001db6:	f107 031c 	add.w	r3, r7, #28
 8001dba:	4619      	mov	r1, r3
 8001dbc:	483e      	ldr	r0, [pc, #248]	@ (8001eb8 <MX_GPIO_Init+0x22c>)
 8001dbe:	f003 fb67 	bl	8005490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8001dc2:	f641 13f0 	movw	r3, #6640	@ 0x19f0
 8001dc6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd0:	f107 031c 	add.w	r3, r7, #28
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	483a      	ldr	r0, [pc, #232]	@ (8001ec0 <MX_GPIO_Init+0x234>)
 8001dd8:	f003 fb5a 	bl	8005490 <HAL_GPIO_Init>

  /*Configure GPIO pin : SIM_RST_Pin */
  GPIO_InitStruct.Pin = SIM_RST_Pin;
 8001ddc:	2320      	movs	r3, #32
 8001dde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de0:	2301      	movs	r3, #1
 8001de2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de8:	2300      	movs	r3, #0
 8001dea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SIM_RST_GPIO_Port, &GPIO_InitStruct);
 8001dec:	f107 031c 	add.w	r3, r7, #28
 8001df0:	4619      	mov	r1, r3
 8001df2:	4831      	ldr	r0, [pc, #196]	@ (8001eb8 <MX_GPIO_Init+0x22c>)
 8001df4:	f003 fb4c 	bl	8005490 <HAL_GPIO_Init>

  /*Configure GPIO pin : SIM_STATUS_Pin */
  GPIO_InitStruct.Pin = SIM_STATUS_Pin;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SIM_STATUS_GPIO_Port, &GPIO_InitStruct);
 8001e04:	f107 031c 	add.w	r3, r7, #28
 8001e08:	4619      	mov	r1, r3
 8001e0a:	482c      	ldr	r0, [pc, #176]	@ (8001ebc <MX_GPIO_Init+0x230>)
 8001e0c:	f003 fb40 	bl	8005490 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8001e10:	2302      	movs	r3, #2
 8001e12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e14:	2301      	movs	r3, #1
 8001e16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001e20:	f107 031c 	add.w	r3, r7, #28
 8001e24:	4619      	mov	r1, r3
 8001e26:	4825      	ldr	r0, [pc, #148]	@ (8001ebc <MX_GPIO_Init+0x230>)
 8001e28:	f003 fb32 	bl	8005490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001e2c:	f24f 333c 	movw	r3, #62268	@ 0xf33c
 8001e30:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e32:	2303      	movs	r3, #3
 8001e34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e3a:	f107 031c 	add.w	r3, r7, #28
 8001e3e:	4619      	mov	r1, r3
 8001e40:	481e      	ldr	r0, [pc, #120]	@ (8001ebc <MX_GPIO_Init+0x230>)
 8001e42:	f003 fb25 	bl	8005490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001e46:	f64f 738f 	movw	r3, #65423	@ 0xff8f
 8001e4a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e54:	f107 031c 	add.w	r3, r7, #28
 8001e58:	4619      	mov	r1, r3
 8001e5a:	481a      	ldr	r0, [pc, #104]	@ (8001ec4 <MX_GPIO_Init+0x238>)
 8001e5c:	f003 fb18 	bl	8005490 <HAL_GPIO_Init>

  /*Configure GPIO pin : SIM_PWR_Pin */
  GPIO_InitStruct.Pin = SIM_PWR_Pin;
 8001e60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e66:	2301      	movs	r3, #1
 8001e68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SIM_PWR_GPIO_Port, &GPIO_InitStruct);
 8001e72:	f107 031c 	add.w	r3, r7, #28
 8001e76:	4619      	mov	r1, r3
 8001e78:	4811      	ldr	r0, [pc, #68]	@ (8001ec0 <MX_GPIO_Init+0x234>)
 8001e7a:	f003 fb09 	bl	8005490 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_SENSOR_Pin LED_DRIVER_Pin LED_SERVER_Pin */
  GPIO_InitStruct.Pin = LED_SENSOR_Pin|LED_DRIVER_Pin|LED_SERVER_Pin;
 8001e7e:	2370      	movs	r3, #112	@ 0x70
 8001e80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e82:	2301      	movs	r3, #1
 8001e84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e8e:	f107 031c 	add.w	r3, r7, #28
 8001e92:	4619      	mov	r1, r3
 8001e94:	480b      	ldr	r0, [pc, #44]	@ (8001ec4 <MX_GPIO_Init+0x238>)
 8001e96:	f003 fafb 	bl	8005490 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 6, 0);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2106      	movs	r1, #6
 8001e9e:	2008      	movs	r0, #8
 8001ea0:	f002 febd 	bl	8004c1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001ea4:	2008      	movs	r0, #8
 8001ea6:	f002 fed6 	bl	8004c56 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001eaa:	bf00      	nop
 8001eac:	3730      	adds	r7, #48	@ 0x30
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	40020800 	.word	0x40020800
 8001ebc:	40020400 	.word	0x40020400
 8001ec0:	40020000 	.word	0x40020000
 8001ec4:	40020c00 	.word	0x40020c00
 8001ec8:	40021000 	.word	0x40021000

08001ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed0:	b672      	cpsid	i
}
 8001ed2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ed4:	bf00      	nop
 8001ed6:	e7fd      	b.n	8001ed4 <Error_Handler+0x8>

08001ed8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	607b      	str	r3, [r7, #4]
 8001ee2:	4b10      	ldr	r3, [pc, #64]	@ (8001f24 <HAL_MspInit+0x4c>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee6:	4a0f      	ldr	r2, [pc, #60]	@ (8001f24 <HAL_MspInit+0x4c>)
 8001ee8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eee:	4b0d      	ldr	r3, [pc, #52]	@ (8001f24 <HAL_MspInit+0x4c>)
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ef6:	607b      	str	r3, [r7, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	603b      	str	r3, [r7, #0]
 8001efe:	4b09      	ldr	r3, [pc, #36]	@ (8001f24 <HAL_MspInit+0x4c>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	4a08      	ldr	r2, [pc, #32]	@ (8001f24 <HAL_MspInit+0x4c>)
 8001f04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f0a:	4b06      	ldr	r3, [pc, #24]	@ (8001f24 <HAL_MspInit+0x4c>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f12:	603b      	str	r3, [r7, #0]
 8001f14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	40023800 	.word	0x40023800

08001f28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08a      	sub	sp, #40	@ 0x28
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f30:	f107 0314 	add.w	r3, r7, #20
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a19      	ldr	r2, [pc, #100]	@ (8001fac <HAL_I2C_MspInit+0x84>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d12b      	bne.n	8001fa2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	4b18      	ldr	r3, [pc, #96]	@ (8001fb0 <HAL_I2C_MspInit+0x88>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f52:	4a17      	ldr	r2, [pc, #92]	@ (8001fb0 <HAL_I2C_MspInit+0x88>)
 8001f54:	f043 0302 	orr.w	r3, r3, #2
 8001f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f5a:	4b15      	ldr	r3, [pc, #84]	@ (8001fb0 <HAL_I2C_MspInit+0x88>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f66:	23c0      	movs	r3, #192	@ 0xc0
 8001f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f6a:	2312      	movs	r3, #18
 8001f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f72:	2303      	movs	r3, #3
 8001f74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f76:	2304      	movs	r3, #4
 8001f78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f7a:	f107 0314 	add.w	r3, r7, #20
 8001f7e:	4619      	mov	r1, r3
 8001f80:	480c      	ldr	r0, [pc, #48]	@ (8001fb4 <HAL_I2C_MspInit+0x8c>)
 8001f82:	f003 fa85 	bl	8005490 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	4b09      	ldr	r3, [pc, #36]	@ (8001fb0 <HAL_I2C_MspInit+0x88>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8e:	4a08      	ldr	r2, [pc, #32]	@ (8001fb0 <HAL_I2C_MspInit+0x88>)
 8001f90:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f96:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <HAL_I2C_MspInit+0x88>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fa2:	bf00      	nop
 8001fa4:	3728      	adds	r7, #40	@ 0x28
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40005400 	.word	0x40005400
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40020400 	.word	0x40020400

08001fb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fc8:	d116      	bne.n	8001ff8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	4b1a      	ldr	r3, [pc, #104]	@ (8002038 <HAL_TIM_Base_MspInit+0x80>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd2:	4a19      	ldr	r2, [pc, #100]	@ (8002038 <HAL_TIM_Base_MspInit+0x80>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fda:	4b17      	ldr	r3, [pc, #92]	@ (8002038 <HAL_TIM_Base_MspInit+0x80>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2100      	movs	r1, #0
 8001fea:	201c      	movs	r0, #28
 8001fec:	f002 fe17 	bl	8004c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ff0:	201c      	movs	r0, #28
 8001ff2:	f002 fe30 	bl	8004c56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ff6:	e01a      	b.n	800202e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a0f      	ldr	r2, [pc, #60]	@ (800203c <HAL_TIM_Base_MspInit+0x84>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d115      	bne.n	800202e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	60bb      	str	r3, [r7, #8]
 8002006:	4b0c      	ldr	r3, [pc, #48]	@ (8002038 <HAL_TIM_Base_MspInit+0x80>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200a:	4a0b      	ldr	r2, [pc, #44]	@ (8002038 <HAL_TIM_Base_MspInit+0x80>)
 800200c:	f043 0302 	orr.w	r3, r3, #2
 8002010:	6413      	str	r3, [r2, #64]	@ 0x40
 8002012:	4b09      	ldr	r3, [pc, #36]	@ (8002038 <HAL_TIM_Base_MspInit+0x80>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	60bb      	str	r3, [r7, #8]
 800201c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800201e:	2200      	movs	r2, #0
 8002020:	2100      	movs	r1, #0
 8002022:	201d      	movs	r0, #29
 8002024:	f002 fdfb 	bl	8004c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002028:	201d      	movs	r0, #29
 800202a:	f002 fe14 	bl	8004c56 <HAL_NVIC_EnableIRQ>
}
 800202e:	bf00      	nop
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40023800 	.word	0x40023800
 800203c:	40000400 	.word	0x40000400

08002040 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b090      	sub	sp, #64	@ 0x40
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002048:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a88      	ldr	r2, [pc, #544]	@ (8002280 <HAL_UART_MspInit+0x240>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d134      	bne.n	80020cc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002066:	4b87      	ldr	r3, [pc, #540]	@ (8002284 <HAL_UART_MspInit+0x244>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206a:	4a86      	ldr	r2, [pc, #536]	@ (8002284 <HAL_UART_MspInit+0x244>)
 800206c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002070:	6413      	str	r3, [r2, #64]	@ 0x40
 8002072:	4b84      	ldr	r3, [pc, #528]	@ (8002284 <HAL_UART_MspInit+0x244>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002076:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800207a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800207c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	627b      	str	r3, [r7, #36]	@ 0x24
 8002082:	4b80      	ldr	r3, [pc, #512]	@ (8002284 <HAL_UART_MspInit+0x244>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002086:	4a7f      	ldr	r2, [pc, #508]	@ (8002284 <HAL_UART_MspInit+0x244>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	6313      	str	r3, [r2, #48]	@ 0x30
 800208e:	4b7d      	ldr	r3, [pc, #500]	@ (8002284 <HAL_UART_MspInit+0x244>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	627b      	str	r3, [r7, #36]	@ 0x24
 8002098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800209a:	2303      	movs	r3, #3
 800209c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209e:	2302      	movs	r3, #2
 80020a0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a6:	2303      	movs	r3, #3
 80020a8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80020aa:	2308      	movs	r3, #8
 80020ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020b2:	4619      	mov	r1, r3
 80020b4:	4874      	ldr	r0, [pc, #464]	@ (8002288 <HAL_UART_MspInit+0x248>)
 80020b6:	f003 f9eb 	bl	8005490 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80020ba:	2200      	movs	r2, #0
 80020bc:	2100      	movs	r1, #0
 80020be:	2034      	movs	r0, #52	@ 0x34
 80020c0:	f002 fdad 	bl	8004c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80020c4:	2034      	movs	r0, #52	@ 0x34
 80020c6:	f002 fdc6 	bl	8004c56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80020ca:	e0d4      	b.n	8002276 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a6e      	ldr	r2, [pc, #440]	@ (800228c <HAL_UART_MspInit+0x24c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d135      	bne.n	8002142 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART1_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	623b      	str	r3, [r7, #32]
 80020da:	4b6a      	ldr	r3, [pc, #424]	@ (8002284 <HAL_UART_MspInit+0x244>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020de:	4a69      	ldr	r2, [pc, #420]	@ (8002284 <HAL_UART_MspInit+0x244>)
 80020e0:	f043 0310 	orr.w	r3, r3, #16
 80020e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80020e6:	4b67      	ldr	r3, [pc, #412]	@ (8002284 <HAL_UART_MspInit+0x244>)
 80020e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ea:	f003 0310 	and.w	r3, r3, #16
 80020ee:	623b      	str	r3, [r7, #32]
 80020f0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	61fb      	str	r3, [r7, #28]
 80020f6:	4b63      	ldr	r3, [pc, #396]	@ (8002284 <HAL_UART_MspInit+0x244>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fa:	4a62      	ldr	r2, [pc, #392]	@ (8002284 <HAL_UART_MspInit+0x244>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	6313      	str	r3, [r2, #48]	@ 0x30
 8002102:	4b60      	ldr	r3, [pc, #384]	@ (8002284 <HAL_UART_MspInit+0x244>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	61fb      	str	r3, [r7, #28]
 800210c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800210e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002112:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002114:	2302      	movs	r3, #2
 8002116:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800211c:	2303      	movs	r3, #3
 800211e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002120:	2307      	movs	r3, #7
 8002122:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002124:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002128:	4619      	mov	r1, r3
 800212a:	4857      	ldr	r0, [pc, #348]	@ (8002288 <HAL_UART_MspInit+0x248>)
 800212c:	f003 f9b0 	bl	8005490 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002130:	2200      	movs	r2, #0
 8002132:	2100      	movs	r1, #0
 8002134:	2025      	movs	r0, #37	@ 0x25
 8002136:	f002 fd72 	bl	8004c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800213a:	2025      	movs	r0, #37	@ 0x25
 800213c:	f002 fd8b 	bl	8004c56 <HAL_NVIC_EnableIRQ>
}
 8002140:	e099      	b.n	8002276 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART2)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a52      	ldr	r2, [pc, #328]	@ (8002290 <HAL_UART_MspInit+0x250>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d15a      	bne.n	8002202 <HAL_UART_MspInit+0x1c2>
    __HAL_RCC_USART2_CLK_ENABLE();
 800214c:	2300      	movs	r3, #0
 800214e:	61bb      	str	r3, [r7, #24]
 8002150:	4b4c      	ldr	r3, [pc, #304]	@ (8002284 <HAL_UART_MspInit+0x244>)
 8002152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002154:	4a4b      	ldr	r2, [pc, #300]	@ (8002284 <HAL_UART_MspInit+0x244>)
 8002156:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800215a:	6413      	str	r3, [r2, #64]	@ 0x40
 800215c:	4b49      	ldr	r3, [pc, #292]	@ (8002284 <HAL_UART_MspInit+0x244>)
 800215e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002160:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002164:	61bb      	str	r3, [r7, #24]
 8002166:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	4b45      	ldr	r3, [pc, #276]	@ (8002284 <HAL_UART_MspInit+0x244>)
 800216e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002170:	4a44      	ldr	r2, [pc, #272]	@ (8002284 <HAL_UART_MspInit+0x244>)
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	6313      	str	r3, [r2, #48]	@ 0x30
 8002178:	4b42      	ldr	r3, [pc, #264]	@ (8002284 <HAL_UART_MspInit+0x244>)
 800217a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	617b      	str	r3, [r7, #20]
 8002182:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002184:	230c      	movs	r3, #12
 8002186:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002188:	2302      	movs	r3, #2
 800218a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002190:	2303      	movs	r3, #3
 8002192:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002194:	2307      	movs	r3, #7
 8002196:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002198:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800219c:	4619      	mov	r1, r3
 800219e:	483a      	ldr	r0, [pc, #232]	@ (8002288 <HAL_UART_MspInit+0x248>)
 80021a0:	f003 f976 	bl	8005490 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80021a4:	4b3b      	ldr	r3, [pc, #236]	@ (8002294 <HAL_UART_MspInit+0x254>)
 80021a6:	4a3c      	ldr	r2, [pc, #240]	@ (8002298 <HAL_UART_MspInit+0x258>)
 80021a8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80021aa:	4b3a      	ldr	r3, [pc, #232]	@ (8002294 <HAL_UART_MspInit+0x254>)
 80021ac:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80021b0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021b2:	4b38      	ldr	r3, [pc, #224]	@ (8002294 <HAL_UART_MspInit+0x254>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021b8:	4b36      	ldr	r3, [pc, #216]	@ (8002294 <HAL_UART_MspInit+0x254>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021be:	4b35      	ldr	r3, [pc, #212]	@ (8002294 <HAL_UART_MspInit+0x254>)
 80021c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021c4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021c6:	4b33      	ldr	r3, [pc, #204]	@ (8002294 <HAL_UART_MspInit+0x254>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021cc:	4b31      	ldr	r3, [pc, #196]	@ (8002294 <HAL_UART_MspInit+0x254>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80021d2:	4b30      	ldr	r3, [pc, #192]	@ (8002294 <HAL_UART_MspInit+0x254>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021d8:	4b2e      	ldr	r3, [pc, #184]	@ (8002294 <HAL_UART_MspInit+0x254>)
 80021da:	2200      	movs	r2, #0
 80021dc:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021de:	4b2d      	ldr	r3, [pc, #180]	@ (8002294 <HAL_UART_MspInit+0x254>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80021e4:	482b      	ldr	r0, [pc, #172]	@ (8002294 <HAL_UART_MspInit+0x254>)
 80021e6:	f002 fd51 	bl	8004c8c <HAL_DMA_Init>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <HAL_UART_MspInit+0x1b4>
      Error_Handler();
 80021f0:	f7ff fe6c 	bl	8001ecc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a27      	ldr	r2, [pc, #156]	@ (8002294 <HAL_UART_MspInit+0x254>)
 80021f8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80021fa:	4a26      	ldr	r2, [pc, #152]	@ (8002294 <HAL_UART_MspInit+0x254>)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002200:	e039      	b.n	8002276 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART3)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a25      	ldr	r2, [pc, #148]	@ (800229c <HAL_UART_MspInit+0x25c>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d134      	bne.n	8002276 <HAL_UART_MspInit+0x236>
    __HAL_RCC_USART3_CLK_ENABLE();
 800220c:	2300      	movs	r3, #0
 800220e:	613b      	str	r3, [r7, #16]
 8002210:	4b1c      	ldr	r3, [pc, #112]	@ (8002284 <HAL_UART_MspInit+0x244>)
 8002212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002214:	4a1b      	ldr	r2, [pc, #108]	@ (8002284 <HAL_UART_MspInit+0x244>)
 8002216:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800221a:	6413      	str	r3, [r2, #64]	@ 0x40
 800221c:	4b19      	ldr	r3, [pc, #100]	@ (8002284 <HAL_UART_MspInit+0x244>)
 800221e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002220:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002224:	613b      	str	r3, [r7, #16]
 8002226:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002228:	2300      	movs	r3, #0
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	4b15      	ldr	r3, [pc, #84]	@ (8002284 <HAL_UART_MspInit+0x244>)
 800222e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002230:	4a14      	ldr	r2, [pc, #80]	@ (8002284 <HAL_UART_MspInit+0x244>)
 8002232:	f043 0302 	orr.w	r3, r3, #2
 8002236:	6313      	str	r3, [r2, #48]	@ 0x30
 8002238:	4b12      	ldr	r3, [pc, #72]	@ (8002284 <HAL_UART_MspInit+0x244>)
 800223a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002244:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002248:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224a:	2302      	movs	r3, #2
 800224c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224e:	2300      	movs	r3, #0
 8002250:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002252:	2303      	movs	r3, #3
 8002254:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002256:	2307      	movs	r3, #7
 8002258:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800225a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800225e:	4619      	mov	r1, r3
 8002260:	480f      	ldr	r0, [pc, #60]	@ (80022a0 <HAL_UART_MspInit+0x260>)
 8002262:	f003 f915 	bl	8005490 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 8002266:	2200      	movs	r2, #0
 8002268:	2102      	movs	r1, #2
 800226a:	2027      	movs	r0, #39	@ 0x27
 800226c:	f002 fcd7 	bl	8004c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002270:	2027      	movs	r0, #39	@ 0x27
 8002272:	f002 fcf0 	bl	8004c56 <HAL_NVIC_EnableIRQ>
}
 8002276:	bf00      	nop
 8002278:	3740      	adds	r7, #64	@ 0x40
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40004c00 	.word	0x40004c00
 8002284:	40023800 	.word	0x40023800
 8002288:	40020000 	.word	0x40020000
 800228c:	40011000 	.word	0x40011000
 8002290:	40004400 	.word	0x40004400
 8002294:	200008b4 	.word	0x200008b4
 8002298:	40026088 	.word	0x40026088
 800229c:	40004800 	.word	0x40004800
 80022a0:	40020400 	.word	0x40020400

080022a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022a8:	bf00      	nop
 80022aa:	e7fd      	b.n	80022a8 <NMI_Handler+0x4>

080022ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022b0:	bf00      	nop
 80022b2:	e7fd      	b.n	80022b0 <HardFault_Handler+0x4>

080022b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022b8:	bf00      	nop
 80022ba:	e7fd      	b.n	80022b8 <MemManage_Handler+0x4>

080022bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022c0:	bf00      	nop
 80022c2:	e7fd      	b.n	80022c0 <BusFault_Handler+0x4>

080022c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022c8:	bf00      	nop
 80022ca:	e7fd      	b.n	80022c8 <UsageFault_Handler+0x4>

080022cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022da:	b480      	push	{r7}
 80022dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022ec:	bf00      	nop
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022fa:	f002 fb71 	bl	80049e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}

08002302 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_Pin);
 8002306:	2004      	movs	r0, #4
 8002308:	f003 fa90 	bl	800582c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800230c:	bf00      	nop
 800230e:	bd80      	pop	{r7, pc}

08002310 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002314:	4802      	ldr	r0, [pc, #8]	@ (8002320 <DMA1_Stream5_IRQHandler+0x10>)
 8002316:	f002 fe51 	bl	8004fbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	200008b4 	.word	0x200008b4

08002324 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002328:	4802      	ldr	r0, [pc, #8]	@ (8002334 <TIM2_IRQHandler+0x10>)
 800232a:	f005 fc53 	bl	8007bd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000704 	.word	0x20000704

08002338 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800233c:	4802      	ldr	r0, [pc, #8]	@ (8002348 <TIM3_IRQHandler+0x10>)
 800233e:	f005 fc49 	bl	8007bd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	2000074c 	.word	0x2000074c

0800234c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002350:	4802      	ldr	r0, [pc, #8]	@ (800235c <USART1_IRQHandler+0x10>)
 8002352:	f006 f9d1 	bl	80086f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	200007dc 	.word	0x200007dc

08002360 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002364:	4802      	ldr	r0, [pc, #8]	@ (8002370 <USART3_IRQHandler+0x10>)
 8002366:	f006 f9c7 	bl	80086f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	2000086c 	.word	0x2000086c

08002374 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002378:	4802      	ldr	r0, [pc, #8]	@ (8002384 <UART4_IRQHandler+0x10>)
 800237a:	f006 f9bd 	bl	80086f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20000794 	.word	0x20000794

08002388 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  return 1;
 800238c:	2301      	movs	r3, #1
}
 800238e:	4618      	mov	r0, r3
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <_kill>:

int _kill(int pid, int sig)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023a2:	f008 fae1 	bl	800a968 <__errno>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2216      	movs	r2, #22
 80023aa:	601a      	str	r2, [r3, #0]
  return -1;
 80023ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <_exit>:

void _exit (int status)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023c0:	f04f 31ff 	mov.w	r1, #4294967295
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7ff ffe7 	bl	8002398 <_kill>
  while (1) {}    /* Make sure we hang here */
 80023ca:	bf00      	nop
 80023cc:	e7fd      	b.n	80023ca <_exit+0x12>

080023ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b086      	sub	sp, #24
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	60f8      	str	r0, [r7, #12]
 80023d6:	60b9      	str	r1, [r7, #8]
 80023d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023da:	2300      	movs	r3, #0
 80023dc:	617b      	str	r3, [r7, #20]
 80023de:	e00a      	b.n	80023f6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023e0:	f3af 8000 	nop.w
 80023e4:	4601      	mov	r1, r0
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	1c5a      	adds	r2, r3, #1
 80023ea:	60ba      	str	r2, [r7, #8]
 80023ec:	b2ca      	uxtb	r2, r1
 80023ee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	3301      	adds	r3, #1
 80023f4:	617b      	str	r3, [r7, #20]
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	dbf0      	blt.n	80023e0 <_read+0x12>
  }

  return len;
 80023fe:	687b      	ldr	r3, [r7, #4]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	e009      	b.n	800242e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	60ba      	str	r2, [r7, #8]
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	3301      	adds	r3, #1
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	429a      	cmp	r2, r3
 8002434:	dbf1      	blt.n	800241a <_write+0x12>
  }
  return len;
 8002436:	687b      	ldr	r3, [r7, #4]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <_close>:

int _close(int file)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002448:	f04f 33ff 	mov.w	r3, #4294967295
}
 800244c:	4618      	mov	r0, r3
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002468:	605a      	str	r2, [r3, #4]
  return 0;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <_isatty>:

int _isatty(int file)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002480:	2301      	movs	r3, #1
}
 8002482:	4618      	mov	r0, r3
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800248e:	b480      	push	{r7}
 8002490:	b085      	sub	sp, #20
 8002492:	af00      	add	r7, sp, #0
 8002494:	60f8      	str	r0, [r7, #12]
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3714      	adds	r7, #20
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024b0:	4a14      	ldr	r2, [pc, #80]	@ (8002504 <_sbrk+0x5c>)
 80024b2:	4b15      	ldr	r3, [pc, #84]	@ (8002508 <_sbrk+0x60>)
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024bc:	4b13      	ldr	r3, [pc, #76]	@ (800250c <_sbrk+0x64>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d102      	bne.n	80024ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024c4:	4b11      	ldr	r3, [pc, #68]	@ (800250c <_sbrk+0x64>)
 80024c6:	4a12      	ldr	r2, [pc, #72]	@ (8002510 <_sbrk+0x68>)
 80024c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ca:	4b10      	ldr	r3, [pc, #64]	@ (800250c <_sbrk+0x64>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4413      	add	r3, r2
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d207      	bcs.n	80024e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024d8:	f008 fa46 	bl	800a968 <__errno>
 80024dc:	4603      	mov	r3, r0
 80024de:	220c      	movs	r2, #12
 80024e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024e2:	f04f 33ff 	mov.w	r3, #4294967295
 80024e6:	e009      	b.n	80024fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024e8:	4b08      	ldr	r3, [pc, #32]	@ (800250c <_sbrk+0x64>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ee:	4b07      	ldr	r3, [pc, #28]	@ (800250c <_sbrk+0x64>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4413      	add	r3, r2
 80024f6:	4a05      	ldr	r2, [pc, #20]	@ (800250c <_sbrk+0x64>)
 80024f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024fa:	68fb      	ldr	r3, [r7, #12]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	20020000 	.word	0x20020000
 8002508:	00000400 	.word	0x00000400
 800250c:	20000d24 	.word	0x20000d24
 8002510:	20000f50 	.word	0x20000f50

08002514 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002518:	4b06      	ldr	r3, [pc, #24]	@ (8002534 <SystemInit+0x20>)
 800251a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800251e:	4a05      	ldr	r2, [pc, #20]	@ (8002534 <SystemInit+0x20>)
 8002520:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002524:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	e000ed00 	.word	0xe000ed00

08002538 <SetTimerCount>:
 */
#include "timer_flag.h"

#define TimerCountPeriod	50

void SetTimerCount(flagType *Flag){
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
// Timer 50ms
#ifdef FLAG_50ms
	Flag->t50ms_count += TimerCountPeriod;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	885b      	ldrh	r3, [r3, #2]
 8002544:	3332      	adds	r3, #50	@ 0x32
 8002546:	b29a      	uxth	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	805a      	strh	r2, [r3, #2]
#endif

// Timer 100ms
#ifdef FLAG_100ms
	Flag->t100ms_count += TimerCountPeriod;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	88db      	ldrh	r3, [r3, #6]
 8002550:	3332      	adds	r3, #50	@ 0x32
 8002552:	b29a      	uxth	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	80da      	strh	r2, [r3, #6]
#endif

// Timer 250ms
#ifdef FLAG_250ms
	Flag->t250ms_count += TimerCountPeriod;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	895b      	ldrh	r3, [r3, #10]
 800255c:	3332      	adds	r3, #50	@ 0x32
 800255e:	b29a      	uxth	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	815a      	strh	r2, [r3, #10]
#endif

// Timer 500ms
#ifdef FLAG_500ms
	Flag->t500ms_count += TimerCountPeriod;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	89db      	ldrh	r3, [r3, #14]
 8002568:	3332      	adds	r3, #50	@ 0x32
 800256a:	b29a      	uxth	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	81da      	strh	r2, [r3, #14]
#endif

// Timer 1s
#ifdef FLAG_1s
	Flag->t1s_count += TimerCountPeriod;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	8a5b      	ldrh	r3, [r3, #18]
 8002574:	3332      	adds	r3, #50	@ 0x32
 8002576:	b29a      	uxth	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	825a      	strh	r2, [r3, #18]
#endif

// Timer 1500ms
#ifdef FLAG_1500ms
	Flag->t1500ms_count += TimerCountPeriod;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	8adb      	ldrh	r3, [r3, #22]
 8002580:	3332      	adds	r3, #50	@ 0x32
 8002582:	b29a      	uxth	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	82da      	strh	r2, [r3, #22]
#endif

// Timer 2s
#ifdef FLAG_2s
	Flag->t2s_count += TimerCountPeriod;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	8b5b      	ldrh	r3, [r3, #26]
 800258c:	3332      	adds	r3, #50	@ 0x32
 800258e:	b29a      	uxth	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	835a      	strh	r2, [r3, #26]
#endif

// Timer 3s
#ifdef FLAG_3s
	Flag->t3s_count += TimerCountPeriod;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	8bdb      	ldrh	r3, [r3, #30]
 8002598:	3332      	adds	r3, #50	@ 0x32
 800259a:	b29a      	uxth	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	83da      	strh	r2, [r3, #30]
#endif

// Timer 4s
#ifdef FLAG_4s
	Flag->t4s_count += TimerCountPeriod;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80025a4:	3332      	adds	r3, #50	@ 0x32
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	845a      	strh	r2, [r3, #34]	@ 0x22
#endif

// Timer 5s
#ifdef FLAG_5s
	Flag->t5s_count += TimerCountPeriod;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80025b0:	3332      	adds	r3, #50	@ 0x32
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	84da      	strh	r2, [r3, #38]	@ 0x26
#endif

// Timer 6s
#ifdef FLAG_6s
	Flag->t6s_count += TimerCountPeriod;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025bc:	3332      	adds	r3, #50	@ 0x32
 80025be:	b29a      	uxth	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
#endif

// Timer 10s
#ifdef FLAG_10s
	Flag->t10s_count += TimerCountPeriod;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80025c8:	3332      	adds	r3, #50	@ 0x32
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	85da      	strh	r2, [r3, #46]	@ 0x2e
#endif

// Timer 15s
#ifdef FLAG_15s
	Flag->t15s_count += TimerCountPeriod;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80025d4:	3332      	adds	r3, #50	@ 0x32
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif

// Timer 30s
#ifdef FLAG_30s
	Flag->t30s_count += TimerCountPeriod;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025e0:	3332      	adds	r3, #50	@ 0x32
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	86da      	strh	r2, [r3, #54]	@ 0x36
#endif

// Timer 35s
#ifdef FLAG_35s
	Flag->t35s_count += TimerCountPeriod;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80025ec:	3332      	adds	r3, #50	@ 0x32
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	875a      	strh	r2, [r3, #58]	@ 0x3a
#endif

// Timer 15p
#ifdef FLAG_15p
	Flag->t15p_count += TimerCountPeriod;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f8:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	641a      	str	r2, [r3, #64]	@ 0x40
#endif

}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <Flag_CallBack>:

void Flag_CallBack(flagType *Flag){
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
	SetTimerCount(Flag);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7ff ff8f 	bl	8002538 <SetTimerCount>
// Timer 50ms
#ifdef FLAG_50ms
	if(Flag->t50ms_count == 50){
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	885b      	ldrh	r3, [r3, #2]
 800261e:	2b32      	cmp	r3, #50	@ 0x32
 8002620:	d105      	bne.n	800262e <Flag_CallBack+0x22>
		Flag->t50ms = 1;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	701a      	strb	r2, [r3, #0]
		Flag->t50ms_count = 0;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	805a      	strh	r2, [r3, #2]
	}
#endif

// Timer 100ms
#ifdef FLAG_100ms
	if(Flag->t100ms_count == 100){
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	88db      	ldrh	r3, [r3, #6]
 8002632:	2b64      	cmp	r3, #100	@ 0x64
 8002634:	d105      	bne.n	8002642 <Flag_CallBack+0x36>
		Flag->t100ms = 1;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	711a      	strb	r2, [r3, #4]
		Flag->t100ms_count = 0;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	80da      	strh	r2, [r3, #6]
	}
#endif

// Timer 250ms
#ifdef FLAG_250ms
	if(Flag->t250ms_count == 250){
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	895b      	ldrh	r3, [r3, #10]
 8002646:	2bfa      	cmp	r3, #250	@ 0xfa
 8002648:	d105      	bne.n	8002656 <Flag_CallBack+0x4a>
		Flag->t250ms = 1;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	721a      	strb	r2, [r3, #8]
		Flag->t250ms_count = 0;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	815a      	strh	r2, [r3, #10]
	}
#endif

// Timer 500ms
#ifdef FLAG_500ms
	if(Flag->t500ms_count == 500){
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	89db      	ldrh	r3, [r3, #14]
 800265a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800265e:	d105      	bne.n	800266c <Flag_CallBack+0x60>
		Flag->t500ms = 1;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	731a      	strb	r2, [r3, #12]
		Flag->t500ms_count = 0;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	81da      	strh	r2, [r3, #14]
	}
#endif

// Timer 1s
#ifdef FLAG_1s
	if(Flag->t1s_count == 1000){
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	8a5b      	ldrh	r3, [r3, #18]
 8002670:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002674:	d105      	bne.n	8002682 <Flag_CallBack+0x76>
		Flag->t1s = 1;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	741a      	strb	r2, [r3, #16]
		Flag->t1s_count = 0;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	825a      	strh	r2, [r3, #18]
	}
#endif

// Timer 1500ms
#ifdef FLAG_1500ms
	if(Flag->t1500ms_count == 1500){
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	8adb      	ldrh	r3, [r3, #22]
 8002686:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800268a:	4293      	cmp	r3, r2
 800268c:	d105      	bne.n	800269a <Flag_CallBack+0x8e>
		Flag->t1500ms = 1;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	751a      	strb	r2, [r3, #20]
		Flag->t1500ms_count = 0;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	82da      	strh	r2, [r3, #22]
	}
#endif

// Timer 2s
#ifdef FLAG_2s
	if(Flag->t2s_count == 2000){
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	8b5b      	ldrh	r3, [r3, #26]
 800269e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80026a2:	d105      	bne.n	80026b0 <Flag_CallBack+0xa4>
		Flag->t2s = 1;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	761a      	strb	r2, [r3, #24]
		Flag->t2s_count = 0;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	835a      	strh	r2, [r3, #26]
	}
#endif

// Timer 3s
#ifdef FLAG_3s
	if(Flag->t3s_count == 3000){
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	8bdb      	ldrh	r3, [r3, #30]
 80026b4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d105      	bne.n	80026c8 <Flag_CallBack+0xbc>
		Flag->t3s = 1;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	771a      	strb	r2, [r3, #28]
		Flag->t3s_count = 0;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	83da      	strh	r2, [r3, #30]
	}
#endif

// Timer 4s
#ifdef FLAG_4s
	if(Flag->t4s_count == 4000){
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80026cc:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80026d0:	d106      	bne.n	80026e0 <Flag_CallBack+0xd4>
		Flag->t4s = 1;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 2020 	strb.w	r2, [r3, #32]
		Flag->t4s_count = 0;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	845a      	strh	r2, [r3, #34]	@ 0x22
	}
#endif

// Timer 5s
#ifdef FLAG_5s
	if(Flag->t5s_count == 5000){
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80026e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d106      	bne.n	80026fa <Flag_CallBack+0xee>
		Flag->t5s = 1;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		Flag->t5s_count = 0;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	84da      	strh	r2, [r3, #38]	@ 0x26
	}
#endif

// Timer 6s
#ifdef FLAG_6s
	if(Flag->t6s_count == 6000){
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026fe:	f241 7270 	movw	r2, #6000	@ 0x1770
 8002702:	4293      	cmp	r3, r2
 8002704:	d106      	bne.n	8002714 <Flag_CallBack+0x108>
		Flag->t6s = 1;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		Flag->t6s_count = 0;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	855a      	strh	r2, [r3, #42]	@ 0x2a
	}
#endif

// Timer 10s
#ifdef FLAG_10s
	if(Flag->t10s_count == 10000){
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002718:	f242 7210 	movw	r2, #10000	@ 0x2710
 800271c:	4293      	cmp	r3, r2
 800271e:	d106      	bne.n	800272e <Flag_CallBack+0x122>
		Flag->t10s = 1;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		Flag->t10s_count = 0;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	85da      	strh	r2, [r3, #46]	@ 0x2e
	}
#endif

// Timer 15s
#ifdef FLAG_15s
	if(Flag->t15s_count == 15000){
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002732:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8002736:	4293      	cmp	r3, r2
 8002738:	d106      	bne.n	8002748 <Flag_CallBack+0x13c>
		Flag->t15s = 1;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		Flag->t15s_count = 0;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	865a      	strh	r2, [r3, #50]	@ 0x32
	}
#endif

// Timer 30s
#ifdef FLAG_30s
	if(Flag->t30s_count == 30000){
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800274c:	f247 5230 	movw	r2, #30000	@ 0x7530
 8002750:	4293      	cmp	r3, r2
 8002752:	d106      	bne.n	8002762 <Flag_CallBack+0x156>
		Flag->t30s = 1;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		Flag->t30s_count = 0;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	86da      	strh	r2, [r3, #54]	@ 0x36
	}
#endif

// Timer 35s
#ifdef FLAG_35s
	if(Flag->t35s_count == 35000){
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8002766:	f648 02b8 	movw	r2, #35000	@ 0x88b8
 800276a:	4293      	cmp	r3, r2
 800276c:	d106      	bne.n	800277c <Flag_CallBack+0x170>
		Flag->t35s = 1;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
		Flag->t35s_count = 0;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	875a      	strh	r2, [r3, #58]	@ 0x3a
	}
#endif

// Timer 15p
#ifdef FLAG_15p
	if(Flag->t15p_count == 900000){
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002780:	4a06      	ldr	r2, [pc, #24]	@ (800279c <Flag_CallBack+0x190>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d106      	bne.n	8002794 <Flag_CallBack+0x188>
		Flag->t15p = 1;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		Flag->t15p_count = 0;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	641a      	str	r2, [r3, #64]	@ 0x40
	}
#endif
}
 8002794:	bf00      	nop
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	000dbba0 	.word	0x000dbba0

080027a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80027a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80027a4:	f7ff feb6 	bl	8002514 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027a8:	480c      	ldr	r0, [pc, #48]	@ (80027dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027aa:	490d      	ldr	r1, [pc, #52]	@ (80027e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027ac:	4a0d      	ldr	r2, [pc, #52]	@ (80027e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027b0:	e002      	b.n	80027b8 <LoopCopyDataInit>

080027b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027b6:	3304      	adds	r3, #4

080027b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027bc:	d3f9      	bcc.n	80027b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027be:	4a0a      	ldr	r2, [pc, #40]	@ (80027e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027c0:	4c0a      	ldr	r4, [pc, #40]	@ (80027ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80027c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027c4:	e001      	b.n	80027ca <LoopFillZerobss>

080027c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027c8:	3204      	adds	r2, #4

080027ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027cc:	d3fb      	bcc.n	80027c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027ce:	f008 f8d1 	bl	800a974 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027d2:	f7fe ffdd 	bl	8001790 <main>
  bx  lr    
 80027d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80027d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027e0:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 80027e4:	0800f34c 	.word	0x0800f34c
  ldr r2, =_sbss
 80027e8:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 80027ec:	20000f50 	.word	0x20000f50

080027f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027f0:	e7fe      	b.n	80027f0 <ADC_IRQHandler>

080027f2 <EEPROM_init>:
 *  Created on: May 26, 2024
 *      Author: Selina
 */
#include"24LCxx.h"

void EEPROM_init(eeprom_24LCxx_t *_eeprom, I2C_HandleTypeDef *i2c, uint8_t address, uint16_t eeprom_size){
 80027f2:	b480      	push	{r7}
 80027f4:	b085      	sub	sp, #20
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	4611      	mov	r1, r2
 80027fe:	461a      	mov	r2, r3
 8002800:	460b      	mov	r3, r1
 8002802:	71fb      	strb	r3, [r7, #7]
 8002804:	4613      	mov	r3, r2
 8002806:	80bb      	strh	r3, [r7, #4]
	_eeprom->hardware.i2c = i2c;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	601a      	str	r2, [r3, #0]
	_eeprom->hardware.address = address << 1;
 800280e:	79fb      	ldrb	r3, [r7, #7]
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	b2da      	uxtb	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	711a      	strb	r2, [r3, #4]
	_eeprom->hardware.eeprom_size = eeprom_size;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	88ba      	ldrh	r2, [r7, #4]
 800281c:	80da      	strh	r2, [r3, #6]
	_eeprom->hardware.bytes = (_eeprom->hardware.eeprom_size * 128); //(EEPROM SIZE * 1024)/8
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	88db      	ldrh	r3, [r3, #6]
 8002822:	01db      	lsls	r3, r3, #7
 8002824:	b29a      	uxth	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	811a      	strh	r2, [r3, #8]

}
 800282a:	bf00      	nop
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <i2c_write_bytes>:

uint16_t EEPROM_Length(eeprom_24LCxx_t *_eeprom){
	return (_eeprom->hardware.bytes-1);
}

uint8_t i2c_write_bytes(eeprom_24LCxx_t *_eeprom, uint16_t data_addr, uint8_t *data, uint16_t data_len){
 8002836:	b580      	push	{r7, lr}
 8002838:	b088      	sub	sp, #32
 800283a:	af04      	add	r7, sp, #16
 800283c:	60f8      	str	r0, [r7, #12]
 800283e:	607a      	str	r2, [r7, #4]
 8002840:	461a      	mov	r2, r3
 8002842:	460b      	mov	r3, r1
 8002844:	817b      	strh	r3, [r7, #10]
 8002846:	4613      	mov	r3, r2
 8002848:	813b      	strh	r3, [r7, #8]
	if(HAL_I2C_Mem_Write(_eeprom->hardware.i2c, _eeprom->hardware.address, data_addr, 0x10, data, data_len, EEPROM_WRITE_TIMEOUT)!= HAL_OK){
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6818      	ldr	r0, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	791b      	ldrb	r3, [r3, #4]
 8002852:	4619      	mov	r1, r3
 8002854:	897a      	ldrh	r2, [r7, #10]
 8002856:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800285a:	9302      	str	r3, [sp, #8]
 800285c:	893b      	ldrh	r3, [r7, #8]
 800285e:	9301      	str	r3, [sp, #4]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	2310      	movs	r3, #16
 8002866:	f003 fc6d 	bl	8006144 <HAL_I2C_Mem_Write>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <i2c_write_bytes+0x3e>
		return EEPROM_ERROR;
 8002870:	2300      	movs	r3, #0
 8002872:	e000      	b.n	8002876 <i2c_write_bytes+0x40>
	}
	return EEPROM_OK;
 8002874:	2301      	movs	r3, #1
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <EEPROM_write_bytes>:

uint8_t EEPROM_write_byte(eeprom_24LCxx_t *_eeprom, uint16_t start_data_addr, uint8_t *data_write){
	return i2c_write_bytes(_eeprom, start_data_addr, data_write, 1);
}

uint8_t EEPROM_write_bytes(eeprom_24LCxx_t *_eeprom, uint16_t start_data_addr, uint8_t *data_write, uint16_t data_len){
 800287e:	b580      	push	{r7, lr}
 8002880:	b084      	sub	sp, #16
 8002882:	af00      	add	r7, sp, #0
 8002884:	60f8      	str	r0, [r7, #12]
 8002886:	607a      	str	r2, [r7, #4]
 8002888:	461a      	mov	r2, r3
 800288a:	460b      	mov	r3, r1
 800288c:	817b      	strh	r3, [r7, #10]
 800288e:	4613      	mov	r3, r2
 8002890:	813b      	strh	r3, [r7, #8]
	return i2c_write_bytes(_eeprom, start_data_addr, data_write, data_len);
 8002892:	893b      	ldrh	r3, [r7, #8]
 8002894:	8979      	ldrh	r1, [r7, #10]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f7ff ffcc 	bl	8002836 <i2c_write_bytes>
 800289e:	4603      	mov	r3, r0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <i2c_read_bytes>:

uint8_t i2c_read_bytes(eeprom_24LCxx_t *_eeprom, uint16_t data_addr, uint8_t *data, uint16_t data_len){
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b088      	sub	sp, #32
 80028ac:	af04      	add	r7, sp, #16
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	607a      	str	r2, [r7, #4]
 80028b2:	461a      	mov	r2, r3
 80028b4:	460b      	mov	r3, r1
 80028b6:	817b      	strh	r3, [r7, #10]
 80028b8:	4613      	mov	r3, r2
 80028ba:	813b      	strh	r3, [r7, #8]
	if(HAL_I2C_Mem_Read(_eeprom->hardware.i2c, _eeprom->hardware.address, data_addr, 0x10, data, data_len, EEPROM_READ_TIMEOUT)!= HAL_OK){
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6818      	ldr	r0, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	791b      	ldrb	r3, [r3, #4]
 80028c4:	4619      	mov	r1, r3
 80028c6:	897a      	ldrh	r2, [r7, #10]
 80028c8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	893b      	ldrh	r3, [r7, #8]
 80028d0:	9301      	str	r3, [sp, #4]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	2310      	movs	r3, #16
 80028d8:	f003 fd2e 	bl	8006338 <HAL_I2C_Mem_Read>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <i2c_read_bytes+0x3e>
		return EEPROM_ERROR;
 80028e2:	2300      	movs	r3, #0
 80028e4:	e000      	b.n	80028e8 <i2c_read_bytes+0x40>
	}
	return EEPROM_OK;
 80028e6:	2301      	movs	r3, #1
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <EEPROM_read_bytes>:

uint8_t EEPROM_read_byte(eeprom_24LCxx_t *_eeprom, uint16_t start_data_addr, uint8_t *data_write){
	return i2c_read_bytes(_eeprom, start_data_addr, data_write, 1);
}

uint8_t EEPROM_read_bytes(eeprom_24LCxx_t *_eeprom, uint16_t start_data_addr, uint8_t *data_write, uint16_t data_len){
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	607a      	str	r2, [r7, #4]
 80028fa:	461a      	mov	r2, r3
 80028fc:	460b      	mov	r3, r1
 80028fe:	817b      	strh	r3, [r7, #10]
 8002900:	4613      	mov	r3, r2
 8002902:	813b      	strh	r3, [r7, #8]
	return i2c_read_bytes(_eeprom, start_data_addr, data_write, data_len);
 8002904:	893b      	ldrh	r3, [r7, #8]
 8002906:	8979      	ldrh	r1, [r7, #10]
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f7ff ffcc 	bl	80028a8 <i2c_read_bytes>
 8002910:	4603      	mov	r3, r0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <rtc_init>:

// static: khi khai bao bien static thi chi cac bien trong file nay moi duoc su dung
static I2C_HandleTypeDef *ds_i2c;

void rtc_init(I2C_HandleTypeDef *i2c)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
	ds_i2c = i2c;
 8002924:	4a04      	ldr	r2, [pc, #16]	@ (8002938 <rtc_init+0x1c>)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6013      	str	r3, [r2, #0]

}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	20000d28 	.word	0x20000d28

0800293c <Decimal2BCD>:

uint8_t Decimal2BCD(uint8_t num)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	4603      	mov	r3, r0
 8002944:	71fb      	strb	r3, [r7, #7]
	return (num/10)<<4|(num%10);
 8002946:	79fb      	ldrb	r3, [r7, #7]
 8002948:	4a0d      	ldr	r2, [pc, #52]	@ (8002980 <Decimal2BCD+0x44>)
 800294a:	fba2 2303 	umull	r2, r3, r2, r3
 800294e:	08db      	lsrs	r3, r3, #3
 8002950:	b2db      	uxtb	r3, r3
 8002952:	011b      	lsls	r3, r3, #4
 8002954:	b258      	sxtb	r0, r3
 8002956:	79fa      	ldrb	r2, [r7, #7]
 8002958:	4b09      	ldr	r3, [pc, #36]	@ (8002980 <Decimal2BCD+0x44>)
 800295a:	fba3 1302 	umull	r1, r3, r3, r2
 800295e:	08d9      	lsrs	r1, r3, #3
 8002960:	460b      	mov	r3, r1
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	b2db      	uxtb	r3, r3
 800296c:	b25b      	sxtb	r3, r3
 800296e:	4303      	orrs	r3, r0
 8002970:	b25b      	sxtb	r3, r3
 8002972:	b2db      	uxtb	r3, r3
}
 8002974:	4618      	mov	r0, r3
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	cccccccd 	.word	0xcccccccd

08002984 <BCD2Decimal>:

uint8_t BCD2Decimal(uint8_t num)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	71fb      	strb	r3, [r7, #7]
	return (num>>4)*10+(num&0x0F);
 800298e:	79fb      	ldrb	r3, [r7, #7]
 8002990:	091b      	lsrs	r3, r3, #4
 8002992:	b2db      	uxtb	r3, r3
 8002994:	461a      	mov	r2, r3
 8002996:	0092      	lsls	r2, r2, #2
 8002998:	4413      	add	r3, r2
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	b2da      	uxtb	r2, r3
 800299e:	79fb      	ldrb	r3, [r7, #7]
 80029a0:	f003 030f 	and.w	r3, r3, #15
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	4413      	add	r3, r2
 80029a8:	b2db      	uxtb	r3, r3
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
	...

080029b8 <DS3231_write_time>:
	st-> Minute = 30;
	st-> Second = 0;
}

void DS3231_write_time(DS3231_data_t *dt)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af02      	add	r7, sp, #8
 80029be:	6078      	str	r0, [r7, #4]
	uint8_t data_tran[8];
	data_tran[0] = 0x00;
 80029c0:	2300      	movs	r3, #0
 80029c2:	723b      	strb	r3, [r7, #8]
	data_tran[1] = Decimal2BCD(dt->Second);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff ffb6 	bl	800293c <Decimal2BCD>
 80029d0:	4603      	mov	r3, r0
 80029d2:	727b      	strb	r3, [r7, #9]
	data_tran[2] = Decimal2BCD(dt->Minute);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff ffae 	bl	800293c <Decimal2BCD>
 80029e0:	4603      	mov	r3, r0
 80029e2:	72bb      	strb	r3, [r7, #10]
	data_tran[3] = Decimal2BCD(dt->Hour);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff ffa6 	bl	800293c <Decimal2BCD>
 80029f0:	4603      	mov	r3, r0
 80029f2:	72fb      	strb	r3, [r7, #11]
	data_tran[4] = Decimal2BCD(dt->Day);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff ff9e 	bl	800293c <Decimal2BCD>
 8002a00:	4603      	mov	r3, r0
 8002a02:	733b      	strb	r3, [r7, #12]
	data_tran[5] = Decimal2BCD(dt->Date);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff ff96 	bl	800293c <Decimal2BCD>
 8002a10:	4603      	mov	r3, r0
 8002a12:	737b      	strb	r3, [r7, #13]
	data_tran[6] = Decimal2BCD(dt->Month);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff ff8e 	bl	800293c <Decimal2BCD>
 8002a20:	4603      	mov	r3, r0
 8002a22:	73bb      	strb	r3, [r7, #14]
	data_tran[7] = Decimal2BCD(dt->Year);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff ff86 	bl	800293c <Decimal2BCD>
 8002a30:	4603      	mov	r3, r0
 8002a32:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Transmit(ds_i2c, RTC_ADDR, data_tran, 8, 100);
 8002a34:	4b06      	ldr	r3, [pc, #24]	@ (8002a50 <DS3231_write_time+0x98>)
 8002a36:	6818      	ldr	r0, [r3, #0]
 8002a38:	f107 0208 	add.w	r2, r7, #8
 8002a3c:	2364      	movs	r3, #100	@ 0x64
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	2308      	movs	r3, #8
 8002a42:	21d0      	movs	r1, #208	@ 0xd0
 8002a44:	f003 f84e 	bl	8005ae4 <HAL_I2C_Master_Transmit>
}
 8002a48:	bf00      	nop
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	20000d28 	.word	0x20000d28

08002a54 <DS3231_read_time>:

void DS3231_read_time(DS3231_data_t *dt)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b088      	sub	sp, #32
 8002a58:	af02      	add	r7, sp, #8
 8002a5a:	6078      	str	r0, [r7, #4]
	uint8_t data_receive[7];
	uint8_t add_reg = 0x00; // Dia Chi Bat Dau Muon Doc
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(ds_i2c, RTC_ADDR, &add_reg, 1, 100);
 8002a60:	4b27      	ldr	r3, [pc, #156]	@ (8002b00 <DS3231_read_time+0xac>)
 8002a62:	6818      	ldr	r0, [r3, #0]
 8002a64:	f107 020f 	add.w	r2, r7, #15
 8002a68:	2364      	movs	r3, #100	@ 0x64
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	21d0      	movs	r1, #208	@ 0xd0
 8002a70:	f003 f838 	bl	8005ae4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(ds_i2c, RTC_ADDR, data_receive, 7, 100);
 8002a74:	4b22      	ldr	r3, [pc, #136]	@ (8002b00 <DS3231_read_time+0xac>)
 8002a76:	6818      	ldr	r0, [r3, #0]
 8002a78:	f107 0210 	add.w	r2, r7, #16
 8002a7c:	2364      	movs	r3, #100	@ 0x64
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	2307      	movs	r3, #7
 8002a82:	21d0      	movs	r1, #208	@ 0xd0
 8002a84:	f003 f92c 	bl	8005ce0 <HAL_I2C_Master_Receive>
	dt->Second = BCD2Decimal(data_receive[0]);
 8002a88:	7c3b      	ldrb	r3, [r7, #16]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff ff7a 	bl	8002984 <BCD2Decimal>
 8002a90:	4603      	mov	r3, r0
 8002a92:	461a      	mov	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	619a      	str	r2, [r3, #24]
	dt->Minute = BCD2Decimal(data_receive[1]);
 8002a98:	7c7b      	ldrb	r3, [r7, #17]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff ff72 	bl	8002984 <BCD2Decimal>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	615a      	str	r2, [r3, #20]
	dt->Hour = BCD2Decimal(data_receive[2]);
 8002aa8:	7cbb      	ldrb	r3, [r7, #18]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff ff6a 	bl	8002984 <BCD2Decimal>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	611a      	str	r2, [r3, #16]
	dt->Day = BCD2Decimal(data_receive[3]);
 8002ab8:	7cfb      	ldrb	r3, [r7, #19]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff ff62 	bl	8002984 <BCD2Decimal>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	601a      	str	r2, [r3, #0]
	dt->Date = BCD2Decimal(data_receive[4]);
 8002ac8:	7d3b      	ldrb	r3, [r7, #20]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff ff5a 	bl	8002984 <BCD2Decimal>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	605a      	str	r2, [r3, #4]
	dt->Month = BCD2Decimal(data_receive[5]);
 8002ad8:	7d7b      	ldrb	r3, [r7, #21]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff ff52 	bl	8002984 <BCD2Decimal>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	609a      	str	r2, [r3, #8]
	dt->Year = BCD2Decimal(data_receive[6]);
 8002ae8:	7dbb      	ldrb	r3, [r7, #22]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff ff4a 	bl	8002984 <BCD2Decimal>
 8002af0:	4603      	mov	r3, r0
 8002af2:	461a      	mov	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	60da      	str	r2, [r3, #12]
}
 8002af8:	bf00      	nop
 8002afa:	3718      	adds	r7, #24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	20000d28 	.word	0x20000d28

08002b04 <ring_buff_push>:
 */

#include "ringbuffer.h"

uint8_t ring_buff_push(RingBuff *ring_buff, uint8_t data)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	70fb      	strb	r3, [r7, #3]
	uint16_t next;

    next = ring_buff->head + 1;  // next is where head will point to after this write.
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	889b      	ldrh	r3, [r3, #4]
 8002b14:	3301      	adds	r3, #1
 8002b16:	81fb      	strh	r3, [r7, #14]
    if (next >= ring_buff->maxlen)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	891b      	ldrh	r3, [r3, #8]
 8002b1c:	89fa      	ldrh	r2, [r7, #14]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d301      	bcc.n	8002b26 <ring_buff_push+0x22>
        next = 0;
 8002b22:	2300      	movs	r3, #0
 8002b24:	81fb      	strh	r3, [r7, #14]

    if (next == ring_buff->tail)  // if the head + 1 == tail, circular buffer is full
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	88db      	ldrh	r3, [r3, #6]
 8002b2a:	89fa      	ldrh	r2, [r7, #14]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d101      	bne.n	8002b34 <ring_buff_push+0x30>
        return -1;
 8002b30:	23ff      	movs	r3, #255	@ 0xff
 8002b32:	e00a      	b.n	8002b4a <ring_buff_push+0x46>

    ring_buff->buffer[ring_buff->head] = data;  // Load data and then move
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	8892      	ldrh	r2, [r2, #4]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	78fa      	ldrb	r2, [r7, #3]
 8002b40:	701a      	strb	r2, [r3, #0]
    ring_buff->head = next;             // head to next data offset.
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	89fa      	ldrh	r2, [r7, #14]
 8002b46:	809a      	strh	r2, [r3, #4]
    return 0;  // return success to indicate successful push.
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <ring_buff_pop>:

uint8_t ring_buff_pop(RingBuff *ring_buff_pop, uint8_t *data)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b085      	sub	sp, #20
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
 8002b5e:	6039      	str	r1, [r7, #0]
    int next;

    if (ring_buff_pop->head == ring_buff_pop->tail)  // if the head == tail, we don't have any data
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	889a      	ldrh	r2, [r3, #4]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	88db      	ldrh	r3, [r3, #6]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d101      	bne.n	8002b70 <ring_buff_pop+0x1a>
        return -1;
 8002b6c:	23ff      	movs	r3, #255	@ 0xff
 8002b6e:	e018      	b.n	8002ba2 <ring_buff_pop+0x4c>

    next = ring_buff_pop->tail + 1;  // next is where tail will point to after this read.
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	88db      	ldrh	r3, [r3, #6]
 8002b74:	3301      	adds	r3, #1
 8002b76:	60fb      	str	r3, [r7, #12]
    if(next >= ring_buff_pop->maxlen)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	891b      	ldrh	r3, [r3, #8]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4293      	cmp	r3, r2
 8002b82:	db01      	blt.n	8002b88 <ring_buff_pop+0x32>
        next = 0;
 8002b84:	2300      	movs	r3, #0
 8002b86:	60fb      	str	r3, [r7, #12]

    *data = ring_buff_pop->buffer[ring_buff_pop->tail];  // Read data and then move
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	88d2      	ldrh	r2, [r2, #6]
 8002b90:	4413      	add	r3, r2
 8002b92:	781a      	ldrb	r2, [r3, #0]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	701a      	strb	r2, [r3, #0]
    ring_buff_pop->tail = next;              // tail to next offset.
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	80da      	strh	r2, [r3, #6]
    return 0;  // return success to indicate successful push.
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <ring_buff_init>:
	}
	return (ring_buff->head-ring_buff->tail);
}

void ring_buff_init(RingBuff *ring_buff, uint8_t *buff, uint16_t len)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b085      	sub	sp, #20
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	60f8      	str	r0, [r7, #12]
 8002bb6:	60b9      	str	r1, [r7, #8]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	80fb      	strh	r3, [r7, #6]
	ring_buff->buffer = buff;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	601a      	str	r2, [r3, #0]
	ring_buff->head = 0;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	809a      	strh	r2, [r3, #4]
	ring_buff->tail = 0;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	80da      	strh	r2, [r3, #6]
	ring_buff->maxlen = len;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	88fa      	ldrh	r2, [r7, #6]
 8002bd2:	811a      	strh	r2, [r3, #8]
}
 8002bd4:	bf00      	nop
 8002bd6:	3714      	adds	r7, #20
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <receive_rx>:
#define RING_UART_LEN 64
uint8_t buff_uart[RING_UART_LEN];
RingBuff ring_buff;

void receive_rx(uint8_t data_rx)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	71fb      	strb	r3, [r7, #7]
	ring_buff_push(&ring_buff, data_rx);
 8002bea:	79fb      	ldrb	r3, [r7, #7]
 8002bec:	4619      	mov	r1, r3
 8002bee:	4803      	ldr	r0, [pc, #12]	@ (8002bfc <receive_rx+0x1c>)
 8002bf0:	f7ff ff88 	bl	8002b04 <ring_buff_push>
}
 8002bf4:	bf00      	nop
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	20000d6c 	.word	0x20000d6c

08002c00 <uart_read>:
{
	return ring_buff_available(&ring_buff);
}

uint8_t uart_read()
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
	uint8_t data;
	ring_buff_pop(&ring_buff, &data);
 8002c06:	1dfb      	adds	r3, r7, #7
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4804      	ldr	r0, [pc, #16]	@ (8002c1c <uart_read+0x1c>)
 8002c0c:	f7ff ffa3 	bl	8002b56 <ring_buff_pop>
	return data;
 8002c10:	79fb      	ldrb	r3, [r7, #7]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	20000d6c 	.word	0x20000d6c

08002c20 <uart_init>:

void uart_init(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
	ring_buff_init(&ring_buff, buff_uart, RING_UART_LEN);
 8002c24:	2240      	movs	r2, #64	@ 0x40
 8002c26:	4903      	ldr	r1, [pc, #12]	@ (8002c34 <uart_init+0x14>)
 8002c28:	4803      	ldr	r0, [pc, #12]	@ (8002c38 <uart_init+0x18>)
 8002c2a:	f7ff ffc0 	bl	8002bae <ring_buff_init>
}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20000d2c 	.word	0x20000d2c
 8002c38:	20000d6c 	.word	0x20000d6c

08002c3c <CRC8>:

uint8_t CRC8(uint8_t data, uint8_t crc)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	460a      	mov	r2, r1
 8002c46:	71fb      	strb	r3, [r7, #7]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	71bb      	strb	r3, [r7, #6]
	uint8_t i = data ^ crc;
 8002c4c:	79fa      	ldrb	r2, [r7, #7]
 8002c4e:	79bb      	ldrb	r3, [r7, #6]
 8002c50:	4053      	eors	r3, r2
 8002c52:	73fb      	strb	r3, [r7, #15]
	crc = 0;
 8002c54:	2300      	movs	r3, #0
 8002c56:	71bb      	strb	r3, [r7, #6]
	if (i & 0x01) crc ^= 0x5e;
 8002c58:	7bfb      	ldrb	r3, [r7, #15]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <CRC8+0x2e>
 8002c62:	79bb      	ldrb	r3, [r7, #6]
 8002c64:	f083 035e 	eor.w	r3, r3, #94	@ 0x5e
 8002c68:	71bb      	strb	r3, [r7, #6]
	if (i & 0x02) crc ^= 0xbc;
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d004      	beq.n	8002c7e <CRC8+0x42>
 8002c74:	79bb      	ldrb	r3, [r7, #6]
 8002c76:	f083 0343 	eor.w	r3, r3, #67	@ 0x43
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	71bb      	strb	r3, [r7, #6]
	if (i & 0x04) crc ^= 0x61;
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d003      	beq.n	8002c90 <CRC8+0x54>
 8002c88:	79bb      	ldrb	r3, [r7, #6]
 8002c8a:	f083 0361 	eor.w	r3, r3, #97	@ 0x61
 8002c8e:	71bb      	strb	r3, [r7, #6]
	if (i & 0x08) crc ^= 0xc2;
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d004      	beq.n	8002ca4 <CRC8+0x68>
 8002c9a:	79bb      	ldrb	r3, [r7, #6]
 8002c9c:	f083 033d 	eor.w	r3, r3, #61	@ 0x3d
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	71bb      	strb	r3, [r7, #6]
	if (i & 0x10) crc ^= 0x9d;
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
 8002ca6:	f003 0310 	and.w	r3, r3, #16
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d004      	beq.n	8002cb8 <CRC8+0x7c>
 8002cae:	79bb      	ldrb	r3, [r7, #6]
 8002cb0:	f083 0362 	eor.w	r3, r3, #98	@ 0x62
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	71bb      	strb	r3, [r7, #6]
	if (i & 0x20) crc ^= 0x23;
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
 8002cba:	f003 0320 	and.w	r3, r3, #32
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <CRC8+0x8e>
 8002cc2:	79bb      	ldrb	r3, [r7, #6]
 8002cc4:	f083 0323 	eor.w	r3, r3, #35	@ 0x23
 8002cc8:	71bb      	strb	r3, [r7, #6]
	if (i & 0x40) crc ^= 0x46;
 8002cca:	7bfb      	ldrb	r3, [r7, #15]
 8002ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <CRC8+0xa0>
 8002cd4:	79bb      	ldrb	r3, [r7, #6]
 8002cd6:	f083 0346 	eor.w	r3, r3, #70	@ 0x46
 8002cda:	71bb      	strb	r3, [r7, #6]
	if (i & 0x80) crc ^= 0x8c;
 8002cdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	da04      	bge.n	8002cee <CRC8+0xb2>
 8002ce4:	79bb      	ldrb	r3, [r7, #6]
 8002ce6:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 8002cea:	43db      	mvns	r3, r3
 8002cec:	71bb      	strb	r3, [r7, #6]
	return crc;
 8002cee:	79bb      	ldrb	r3, [r7, #6]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <data_txCommand_Checksum>:

uint8_t data_txCommand_Checksum(uint8_t *crcData, uint8_t lengData)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	460b      	mov	r3, r1
 8002d06:	70fb      	strb	r3, [r7, #3]
	uint8_t Checksum = 0;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	73fb      	strb	r3, [r7, #15]
	for(int i =0; i< lengData; i++)
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60bb      	str	r3, [r7, #8]
 8002d10:	e00d      	b.n	8002d2e <data_txCommand_Checksum+0x32>
	{
		Checksum = CRC8(crcData[i], Checksum);
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	4413      	add	r3, r2
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	7bfa      	ldrb	r2, [r7, #15]
 8002d1c:	4611      	mov	r1, r2
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff ff8c 	bl	8002c3c <CRC8>
 8002d24:	4603      	mov	r3, r0
 8002d26:	73fb      	strb	r3, [r7, #15]
	for(int i =0; i< lengData; i++)
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	60bb      	str	r3, [r7, #8]
 8002d2e:	78fb      	ldrb	r3, [r7, #3]
 8002d30:	68ba      	ldr	r2, [r7, #8]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	dbed      	blt.n	8002d12 <data_txCommand_Checksum+0x16>
	}
	return Checksum;
 8002d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <Command_Format>:

void Command_Format(uint8_t *data_txcommand, uint8_t *data_rxresponse)
{
 8002d40:	b590      	push	{r4, r7, lr}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
	data_txcommand[0] = 0x31;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2231      	movs	r2, #49	@ 0x31
 8002d4e:	701a      	strb	r2, [r3, #0]
	data_txcommand[1] = 0x02;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3301      	adds	r3, #1
 8002d54:	2202      	movs	r2, #2
 8002d56:	701a      	strb	r2, [r3, #0]
	data_txcommand[2] = 0x07;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3302      	adds	r3, #2
 8002d5c:	2207      	movs	r2, #7
 8002d5e:	701a      	strb	r2, [r3, #0]
	//  data_txCommand[3] = data_txCommand_Checksum(data_txCommand[0],data_txCommand[1], data_txCommand[2], 0x02);
	data_txcommand[3] = data_txCommand_Checksum(data_txcommand, 3);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	1cdc      	adds	r4, r3, #3
 8002d64:	2103      	movs	r1, #3
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7ff ffc8 	bl	8002cfc <data_txCommand_Checksum>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, data_txcommand, 4, HAL_MAX_DELAY);
 8002d70:	f04f 33ff 	mov.w	r3, #4294967295
 8002d74:	2204      	movs	r2, #4
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	4806      	ldr	r0, [pc, #24]	@ (8002d94 <Command_Format+0x54>)
 8002d7a:	f005 fb31 	bl	80083e0 <HAL_UART_Transmit>
	uart_init();
 8002d7e:	f7ff ff4f 	bl	8002c20 <uart_init>
	HAL_UART_Receive_IT(&huart1, data_rxresponse, 5);
 8002d82:	2205      	movs	r2, #5
 8002d84:	6839      	ldr	r1, [r7, #0]
 8002d86:	4803      	ldr	r0, [pc, #12]	@ (8002d94 <Command_Format+0x54>)
 8002d88:	f005 fbb5 	bl	80084f6 <HAL_UART_Receive_IT>
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd90      	pop	{r4, r7, pc}
 8002d94:	200007dc 	.word	0x200007dc

08002d98 <Process_Received_Data>:

void Process_Received_Data(uint8_t *Data, FrameData *frame)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
    frame->rxPrefix = Data[0];
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	781a      	ldrb	r2, [r3, #0]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	701a      	strb	r2, [r3, #0]
    frame->rxNetwork_address = Data[1];
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	785a      	ldrb	r2, [r3, #1]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	705a      	strb	r2, [r3, #1]
    frame->rxOperation_code = Data[2];
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	789a      	ldrb	r2, [r3, #2]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	709a      	strb	r2, [r3, #2]
    frame->rxTemperature = (int8_t)Data[3];
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	78da      	ldrb	r2, [r3, #3]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	70da      	strb	r2, [r3, #3]
    frame->rxRelative_level = (uint16_t)(Data[5] << 8) | Data[4];
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	3305      	adds	r3, #5
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	021b      	lsls	r3, r3, #8
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	3204      	adds	r2, #4
 8002dd0:	7812      	ldrb	r2, [r2, #0]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	809a      	strh	r2, [r3, #4]
    frame->rxFrequency_value = (uint32_t)(Data[9] << 24) | (Data[8] << 16) | (Data[7] << 8) | Data[6];
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	3309      	adds	r3, #9
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	061a      	lsls	r2, r3, #24
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3308      	adds	r3, #8
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	041b      	lsls	r3, r3, #16
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3307      	adds	r3, #7
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	021b      	lsls	r3, r3, #8
 8002df4:	4313      	orrs	r3, r2
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	3206      	adds	r2, #6
 8002dfa:	7812      	ldrb	r2, [r2, #0]
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	609a      	str	r2, [r3, #8]
    frame->rxChecksum = Data[10];
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	7a9a      	ldrb	r2, [r3, #10]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	731a      	strb	r2, [r3, #12]
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
	...

08002e18 <GPS_Init>:
	sprintf(buf, "%s\n", data);
	CDC_Transmit_FS((unsigned char *) buf, (uint16_t) strlen(buf));
}
#endif

void GPS_Init(TAU1201_t *_gps, UART_HandleTypeDef *_huart){
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
	_gps->huart = _huart;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(_gps->huart, &rx_data, 1);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	4904      	ldr	r1, [pc, #16]	@ (8002e40 <GPS_Init+0x28>)
 8002e30:	4618      	mov	r0, r3
 8002e32:	f005 fb60 	bl	80084f6 <HAL_UART_Receive_IT>
}
 8002e36:	bf00      	nop
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	20000d78 	.word	0x20000d78

08002e44 <GPS_UART_CallBack>:

void GPS_UART_CallBack(TAU1201_t *_gps){
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
	if (rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 8002e4c:	4b19      	ldr	r3, [pc, #100]	@ (8002eb4 <GPS_UART_CallBack+0x70>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b0a      	cmp	r3, #10
 8002e52:	d010      	beq.n	8002e76 <GPS_UART_CallBack+0x32>
 8002e54:	4b18      	ldr	r3, [pc, #96]	@ (8002eb8 <GPS_UART_CallBack+0x74>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	b25b      	sxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	db0b      	blt.n	8002e76 <GPS_UART_CallBack+0x32>
		rx_buffer[rx_index++] = rx_data;
 8002e5e:	4b16      	ldr	r3, [pc, #88]	@ (8002eb8 <GPS_UART_CallBack+0x74>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	1c5a      	adds	r2, r3, #1
 8002e64:	b2d1      	uxtb	r1, r2
 8002e66:	4a14      	ldr	r2, [pc, #80]	@ (8002eb8 <GPS_UART_CallBack+0x74>)
 8002e68:	7011      	strb	r1, [r2, #0]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	4b11      	ldr	r3, [pc, #68]	@ (8002eb4 <GPS_UART_CallBack+0x70>)
 8002e6e:	7819      	ldrb	r1, [r3, #0]
 8002e70:	4b12      	ldr	r3, [pc, #72]	@ (8002ebc <GPS_UART_CallBack+0x78>)
 8002e72:	5499      	strb	r1, [r3, r2]
 8002e74:	e012      	b.n	8002e9c <GPS_UART_CallBack+0x58>

		#if (GPS_DEBUG == 1)
		GPS_print((char*)rx_buffer);
		#endif

		if(GPS_validate(_gps, (char*) rx_buffer))
 8002e76:	4911      	ldr	r1, [pc, #68]	@ (8002ebc <GPS_UART_CallBack+0x78>)
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 f821 	bl	8002ec0 <GPS_validate>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <GPS_UART_CallBack+0x48>
			GPS_parse(_gps, (char*) rx_buffer);
 8002e84:	490d      	ldr	r1, [pc, #52]	@ (8002ebc <GPS_UART_CallBack+0x78>)
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 f87e 	bl	8002f88 <GPS_parse>
		rx_index = 0;
 8002e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb8 <GPS_UART_CallBack+0x74>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	701a      	strb	r2, [r3, #0]
		memset(rx_buffer, 0, sizeof(rx_buffer));
 8002e92:	2280      	movs	r2, #128	@ 0x80
 8002e94:	2100      	movs	r1, #0
 8002e96:	4809      	ldr	r0, [pc, #36]	@ (8002ebc <GPS_UART_CallBack+0x78>)
 8002e98:	f007 fd01 	bl	800a89e <memset>
	}
	HAL_UART_Receive_IT(_gps->huart, &rx_data, 1);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	4904      	ldr	r1, [pc, #16]	@ (8002eb4 <GPS_UART_CallBack+0x70>)
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f005 fb26 	bl	80084f6 <HAL_UART_Receive_IT>
}
 8002eaa:	bf00      	nop
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	20000d78 	.word	0x20000d78
 8002eb8:	20000dfc 	.word	0x20000dfc
 8002ebc:	20000d7c 	.word	0x20000d7c

08002ec0 <GPS_validate>:


int GPS_validate(TAU1201_t *_gps, char *nmeastr){
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	2b24      	cmp	r3, #36	@ 0x24
 8002edc:	d103      	bne.n	8002ee6 <GPS_validate+0x26>
        i++;
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8002ee4:	e00c      	b.n	8002f00 <GPS_validate+0x40>
        return 0;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	e047      	b.n	8002f7a <GPS_validate+0xba>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	4413      	add	r3, r2
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	4053      	eors	r3, r2
 8002ef8:	613b      	str	r3, [r7, #16]
        i++;
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	3301      	adds	r3, #1
 8002efe:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	4413      	add	r3, r2
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d008      	beq.n	8002f1e <GPS_validate+0x5e>
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	4413      	add	r3, r2
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f16:	d002      	beq.n	8002f1e <GPS_validate+0x5e>
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	2b4a      	cmp	r3, #74	@ 0x4a
 8002f1c:	dde5      	ble.n	8002eea <GPS_validate+0x2a>
    }

    if(i >= 75){
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2b4a      	cmp	r3, #74	@ 0x4a
 8002f22:	dd01      	ble.n	8002f28 <GPS_validate+0x68>
        return 0;// the string was too long so return an error
 8002f24:	2300      	movs	r3, #0
 8002f26:	e028      	b.n	8002f7a <GPS_validate+0xba>
    }

    if (nmeastr[i] == '*'){
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f32:	d119      	bne.n	8002f68 <GPS_validate+0xa8>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	3301      	adds	r3, #1
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	3302      	adds	r3, #2
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	4413      	add	r3, r2
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 8002f50:	f107 0308 	add.w	r3, r7, #8
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	490b      	ldr	r1, [pc, #44]	@ (8002f84 <GPS_validate+0xc4>)
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f007 fc11 	bl	800a780 <siprintf>
    return((checkcalcstr[0] == check[0])
 8002f5e:	7a3a      	ldrb	r2, [r7, #8]
 8002f60:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d108      	bne.n	8002f78 <GPS_validate+0xb8>
 8002f66:	e001      	b.n	8002f6c <GPS_validate+0xac>
        return 0;// no checksum separator found there for invalid
 8002f68:	2300      	movs	r3, #0
 8002f6a:	e006      	b.n	8002f7a <GPS_validate+0xba>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8002f6c:	7a7a      	ldrb	r2, [r7, #9]
 8002f6e:	7b7b      	ldrb	r3, [r7, #13]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d101      	bne.n	8002f78 <GPS_validate+0xb8>
 8002f74:	2301      	movs	r3, #1
 8002f76:	e000      	b.n	8002f7a <GPS_validate+0xba>
 8002f78:	2300      	movs	r3, #0
	return 0;
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	0800ea68 	.word	0x0800ea68

08002f88 <GPS_parse>:
//
void GPS_parse(TAU1201_t *_gps, char *GPSstrParse){
 8002f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f8a:	b08d      	sub	sp, #52	@ 0x34
 8002f8c:	af08      	add	r7, sp, #32
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 8002f92:	2206      	movs	r2, #6
 8002f94:	4963      	ldr	r1, [pc, #396]	@ (8003124 <GPS_parse+0x19c>)
 8002f96:	68b8      	ldr	r0, [r7, #8]
 8002f98:	f007 fc89 	bl	800a8ae <strncmp>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d148      	bne.n	8003034 <GPS_parse+0xac>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &_gps->utc_time, &_gps->nmea_latitude, &_gps->ns, &_gps->nmea_longitude, &_gps->ew, &_gps->lock, &_gps->satelites, &_gps->hdop, &_gps->msl_altitude, &_gps->msl_units) >= 1){
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f103 0c18 	add.w	ip, r3, #24
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f103 0e14 	add.w	lr, r3, #20
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	331c      	adds	r3, #28
 8002fb2:	607b      	str	r3, [r7, #4]
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	3210      	adds	r2, #16
 8002fb8:	68f9      	ldr	r1, [r7, #12]
 8002fba:	311d      	adds	r1, #29
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	3020      	adds	r0, #32
 8002fc0:	68fc      	ldr	r4, [r7, #12]
 8002fc2:	3424      	adds	r4, #36	@ 0x24
 8002fc4:	68fd      	ldr	r5, [r7, #12]
 8002fc6:	3528      	adds	r5, #40	@ 0x28
 8002fc8:	68fe      	ldr	r6, [r7, #12]
 8002fca:	362c      	adds	r6, #44	@ 0x2c
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	3330      	adds	r3, #48	@ 0x30
 8002fd0:	9307      	str	r3, [sp, #28]
 8002fd2:	9606      	str	r6, [sp, #24]
 8002fd4:	9505      	str	r5, [sp, #20]
 8002fd6:	9404      	str	r4, [sp, #16]
 8002fd8:	9003      	str	r0, [sp, #12]
 8002fda:	9102      	str	r1, [sp, #8]
 8002fdc:	9201      	str	r2, [sp, #4]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	9300      	str	r3, [sp, #0]
 8002fe2:	4673      	mov	r3, lr
 8002fe4:	4662      	mov	r2, ip
 8002fe6:	4950      	ldr	r1, [pc, #320]	@ (8003128 <GPS_parse+0x1a0>)
 8002fe8:	68b8      	ldr	r0, [r7, #8]
 8002fea:	f007 fbe9 	bl	800a7c0 <siscanf>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f340 8093 	ble.w	800311c <GPS_parse+0x194>
    		_gps->dec_latitude = GPS_nmea_to_dec(_gps->nmea_latitude, _gps->ns);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	edd3 7a05 	vldr	s15, [r3, #20]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	7f1b      	ldrb	r3, [r3, #28]
 8003000:	4618      	mov	r0, r3
 8003002:	eeb0 0a67 	vmov.f32	s0, s15
 8003006:	f000 f89d 	bl	8003144 <GPS_nmea_to_dec>
 800300a:	eef0 7a40 	vmov.f32	s15, s0
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	edc3 7a02 	vstr	s15, [r3, #8]
    		_gps->dec_longitude = GPS_nmea_to_dec(_gps->nmea_longitude, _gps->ew);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	edd3 7a04 	vldr	s15, [r3, #16]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	7f5b      	ldrb	r3, [r3, #29]
 800301e:	4618      	mov	r0, r3
 8003020:	eeb0 0a67 	vmov.f32	s0, s15
 8003024:	f000 f88e 	bl	8003144 <GPS_nmea_to_dec>
 8003028:	eef0 7a40 	vmov.f32	s15, s0
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	edc3 7a01 	vstr	s15, [r3, #4]
    		return;
 8003032:	e073      	b.n	800311c <GPS_parse+0x194>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 8003034:	2206      	movs	r2, #6
 8003036:	493d      	ldr	r1, [pc, #244]	@ (800312c <GPS_parse+0x1a4>)
 8003038:	68b8      	ldr	r0, [r7, #8]
 800303a:	f007 fc38 	bl	800a8ae <strncmp>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d120      	bne.n	8003086 <GPS_parse+0xfe>
    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &_gps->utc_time, &_gps->nmea_latitude, &_gps->ns, &_gps->nmea_longitude, &_gps->ew, &_gps->speed_k, &_gps->course_d, &_gps->date) >= 1)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f103 0618 	add.w	r6, r3, #24
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f103 0c14 	add.w	ip, r3, #20
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	331c      	adds	r3, #28
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	3210      	adds	r2, #16
 8003058:	68f9      	ldr	r1, [r7, #12]
 800305a:	311d      	adds	r1, #29
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	3034      	adds	r0, #52	@ 0x34
 8003060:	68fc      	ldr	r4, [r7, #12]
 8003062:	3438      	adds	r4, #56	@ 0x38
 8003064:	68fd      	ldr	r5, [r7, #12]
 8003066:	353c      	adds	r5, #60	@ 0x3c
 8003068:	9505      	str	r5, [sp, #20]
 800306a:	9404      	str	r4, [sp, #16]
 800306c:	9003      	str	r0, [sp, #12]
 800306e:	9102      	str	r1, [sp, #8]
 8003070:	9201      	str	r2, [sp, #4]
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	4663      	mov	r3, ip
 8003076:	4632      	mov	r2, r6
 8003078:	492d      	ldr	r1, [pc, #180]	@ (8003130 <GPS_parse+0x1a8>)
 800307a:	68b8      	ldr	r0, [r7, #8]
 800307c:	f007 fba0 	bl	800a7c0 <siscanf>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	e04a      	b.n	800311c <GPS_parse+0x194>
    		return;

    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 8003086:	2206      	movs	r2, #6
 8003088:	492a      	ldr	r1, [pc, #168]	@ (8003134 <GPS_parse+0x1ac>)
 800308a:	68b8      	ldr	r0, [r7, #8]
 800308c:	f007 fc0f 	bl	800a8ae <strncmp>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d11a      	bne.n	80030cc <GPS_parse+0x144>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &_gps->nmea_latitude, &_gps->ns, &_gps->nmea_longitude, &_gps->ew, &_gps->utc_time, &_gps->gll_status) >= 1)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f103 0414 	add.w	r4, r3, #20
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f103 051c 	add.w	r5, r3, #28
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	3310      	adds	r3, #16
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	321d      	adds	r2, #29
 80030aa:	68f9      	ldr	r1, [r7, #12]
 80030ac:	3118      	adds	r1, #24
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	3040      	adds	r0, #64	@ 0x40
 80030b2:	9003      	str	r0, [sp, #12]
 80030b4:	9102      	str	r1, [sp, #8]
 80030b6:	9201      	str	r2, [sp, #4]
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	462b      	mov	r3, r5
 80030bc:	4622      	mov	r2, r4
 80030be:	491e      	ldr	r1, [pc, #120]	@ (8003138 <GPS_parse+0x1b0>)
 80030c0:	68b8      	ldr	r0, [r7, #8]
 80030c2:	f007 fb7d 	bl	800a7c0 <siscanf>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	e027      	b.n	800311c <GPS_parse+0x194>
            return;
    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 80030cc:	2206      	movs	r2, #6
 80030ce:	491b      	ldr	r1, [pc, #108]	@ (800313c <GPS_parse+0x1b4>)
 80030d0:	68b8      	ldr	r0, [r7, #8]
 80030d2:	f007 fbec 	bl	800a8ae <strncmp>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d11f      	bne.n	800311c <GPS_parse+0x194>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &_gps->course_t, &_gps->course_t_unit, &_gps->course_m, &_gps->course_m_unit, &_gps->speed_k, &_gps->speed_k_unit, &_gps->speed_km, &_gps->speed_km_unit) >= 1)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f103 0644 	add.w	r6, r3, #68	@ 0x44
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f103 0c48 	add.w	ip, r3, #72	@ 0x48
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	334c      	adds	r3, #76	@ 0x4c
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	3250      	adds	r2, #80	@ 0x50
 80030f0:	68f9      	ldr	r1, [r7, #12]
 80030f2:	3134      	adds	r1, #52	@ 0x34
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	3051      	adds	r0, #81	@ 0x51
 80030f8:	68fc      	ldr	r4, [r7, #12]
 80030fa:	3454      	adds	r4, #84	@ 0x54
 80030fc:	68fd      	ldr	r5, [r7, #12]
 80030fe:	3558      	adds	r5, #88	@ 0x58
 8003100:	9505      	str	r5, [sp, #20]
 8003102:	9404      	str	r4, [sp, #16]
 8003104:	9003      	str	r0, [sp, #12]
 8003106:	9102      	str	r1, [sp, #8]
 8003108:	9201      	str	r2, [sp, #4]
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	4663      	mov	r3, ip
 800310e:	4632      	mov	r2, r6
 8003110:	490b      	ldr	r1, [pc, #44]	@ (8003140 <GPS_parse+0x1b8>)
 8003112:	68b8      	ldr	r0, [r7, #8]
 8003114:	f007 fb54 	bl	800a7c0 <siscanf>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
            return;
    }
}
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003122:	bf00      	nop
 8003124:	0800ea70 	.word	0x0800ea70
 8003128:	0800ea78 	.word	0x0800ea78
 800312c:	0800eaa0 	.word	0x0800eaa0
 8003130:	0800eaa8 	.word	0x0800eaa8
 8003134:	0800eac8 	.word	0x0800eac8
 8003138:	0800ead0 	.word	0x0800ead0
 800313c:	0800eaec 	.word	0x0800eaec
 8003140:	0800eaf4 	.word	0x0800eaf4

08003144 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew){
 8003144:	b480      	push	{r7}
 8003146:	b087      	sub	sp, #28
 8003148:	af00      	add	r7, sp, #0
 800314a:	ed87 0a01 	vstr	s0, [r7, #4]
 800314e:	4603      	mov	r3, r0
 8003150:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8003152:	ed97 7a01 	vldr	s14, [r7, #4]
 8003156:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80031d8 <GPS_nmea_to_dec+0x94>
 800315a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800315e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003162:	ee17 3a90 	vmov	r3, s15
 8003166:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	2264      	movs	r2, #100	@ 0x64
 800316c:	fb02 f303 	mul.w	r3, r2, r3
 8003170:	ee07 3a90 	vmov	s15, r3
 8003174:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003178:	ed97 7a01 	vldr	s14, [r7, #4]
 800317c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003180:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8003184:	ed97 7a03 	vldr	s14, [r7, #12]
 8003188:	eddf 6a14 	vldr	s13, [pc, #80]	@ 80031dc <GPS_nmea_to_dec+0x98>
 800318c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003190:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	ee07 3a90 	vmov	s15, r3
 800319a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800319e:	ed97 7a02 	vldr	s14, [r7, #8]
 80031a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031a6:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 80031aa:	78fb      	ldrb	r3, [r7, #3]
 80031ac:	2b53      	cmp	r3, #83	@ 0x53
 80031ae:	d002      	beq.n	80031b6 <GPS_nmea_to_dec+0x72>
 80031b0:	78fb      	ldrb	r3, [r7, #3]
 80031b2:	2b57      	cmp	r3, #87	@ 0x57
 80031b4:	d105      	bne.n	80031c2 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 80031b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80031ba:	eef1 7a67 	vneg.f32	s15, s15
 80031be:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	ee07 3a90 	vmov	s15, r3
}
 80031c8:	eeb0 0a67 	vmov.f32	s0, s15
 80031cc:	371c      	adds	r7, #28
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	42c80000 	.word	0x42c80000
 80031dc:	42700000 	.word	0x42700000

080031e0 <getLatitude>:

float getLatitude(TAU1201_t *_gps){
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
	return _gps->dec_latitude;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	ee07 3a90 	vmov	s15, r3
}
 80031f0:	eeb0 0a67 	vmov.f32	s0, s15
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <getLongitude>:

float getLongitude(TAU1201_t *_gps){
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
	return _gps->dec_longitude;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	ee07 3a90 	vmov	s15, r3
}
 800320e:	eeb0 0a67 	vmov.f32	s0, s15
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <getSpeed>:

float getSpeed(TAU1201_t *_gps){
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
	return _gps->speed_k;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003228:	ee07 3a90 	vmov	s15, r3
}
 800322c:	eeb0 0a67 	vmov.f32	s0, s15
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <getSatelitesNum>:

float getSatelitesNum(TAU1201_t *_gps){
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
	return _gps->satelites;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003246:	ee07 3a90 	vmov	s15, r3
 800324a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800324e:	eeb0 0a67 	vmov.f32	s0, s15
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <findSubstring>:
 */

#include "sim7600.h"

#define PRIME 101 // Số nguyên tố để tính mã băm
int findSubstring(char *str, char *substr) {
 800325c:	b580      	push	{r7, lr}
 800325e:	b08a      	sub	sp, #40	@ 0x28
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
    int len_str = strlen(str);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7fd f802 	bl	8000270 <strlen>
 800326c:	4603      	mov	r3, r0
 800326e:	613b      	str	r3, [r7, #16]
    int len_substr = strlen(substr);
 8003270:	6838      	ldr	r0, [r7, #0]
 8003272:	f7fc fffd 	bl	8000270 <strlen>
 8003276:	4603      	mov	r3, r0
 8003278:	60fb      	str	r3, [r7, #12]
    int i, j;
    int hash_str = 0; // Mã băm của chuỗi str
 800327a:	2300      	movs	r3, #0
 800327c:	61fb      	str	r3, [r7, #28]
    int hash_substr = 0; // Mã băm của chuỗi substr
 800327e:	2300      	movs	r3, #0
 8003280:	61bb      	str	r3, [r7, #24]
    int h = 1;
 8003282:	2301      	movs	r3, #1
 8003284:	617b      	str	r3, [r7, #20]
    // Tính h = PRIME^(len_substr-1) % PRIME
    for (i = 0; i < len_substr - 1; i++) {
 8003286:	2300      	movs	r3, #0
 8003288:	627b      	str	r3, [r7, #36]	@ 0x24
 800328a:	e00f      	b.n	80032ac <findSubstring+0x50>
        h = (h * 256) % PRIME;
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	021b      	lsls	r3, r3, #8
 8003290:	4a4f      	ldr	r2, [pc, #316]	@ (80033d0 <findSubstring+0x174>)
 8003292:	fb82 1203 	smull	r1, r2, r2, r3
 8003296:	1111      	asrs	r1, r2, #4
 8003298:	17da      	asrs	r2, r3, #31
 800329a:	1a8a      	subs	r2, r1, r2
 800329c:	2165      	movs	r1, #101	@ 0x65
 800329e:	fb01 f202 	mul.w	r2, r1, r2
 80032a2:	1a9b      	subs	r3, r3, r2
 80032a4:	617b      	str	r3, [r7, #20]
    for (i = 0; i < len_substr - 1; i++) {
 80032a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a8:	3301      	adds	r3, #1
 80032aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	3b01      	subs	r3, #1
 80032b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032b2:	429a      	cmp	r2, r3
 80032b4:	dbea      	blt.n	800328c <findSubstring+0x30>
    }
    // Tính mã băm cho chuỗi substr và len_substr ký tự đầu tiên của chuỗi str
    for (i = 0; i < len_substr; i++) {
 80032b6:	2300      	movs	r3, #0
 80032b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80032ba:	e026      	b.n	800330a <findSubstring+0xae>
        hash_substr = (256 * hash_substr + substr[i]) % PRIME;
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	021b      	lsls	r3, r3, #8
 80032c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032c2:	6839      	ldr	r1, [r7, #0]
 80032c4:	440a      	add	r2, r1
 80032c6:	7812      	ldrb	r2, [r2, #0]
 80032c8:	4413      	add	r3, r2
 80032ca:	4a41      	ldr	r2, [pc, #260]	@ (80033d0 <findSubstring+0x174>)
 80032cc:	fb82 1203 	smull	r1, r2, r2, r3
 80032d0:	1111      	asrs	r1, r2, #4
 80032d2:	17da      	asrs	r2, r3, #31
 80032d4:	1a8a      	subs	r2, r1, r2
 80032d6:	2165      	movs	r1, #101	@ 0x65
 80032d8:	fb01 f202 	mul.w	r2, r1, r2
 80032dc:	1a9b      	subs	r3, r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
        hash_str = (256 * hash_str + str[i]) % PRIME;
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	021b      	lsls	r3, r3, #8
 80032e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	440a      	add	r2, r1
 80032ea:	7812      	ldrb	r2, [r2, #0]
 80032ec:	4413      	add	r3, r2
 80032ee:	4a38      	ldr	r2, [pc, #224]	@ (80033d0 <findSubstring+0x174>)
 80032f0:	fb82 1203 	smull	r1, r2, r2, r3
 80032f4:	1111      	asrs	r1, r2, #4
 80032f6:	17da      	asrs	r2, r3, #31
 80032f8:	1a8a      	subs	r2, r1, r2
 80032fa:	2165      	movs	r1, #101	@ 0x65
 80032fc:	fb01 f202 	mul.w	r2, r1, r2
 8003300:	1a9b      	subs	r3, r3, r2
 8003302:	61fb      	str	r3, [r7, #28]
    for (i = 0; i < len_substr; i++) {
 8003304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003306:	3301      	adds	r3, #1
 8003308:	627b      	str	r3, [r7, #36]	@ 0x24
 800330a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	429a      	cmp	r2, r3
 8003310:	dbd4      	blt.n	80032bc <findSubstring+0x60>
    }
    // Duyệt qua các ký tự của chuỗi str
    for (i = 0; i <= len_str - len_substr; i++) {
 8003312:	2300      	movs	r3, #0
 8003314:	627b      	str	r3, [r7, #36]	@ 0x24
 8003316:	e04f      	b.n	80033b8 <findSubstring+0x15c>
        // Nếu mã băm của chuỗi substr và len_substr ký tự tiếp theo của chuỗi str trùng nhau
        if (hash_substr == hash_str) {
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	429a      	cmp	r2, r3
 800331e:	d11e      	bne.n	800335e <findSubstring+0x102>
            // Kiểm tra từng ký tự của chuỗi substr và chuỗi con tương ứng trong chuỗi str
            for (j = 0; j < len_substr; j++) {
 8003320:	2300      	movs	r3, #0
 8003322:	623b      	str	r3, [r7, #32]
 8003324:	e00f      	b.n	8003346 <findSubstring+0xea>
                if (str[i + j] != substr[j])
 8003326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	4413      	add	r3, r2
 800332c:	461a      	mov	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4413      	add	r3, r2
 8003332:	781a      	ldrb	r2, [r3, #0]
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	6839      	ldr	r1, [r7, #0]
 8003338:	440b      	add	r3, r1
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	429a      	cmp	r2, r3
 800333e:	d107      	bne.n	8003350 <findSubstring+0xf4>
            for (j = 0; j < len_substr; j++) {
 8003340:	6a3b      	ldr	r3, [r7, #32]
 8003342:	3301      	adds	r3, #1
 8003344:	623b      	str	r3, [r7, #32]
 8003346:	6a3a      	ldr	r2, [r7, #32]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	429a      	cmp	r2, r3
 800334c:	dbeb      	blt.n	8003326 <findSubstring+0xca>
 800334e:	e000      	b.n	8003352 <findSubstring+0xf6>
                    break;
 8003350:	bf00      	nop
            }
            // Nếu tất cả các ký tự đều trùng khớp
            if (j == len_substr)
 8003352:	6a3a      	ldr	r2, [r7, #32]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	429a      	cmp	r2, r3
 8003358:	d101      	bne.n	800335e <findSubstring+0x102>
                return i;
 800335a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335c:	e034      	b.n	80033c8 <findSubstring+0x16c>
        }
        // Tính lại mã băm cho len_substr ký tự tiếp theo của chuỗi str
        if (i < len_str - len_substr) {
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003366:	429a      	cmp	r2, r3
 8003368:	da23      	bge.n	80033b2 <findSubstring+0x156>
            hash_str = (256 * (hash_str - str[i] * h) + str[i + len_substr]) % PRIME;
 800336a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	4413      	add	r3, r2
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	461a      	mov	r2, r3
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	fb02 f303 	mul.w	r3, r2, r3
 800337a:	69fa      	ldr	r2, [r7, #28]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	021b      	lsls	r3, r3, #8
 8003380:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	440a      	add	r2, r1
 8003386:	4611      	mov	r1, r2
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	440a      	add	r2, r1
 800338c:	7812      	ldrb	r2, [r2, #0]
 800338e:	4413      	add	r3, r2
 8003390:	4a0f      	ldr	r2, [pc, #60]	@ (80033d0 <findSubstring+0x174>)
 8003392:	fb82 1203 	smull	r1, r2, r2, r3
 8003396:	1111      	asrs	r1, r2, #4
 8003398:	17da      	asrs	r2, r3, #31
 800339a:	1a8a      	subs	r2, r1, r2
 800339c:	2165      	movs	r1, #101	@ 0x65
 800339e:	fb01 f202 	mul.w	r2, r1, r2
 80033a2:	1a9b      	subs	r3, r3, r2
 80033a4:	61fb      	str	r3, [r7, #28]
            if (hash_str < 0)
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	da02      	bge.n	80033b2 <findSubstring+0x156>
                hash_str = (hash_str + PRIME);
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	3365      	adds	r3, #101	@ 0x65
 80033b0:	61fb      	str	r3, [r7, #28]
    for (i = 0; i <= len_str - len_substr; i++) {
 80033b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b4:	3301      	adds	r3, #1
 80033b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033c0:	429a      	cmp	r2, r3
 80033c2:	dda9      	ble.n	8003318 <findSubstring+0xbc>
        }
    }
    return -1; // Trả về -1 nếu không tìm thấy chuỗi con
 80033c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3728      	adds	r7, #40	@ 0x28
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	288df0cb 	.word	0x288df0cb

080033d4 <SIM_UART_DMA_CallBack>:
// Thuật toán tìm kím chuỗi con

// Uart DMA CallBack
void SIM_UART_DMA_CallBack(sim7600_t *_sim){
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_DMA(_sim->hardware.huart, (uint8_t *)_sim->buffer, SIM_RX_BUFF_SIZE);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6818      	ldr	r0, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	3390      	adds	r3, #144	@ 0x90
 80033e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033e8:	4619      	mov	r1, r3
 80033ea:	f005 f928 	bl	800863e <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80033ee:	bf00      	nop
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <ClearBuffer>:
	GetLBS(_sim);
	GetSignal(_sim);
}

// Clear UART Buffer
void ClearBuffer(sim7600_t *_sim){
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b082      	sub	sp, #8
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
	HAL_UART_DMAStop(_sim->hardware.huart);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f005 f89c 	bl	8008540 <HAL_UART_DMAStop>
	HAL_UARTEx_ReceiveToIdle_DMA(_sim->hardware.huart, (uint8_t *)_sim->buffer, SIM_RX_BUFF_SIZE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6818      	ldr	r0, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3390      	adds	r3, #144	@ 0x90
 8003410:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003414:	4619      	mov	r1, r3
 8003416:	f005 f912 	bl	800863e <HAL_UARTEx_ReceiveToIdle_DMA>
	memset(_sim->buffer, 0, SIM_RX_BUFF_SIZE);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	3390      	adds	r3, #144	@ 0x90
 800341e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003422:	2100      	movs	r1, #0
 8003424:	4618      	mov	r0, r3
 8003426:	f007 fa3a 	bl	800a89e <memset>
}
 800342a:	bf00      	nop
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <WaitForResponse>:

// Wait until SIMCOM module response data
// If timeout: return -1
// If find value: return the first char's address
int WaitForResponse(sim7600_t *_sim, char *response, long long timeout, uint8_t clear_buffer){
 8003432:	b5b0      	push	{r4, r5, r7, lr}
 8003434:	b088      	sub	sp, #32
 8003436:	af00      	add	r7, sp, #0
 8003438:	60f8      	str	r0, [r7, #12]
 800343a:	60b9      	str	r1, [r7, #8]
 800343c:	e9c7 2300 	strd	r2, r3, [r7]
    int found;
    long long time = timeout;
 8003440:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003444:	e9c7 2306 	strd	r2, r3, [r7, #24]
#ifdef SIM_Debug
    strcpy(_sim->DebugStr, response);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f203 23c6 	addw	r3, r3, #710	@ 0x2c6
 800344e:	68b9      	ldr	r1, [r7, #8]
 8003450:	4618      	mov	r0, r3
 8003452:	f007 fab6 	bl	800a9c2 <strcpy>
#endif
    while(time >= 0){
 8003456:	e022      	b.n	800349e <WaitForResponse+0x6c>
        found = findSubstring(_sim->buffer, response);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	3390      	adds	r3, #144	@ 0x90
 800345c:	68b9      	ldr	r1, [r7, #8]
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff fefc 	bl	800325c <findSubstring>
 8003464:	6178      	str	r0, [r7, #20]
		_sim->x = found;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        if(found != -1){
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003474:	d008      	beq.n	8003488 <WaitForResponse+0x56>
            if(clear_buffer){
 8003476:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800347a:	2b00      	cmp	r3, #0
 800347c:	d002      	beq.n	8003484 <WaitForResponse+0x52>
                ClearBuffer(_sim);
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f7ff ffb9 	bl	80033f6 <ClearBuffer>
            }
#ifdef SIM_Debug
//	strcpy(_sim->response,"FoundSubStr");
#endif
            return found;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	e017      	b.n	80034b8 <WaitForResponse+0x86>
        }
        time = time - 10;
 8003488:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800348c:	f1b2 040a 	subs.w	r4, r2, #10
 8003490:	f143 35ff 	adc.w	r5, r3, #4294967295
 8003494:	e9c7 4506 	strd	r4, r5, [r7, #24]
        SIM_Delay(10);
 8003498:	200a      	movs	r0, #10
 800349a:	f001 fac1 	bl	8004a20 <HAL_Delay>
    while(time >= 0){
 800349e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	dad8      	bge.n	8003458 <WaitForResponse+0x26>

#ifdef SIM_Debug
//	strcpy(_sim->response,"TIME OUT");
#endif

    if(clear_buffer){
 80034a6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d002      	beq.n	80034b4 <WaitForResponse+0x82>
        ClearBuffer(_sim);
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f7ff ffa1 	bl	80033f6 <ClearBuffer>
    }
    return -1;
 80034b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3720      	adds	r7, #32
 80034bc:	46bd      	mov	sp, r7
 80034be:	bdb0      	pop	{r4, r5, r7, pc}

080034c0 <WaitForResponceTrueFalse>:

// Wait until SIMCOM module response data and check which data recieved
// If timeout, return -1
// If found response true, return 1
// If found response false, return 0
int WaitForResponceTrueFalse(sim7600_t *_sim, char *responceTrue, char *responceFalse, long long timeout, uint8_t clear_buffer){
 80034c0:	b5b0      	push	{r4, r5, r7, lr}
 80034c2:	b088      	sub	sp, #32
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
    int foundTrue;
    int foundFalse;
    long long time = timeout;
 80034cc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80034d0:	e9c7 2306 	strd	r2, r3, [r7, #24]

    while(time >= 0){
 80034d4:	e04a      	b.n	800356c <WaitForResponceTrueFalse+0xac>
        foundTrue = findSubstring(_sim->buffer, responceTrue);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	3390      	adds	r3, #144	@ 0x90
 80034da:	68b9      	ldr	r1, [r7, #8]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff febd 	bl	800325c <findSubstring>
 80034e2:	6178      	str	r0, [r7, #20]

        if(foundTrue != -1){
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ea:	d013      	beq.n	8003514 <WaitForResponceTrueFalse+0x54>
            if(clear_buffer){
 80034ec:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d002      	beq.n	80034fa <WaitForResponceTrueFalse+0x3a>
                ClearBuffer(_sim);
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f7ff ff7e 	bl	80033f6 <ClearBuffer>
            }
#ifdef SIM_Debug
	strcpy(_sim->response,"FoundSubStrTrue");
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003500:	4a23      	ldr	r2, [pc, #140]	@ (8003590 <WaitForResponceTrueFalse+0xd0>)
 8003502:	461c      	mov	r4, r3
 8003504:	4615      	mov	r5, r2
 8003506:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003508:	6020      	str	r0, [r4, #0]
 800350a:	6061      	str	r1, [r4, #4]
 800350c:	60a2      	str	r2, [r4, #8]
 800350e:	60e3      	str	r3, [r4, #12]
#endif
            return 1;
 8003510:	2301      	movs	r3, #1
 8003512:	e038      	b.n	8003586 <WaitForResponceTrueFalse+0xc6>
        }

        foundFalse = findSubstring(_sim->buffer, responceFalse);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	3390      	adds	r3, #144	@ 0x90
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	4618      	mov	r0, r3
 800351c:	f7ff fe9e 	bl	800325c <findSubstring>
 8003520:	6138      	str	r0, [r7, #16]

        if(foundFalse != -1){
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003528:	d015      	beq.n	8003556 <WaitForResponceTrueFalse+0x96>
            if(clear_buffer){
 800352a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800352e:	2b00      	cmp	r3, #0
 8003530:	d002      	beq.n	8003538 <WaitForResponceTrueFalse+0x78>
                ClearBuffer(_sim);
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f7ff ff5f 	bl	80033f6 <ClearBuffer>
            }
#ifdef SIM_Debug
	strcpy(_sim->response,"FoundSubStrFalse");
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800353e:	4a15      	ldr	r2, [pc, #84]	@ (8003594 <WaitForResponceTrueFalse+0xd4>)
 8003540:	461d      	mov	r5, r3
 8003542:	4614      	mov	r4, r2
 8003544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003546:	6028      	str	r0, [r5, #0]
 8003548:	6069      	str	r1, [r5, #4]
 800354a:	60aa      	str	r2, [r5, #8]
 800354c:	60eb      	str	r3, [r5, #12]
 800354e:	7823      	ldrb	r3, [r4, #0]
 8003550:	742b      	strb	r3, [r5, #16]
#endif
            return 0;
 8003552:	2300      	movs	r3, #0
 8003554:	e017      	b.n	8003586 <WaitForResponceTrueFalse+0xc6>
        }

        time = time - 10;
 8003556:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800355a:	f1b2 040a 	subs.w	r4, r2, #10
 800355e:	f143 35ff 	adc.w	r5, r3, #4294967295
 8003562:	e9c7 4506 	strd	r4, r5, [r7, #24]
        SIM_Delay(10);
 8003566:	200a      	movs	r0, #10
 8003568:	f001 fa5a 	bl	8004a20 <HAL_Delay>
    while(time >= 0){
 800356c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003570:	2b00      	cmp	r3, #0
 8003572:	dab0      	bge.n	80034d6 <WaitForResponceTrueFalse+0x16>
    }

    if(clear_buffer){
 8003574:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <WaitForResponceTrueFalse+0xc2>
        ClearBuffer(_sim);
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f7ff ff3a 	bl	80033f6 <ClearBuffer>
    }
    return -1;
 8003582:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003586:	4618      	mov	r0, r3
 8003588:	3720      	adds	r7, #32
 800358a:	46bd      	mov	sp, r7
 800358c:	bdb0      	pop	{r4, r5, r7, pc}
 800358e:	bf00      	nop
 8003590:	0800eb14 	.word	0x0800eb14
 8003594:	0800eb24 	.word	0x0800eb24

08003598 <SendCommand>:

int SendCommand(sim7600_t *_sim, char *command, char *response, long long timeout, uint8_t clear_buffer){
 8003598:	b580      	push	{r7, lr}
 800359a:	b088      	sub	sp, #32
 800359c:	af02      	add	r7, sp, #8
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
	uint16_t length = strlen(command);
 80035a4:	68b8      	ldr	r0, [r7, #8]
 80035a6:	f7fc fe63 	bl	8000270 <strlen>
 80035aa:	4603      	mov	r3, r0
 80035ac:	82fb      	strh	r3, [r7, #22]
	if(HAL_UART_Transmit(_sim->hardware.huart, (uint8_t*)command, length, 1000) != HAL_OK){
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6818      	ldr	r0, [r3, #0]
 80035b2:	8afa      	ldrh	r2, [r7, #22]
 80035b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035b8:	68b9      	ldr	r1, [r7, #8]
 80035ba:	f004 ff11 	bl	80083e0 <HAL_UART_Transmit>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <SendCommand+0x30>
		return SIM7600_ERROR;
 80035c4:	2300      	movs	r3, #0
 80035c6:	e009      	b.n	80035dc <SendCommand+0x44>
	}
	else{
		return WaitForResponse(_sim, response, timeout, clear_buffer);
 80035c8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f7ff ff2c 	bl	8003432 <WaitForResponse>
 80035da:	4603      	mov	r3, r0
	}
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <SendCommandCheckTrueFalse>:

int SendCommandCheckTrueFalse(sim7600_t *_sim, char *command, char *responceTrue, char *responceFalse, long long timeout, uint8_t clear_buffer){
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b08a      	sub	sp, #40	@ 0x28
 80035e8:	af04      	add	r7, sp, #16
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
 80035f0:	603b      	str	r3, [r7, #0]
	uint16_t length = strlen(command);
 80035f2:	68b8      	ldr	r0, [r7, #8]
 80035f4:	f7fc fe3c 	bl	8000270 <strlen>
 80035f8:	4603      	mov	r3, r0
 80035fa:	82fb      	strh	r3, [r7, #22]
	if(HAL_UART_Transmit(_sim->hardware.huart, (uint8_t*)command, length, 1000) != HAL_OK){
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6818      	ldr	r0, [r3, #0]
 8003600:	8afa      	ldrh	r2, [r7, #22]
 8003602:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003606:	68b9      	ldr	r1, [r7, #8]
 8003608:	f004 feea 	bl	80083e0 <HAL_UART_Transmit>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <SendCommandCheckTrueFalse+0x32>
		return SIM7600_ERROR;
 8003612:	2300      	movs	r3, #0
 8003614:	e00c      	b.n	8003630 <SendCommandCheckTrueFalse+0x4c>
	}
	else{
		return WaitForResponceTrueFalse(_sim, responceTrue, responceFalse, timeout, clear_buffer);
 8003616:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800361a:	9302      	str	r3, [sp, #8]
 800361c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003620:	e9cd 2300 	strd	r2, r3, [sp]
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f7ff ff49 	bl	80034c0 <WaitForResponceTrueFalse>
 800362e:	4603      	mov	r3, r0
	}
}
 8003630:	4618      	mov	r0, r3
 8003632:	3718      	adds	r7, #24
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <SIMInit>:

// Init module
int SIMInit(sim7600_t *_sim, UART_HandleTypeDef *huart, DMA_HandleTypeDef *hdma, uint16_t PowerPin, GPIO_TypeDef *PowerPort, uint16_t ResetPin, GPIO_TypeDef *ResetPort, uint16_t StatusPin, GPIO_TypeDef *StatusPort){
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
 8003644:	807b      	strh	r3, [r7, #2]
	_sim->hardware.huart = huart;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	601a      	str	r2, [r3, #0]
	_sim->hardware.hdma = hdma;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	605a      	str	r2, [r3, #4]
// Power pin
	_sim->hardware.PowerPin = PowerPin;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	887a      	ldrh	r2, [r7, #2]
 8003656:	811a      	strh	r2, [r3, #8]
	_sim->hardware.PowerPort = PowerPort;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	60da      	str	r2, [r3, #12]
// Reset Pin
	_sim->hardware.ResetPin = ResetPin;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8bba      	ldrh	r2, [r7, #28]
 8003662:	821a      	strh	r2, [r3, #16]
	_sim->hardware.ResetPort = ResetPort;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6a3a      	ldr	r2, [r7, #32]
 8003668:	615a      	str	r2, [r3, #20]

// Status Pin
	_sim->hardware.StatusPin = StatusPin;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800366e:	831a      	strh	r2, [r3, #24]
	_sim->hardware.StatusPort = StatusPort;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003674:	61da      	str	r2, [r3, #28]

	HAL_UARTEx_ReceiveToIdle_DMA(_sim->hardware.huart, (uint8_t *)_sim->buffer, SIM_RX_BUFF_SIZE);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6818      	ldr	r0, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	3390      	adds	r3, #144	@ 0x90
 800367e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003682:	4619      	mov	r1, r3
 8003684:	f004 ffdb 	bl	800863e <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(_sim->hardware.hdma, DMA_IT_HT);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0208 	bic.w	r2, r2, #8
 800369a:	601a      	str	r2, [r3, #0]

	return StartModuleService(_sim);
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 f89d 	bl	80037dc <StartModuleService>
 80036a2:	4603      	mov	r3, r0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <PowerOn>:

// When call this function, It'll power on module
int PowerOn(sim7600_t *_sim){
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
#ifdef SIM_Debug
	strcpy(_sim->response,"POWER ON");
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80036ba:	4912      	ldr	r1, [pc, #72]	@ (8003704 <PowerOn+0x58>)
 80036bc:	461a      	mov	r2, r3
 80036be:	460b      	mov	r3, r1
 80036c0:	cb03      	ldmia	r3!, {r0, r1}
 80036c2:	6010      	str	r0, [r2, #0]
 80036c4:	6051      	str	r1, [r2, #4]
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	7213      	strb	r3, [r2, #8]
#endif
	HAL_GPIO_WritePin(_sim->hardware.PowerPort, _sim->hardware.PowerPin, GPIO_PIN_SET);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68d8      	ldr	r0, [r3, #12]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	891b      	ldrh	r3, [r3, #8]
 80036d2:	2201      	movs	r2, #1
 80036d4:	4619      	mov	r1, r3
 80036d6:	f002 f88f 	bl	80057f8 <HAL_GPIO_WritePin>
	SIM_Delay(600);
 80036da:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80036de:	f001 f99f 	bl	8004a20 <HAL_Delay>
	HAL_GPIO_WritePin(_sim->hardware.PowerPort, _sim->hardware.PowerPin, GPIO_PIN_RESET);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68d8      	ldr	r0, [r3, #12]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	891b      	ldrh	r3, [r3, #8]
 80036ea:	2200      	movs	r2, #0
 80036ec:	4619      	mov	r1, r3
 80036ee:	f002 f883 	bl	80057f8 <HAL_GPIO_WritePin>
	SIM_Delay(1000);
 80036f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80036f6:	f001 f993 	bl	8004a20 <HAL_Delay>
	return SIM7600_OK;
 80036fa:	2301      	movs	r3, #1
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	0800eb38 	.word	0x0800eb38

08003708 <ResetModule>:

// When call this function, It will pull high Module's reset pin and pull low
// to reset module.
int ResetModule(sim7600_t *_sim){
 8003708:	b5b0      	push	{r4, r5, r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af02      	add	r7, sp, #8
 800370e:	6078      	str	r0, [r7, #4]
#ifdef SIM_Debug
	strcpy(_sim->response,"RESET MODULE");
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003716:	4a2d      	ldr	r2, [pc, #180]	@ (80037cc <ResetModule+0xc4>)
 8003718:	461c      	mov	r4, r3
 800371a:	4613      	mov	r3, r2
 800371c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800371e:	6020      	str	r0, [r4, #0]
 8003720:	6061      	str	r1, [r4, #4]
 8003722:	60a2      	str	r2, [r4, #8]
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	7323      	strb	r3, [r4, #12]
#endif
	HAL_GPIO_WritePin(_sim->hardware.ResetPort, _sim->hardware.ResetPin, GPIO_PIN_SET);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6958      	ldr	r0, [r3, #20]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	8a1b      	ldrh	r3, [r3, #16]
 8003730:	2201      	movs	r2, #1
 8003732:	4619      	mov	r1, r3
 8003734:	f002 f860 	bl	80057f8 <HAL_GPIO_WritePin>
	SIM_Delay(300);
 8003738:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800373c:	f001 f970 	bl	8004a20 <HAL_Delay>
	HAL_GPIO_WritePin(_sim->hardware.ResetPort, _sim->hardware.ResetPin, GPIO_PIN_RESET);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6958      	ldr	r0, [r3, #20]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	8a1b      	ldrh	r3, [r3, #16]
 8003748:	2200      	movs	r2, #0
 800374a:	4619      	mov	r1, r3
 800374c:	f002 f854 	bl	80057f8 <HAL_GPIO_WritePin>

	while(WaitForResponse(_sim, "PB DONE", 5000, 1) == -1){
 8003750:	e012      	b.n	8003778 <ResetModule+0x70>
#ifdef SIM_Debug
		strcpy(_sim->response,"WAIT FOR MODULE READY");
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003758:	4a1d      	ldr	r2, [pc, #116]	@ (80037d0 <ResetModule+0xc8>)
 800375a:	461d      	mov	r5, r3
 800375c:	4614      	mov	r4, r2
 800375e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003760:	6028      	str	r0, [r5, #0]
 8003762:	6069      	str	r1, [r5, #4]
 8003764:	60aa      	str	r2, [r5, #8]
 8003766:	60eb      	str	r3, [r5, #12]
 8003768:	6820      	ldr	r0, [r4, #0]
 800376a:	6128      	str	r0, [r5, #16]
 800376c:	88a3      	ldrh	r3, [r4, #4]
 800376e:	82ab      	strh	r3, [r5, #20]
#endif
		SIM_Delay(1000);
 8003770:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003774:	f001 f954 	bl	8004a20 <HAL_Delay>
	while(WaitForResponse(_sim, "PB DONE", 5000, 1) == -1){
 8003778:	2301      	movs	r3, #1
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003780:	f04f 0300 	mov.w	r3, #0
 8003784:	4913      	ldr	r1, [pc, #76]	@ (80037d4 <ResetModule+0xcc>)
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7ff fe53 	bl	8003432 <WaitForResponse>
 800378c:	4603      	mov	r3, r0
 800378e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003792:	d0de      	beq.n	8003752 <ResetModule+0x4a>
	}

#ifdef SIM_Debug
	strcpy(_sim->response,"RESET MODULE OK");
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800379a:	4a0f      	ldr	r2, [pc, #60]	@ (80037d8 <ResetModule+0xd0>)
 800379c:	461c      	mov	r4, r3
 800379e:	4615      	mov	r5, r2
 80037a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037a2:	6020      	str	r0, [r4, #0]
 80037a4:	6061      	str	r1, [r4, #4]
 80037a6:	60a2      	str	r2, [r4, #8]
 80037a8:	60e3      	str	r3, [r4, #12]
	++_sim->SIMResetCount;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f8d3 3290 	ldr.w	r3, [r3, #656]	@ 0x290
 80037b0:	1c5a      	adds	r2, r3, #1
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
#endif
	SIM_Delay(2000);
 80037b8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80037bc:	f001 f930 	bl	8004a20 <HAL_Delay>
	return SIM7600_OK;
 80037c0:	2301      	movs	r3, #1
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bdb0      	pop	{r4, r5, r7, pc}
 80037ca:	bf00      	nop
 80037cc:	0800eb44 	.word	0x0800eb44
 80037d0:	0800eb54 	.word	0x0800eb54
 80037d4:	0800eb6c 	.word	0x0800eb6c
 80037d8:	0800eb74 	.word	0x0800eb74

080037dc <StartModuleService>:

int StartModuleService(sim7600_t *_sim){
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]

	if(PowerOn(_sim) == SIM7600_OK){
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7ff ff61 	bl	80036ac <PowerOn>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d110      	bne.n	8003812 <StartModuleService+0x36>
		if(ResetModule(_sim) == SIM7600_OK){
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f7ff ff89 	bl	8003708 <ResetModule>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d104      	bne.n	8003806 <StartModuleService+0x2a>
			_sim->ModulePower = 1;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2020 	strb.w	r2, [r3, #32]
 8003804:	e005      	b.n	8003812 <StartModuleService+0x36>
		}
		else{
			_sim->ModulePower = 0;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2020 	strb.w	r2, [r3, #32]
			return SIM7600_ERROR;
 800380e:	2300      	movs	r3, #0
 8003810:	e013      	b.n	800383a <StartModuleService+0x5e>
		}
	}

	if(ConnectToModule(_sim) == SIM7600_OK){
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f816 	bl	8003844 <ConnectToModule>
 8003818:	4603      	mov	r3, r0
 800381a:	2b01      	cmp	r3, #1
 800381c:	d108      	bne.n	8003830 <StartModuleService+0x54>
		_sim->ModuleConnect = 1;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	else{
		_sim->ModuleConnect = 0;
		return SIM7600_ERROR;
	}

	CheckSimConnect(_sim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f88e 	bl	8003948 <CheckSimConnect>
	return SIM7600_OK;
 800382c:	2301      	movs	r3, #1
 800382e:	e004      	b.n	800383a <StartModuleService+0x5e>
		_sim->ModuleConnect = 0;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		return SIM7600_ERROR;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
	...

08003844 <ConnectToModule>:

// When call this function, It'll send "AT" command to module
// If connect to module complete, It'll responce "OK"
int ConnectToModule(sim7600_t *_sim){
 8003844:	b5b0      	push	{r4, r5, r7, lr}
 8003846:	b088      	sub	sp, #32
 8003848:	af04      	add	r7, sp, #16
 800384a:	6078      	str	r0, [r7, #4]
//	Send AT
	int Check = 0;
 800384c:	2300      	movs	r3, #0
 800384e:	60fb      	str	r3, [r7, #12]
	while(SendCommand(_sim, SIM_AT, SIM_OK, 1000, 1) == -1){
 8003850:	e017      	b.n	8003882 <ConnectToModule+0x3e>
		++Check;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	3301      	adds	r3, #1
 8003856:	60fb      	str	r3, [r7, #12]
		if(Check > 30){
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2b1e      	cmp	r3, #30
 800385c:	dd11      	ble.n	8003882 <ConnectToModule+0x3e>
#ifdef SIM_Debug
			strcpy(_sim->response,"Send AT error");
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003864:	4a31      	ldr	r2, [pc, #196]	@ (800392c <ConnectToModule+0xe8>)
 8003866:	461c      	mov	r4, r3
 8003868:	4613      	mov	r3, r2
 800386a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800386c:	6020      	str	r0, [r4, #0]
 800386e:	6061      	str	r1, [r4, #4]
 8003870:	60a2      	str	r2, [r4, #8]
 8003872:	881b      	ldrh	r3, [r3, #0]
 8003874:	81a3      	strh	r3, [r4, #12]
#endif
			_sim->ModuleConnect = 0;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			return SIM7600_ERROR;
 800387e:	2300      	movs	r3, #0
 8003880:	e050      	b.n	8003924 <ConnectToModule+0xe0>
	while(SendCommand(_sim, SIM_AT, SIM_OK, 1000, 1) == -1){
 8003882:	2301      	movs	r3, #1
 8003884:	9302      	str	r3, [sp, #8]
 8003886:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800388a:	f04f 0300 	mov.w	r3, #0
 800388e:	e9cd 2300 	strd	r2, r3, [sp]
 8003892:	4a27      	ldr	r2, [pc, #156]	@ (8003930 <ConnectToModule+0xec>)
 8003894:	4927      	ldr	r1, [pc, #156]	@ (8003934 <ConnectToModule+0xf0>)
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7ff fe7e 	bl	8003598 <SendCommand>
 800389c:	4603      	mov	r3, r0
 800389e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a2:	d0d6      	beq.n	8003852 <ConnectToModule+0xe>
		}
	}
#ifdef SIM_Debug
	strcpy(_sim->response,"Send AT OK");
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80038aa:	4923      	ldr	r1, [pc, #140]	@ (8003938 <ConnectToModule+0xf4>)
 80038ac:	461a      	mov	r2, r3
 80038ae:	460b      	mov	r3, r1
 80038b0:	cb03      	ldmia	r3!, {r0, r1}
 80038b2:	6010      	str	r0, [r2, #0]
 80038b4:	6051      	str	r1, [r2, #4]
 80038b6:	8819      	ldrh	r1, [r3, #0]
 80038b8:	789b      	ldrb	r3, [r3, #2]
 80038ba:	8111      	strh	r1, [r2, #8]
 80038bc:	7293      	strb	r3, [r2, #10]
#endif

// Send ATE0
	if(SendCommand(_sim, SIM_ATE0, SIM_OK, 1000, 1) != -1){
 80038be:	2301      	movs	r3, #1
 80038c0:	9302      	str	r3, [sp, #8]
 80038c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80038c6:	f04f 0300 	mov.w	r3, #0
 80038ca:	e9cd 2300 	strd	r2, r3, [sp]
 80038ce:	4a18      	ldr	r2, [pc, #96]	@ (8003930 <ConnectToModule+0xec>)
 80038d0:	491a      	ldr	r1, [pc, #104]	@ (800393c <ConnectToModule+0xf8>)
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7ff fe60 	bl	8003598 <SendCommand>
 80038d8:	4603      	mov	r3, r0
 80038da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038de:	d011      	beq.n	8003904 <ConnectToModule+0xc0>
#ifdef SIM_Debug
		strcpy(_sim->response,"Send ATE0 OK");
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80038e6:	4a16      	ldr	r2, [pc, #88]	@ (8003940 <ConnectToModule+0xfc>)
 80038e8:	461c      	mov	r4, r3
 80038ea:	4613      	mov	r3, r2
 80038ec:	cb07      	ldmia	r3!, {r0, r1, r2}
 80038ee:	6020      	str	r0, [r4, #0]
 80038f0:	6061      	str	r1, [r4, #4]
 80038f2:	60a2      	str	r2, [r4, #8]
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	7323      	strb	r3, [r4, #12]
		strcpy(_sim->response,"Send ATE0 error");
#endif
		_sim->ModuleConnect = 0;
		return SIM7600_ERROR;
	}
	_sim->ModuleConnect = 1;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	return SIM7600_OK;
 8003900:	2301      	movs	r3, #1
 8003902:	e00f      	b.n	8003924 <ConnectToModule+0xe0>
		strcpy(_sim->response,"Send ATE0 error");
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800390a:	4a0e      	ldr	r2, [pc, #56]	@ (8003944 <ConnectToModule+0x100>)
 800390c:	461c      	mov	r4, r3
 800390e:	4615      	mov	r5, r2
 8003910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003912:	6020      	str	r0, [r4, #0]
 8003914:	6061      	str	r1, [r4, #4]
 8003916:	60a2      	str	r2, [r4, #8]
 8003918:	60e3      	str	r3, [r4, #12]
		_sim->ModuleConnect = 0;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		return SIM7600_ERROR;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bdb0      	pop	{r4, r5, r7, pc}
 800392c:	0800eb84 	.word	0x0800eb84
 8003930:	0800eb94 	.word	0x0800eb94
 8003934:	0800eb9c 	.word	0x0800eb9c
 8003938:	0800eba4 	.word	0x0800eba4
 800393c:	0800ebb0 	.word	0x0800ebb0
 8003940:	0800ebb8 	.word	0x0800ebb8
 8003944:	0800ebc8 	.word	0x0800ebc8

08003948 <CheckSimConnect>:

// This function'll check the sim card connection.
int CheckSimConnect(sim7600_t *_sim){
 8003948:	b590      	push	{r4, r7, lr}
 800394a:	b087      	sub	sp, #28
 800394c:	af04      	add	r7, sp, #16
 800394e:	6078      	str	r0, [r7, #4]
//		strcpy(_sim->response,"SETUP HOTSWAP LEVEL ERROR");
//#endif
//		return SIM7600_ERROR;
//	}
//	Check SIM connect
	if(SendCommand(_sim, "AT+CPIN?\r\n", "+CPIN: READY", 1000, 1) == -1){
 8003950:	2301      	movs	r3, #1
 8003952:	9302      	str	r3, [sp, #8]
 8003954:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003958:	f04f 0300 	mov.w	r3, #0
 800395c:	e9cd 2300 	strd	r2, r3, [sp]
 8003960:	4a18      	ldr	r2, [pc, #96]	@ (80039c4 <CheckSimConnect+0x7c>)
 8003962:	4919      	ldr	r1, [pc, #100]	@ (80039c8 <CheckSimConnect+0x80>)
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f7ff fe17 	bl	8003598 <SendCommand>
 800396a:	4603      	mov	r3, r0
 800396c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003970:	d10f      	bne.n	8003992 <CheckSimConnect+0x4a>
#ifdef SIM_Debug
		strcpy(_sim->response,"NO SIM");
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003978:	4a14      	ldr	r2, [pc, #80]	@ (80039cc <CheckSimConnect+0x84>)
 800397a:	6810      	ldr	r0, [r2, #0]
 800397c:	6018      	str	r0, [r3, #0]
 800397e:	8891      	ldrh	r1, [r2, #4]
 8003980:	7992      	ldrb	r2, [r2, #6]
 8003982:	8099      	strh	r1, [r3, #4]
 8003984:	719a      	strb	r2, [r3, #6]
#endif
		_sim->SimConnect = 0;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		return SIM7600_ERROR;
 800398e:	2300      	movs	r3, #0
 8003990:	e013      	b.n	80039ba <CheckSimConnect+0x72>
	}

#ifdef SIM_Debug
	strcpy(_sim->response,"SIM CONNECTED");
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003998:	4a0d      	ldr	r2, [pc, #52]	@ (80039d0 <CheckSimConnect+0x88>)
 800399a:	461c      	mov	r4, r3
 800399c:	4613      	mov	r3, r2
 800399e:	cb07      	ldmia	r3!, {r0, r1, r2}
 80039a0:	6020      	str	r0, [r4, #0]
 80039a2:	6061      	str	r1, [r4, #4]
 80039a4:	60a2      	str	r2, [r4, #8]
 80039a6:	881b      	ldrh	r3, [r3, #0]
 80039a8:	81a3      	strh	r3, [r4, #12]
#endif

	GetPhoneNumber(_sim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f812 	bl	80039d4 <GetPhoneNumber>

	_sim->SimConnect = 1;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	return SIM7600_OK;
 80039b8:	2301      	movs	r3, #1
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd90      	pop	{r4, r7, pc}
 80039c2:	bf00      	nop
 80039c4:	0800ebd8 	.word	0x0800ebd8
 80039c8:	0800ebe8 	.word	0x0800ebe8
 80039cc:	0800ebf4 	.word	0x0800ebf4
 80039d0:	0800ebfc 	.word	0x0800ebfc

080039d4 <GetPhoneNumber>:

// Get SIMCardPhoneNumber
int GetPhoneNumber(sim7600_t *_sim){
 80039d4:	b5b0      	push	{r4, r5, r7, lr}
 80039d6:	b09c      	sub	sp, #112	@ 0x70
 80039d8:	af04      	add	r7, sp, #16
 80039da:	6078      	str	r0, [r7, #4]
	int foundRes = SendCommand(_sim, "AT+CNUM\r\n", "+CNUM:", 2000, 0);
 80039dc:	2300      	movs	r3, #0
 80039de:	9302      	str	r3, [sp, #8]
 80039e0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80039e4:	f04f 0300 	mov.w	r3, #0
 80039e8:	e9cd 2300 	strd	r2, r3, [sp]
 80039ec:	4a4f      	ldr	r2, [pc, #316]	@ (8003b2c <GetPhoneNumber+0x158>)
 80039ee:	4950      	ldr	r1, [pc, #320]	@ (8003b30 <GetPhoneNumber+0x15c>)
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f7ff fdd1 	bl	8003598 <SendCommand>
 80039f6:	64b8      	str	r0, [r7, #72]	@ 0x48
	if(foundRes == -1){
 80039f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039fe:	d116      	bne.n	8003a2e <GetPhoneNumber+0x5a>
#ifdef SIM_Debug
		strcpy(_sim->response,"Get Phone Number ERROR");
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003a06:	4a4b      	ldr	r2, [pc, #300]	@ (8003b34 <GetPhoneNumber+0x160>)
 8003a08:	461c      	mov	r4, r3
 8003a0a:	4615      	mov	r5, r2
 8003a0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a0e:	6020      	str	r0, [r4, #0]
 8003a10:	6061      	str	r1, [r4, #4]
 8003a12:	60a2      	str	r2, [r4, #8]
 8003a14:	60e3      	str	r3, [r4, #12]
 8003a16:	6828      	ldr	r0, [r5, #0]
 8003a18:	6120      	str	r0, [r4, #16]
 8003a1a:	88ab      	ldrh	r3, [r5, #4]
 8003a1c:	79aa      	ldrb	r2, [r5, #6]
 8003a1e:	82a3      	strh	r3, [r4, #20]
 8003a20:	4613      	mov	r3, r2
 8003a22:	75a3      	strb	r3, [r4, #22]
#endif
		ClearBuffer(_sim);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7ff fce6 	bl	80033f6 <ClearBuffer>
		return SIM7600_ERROR;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	e07a      	b.n	8003b24 <GetPhoneNumber+0x150>
	}

	char DataResponseStr[60];
	int count = 0;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	65fb      	str	r3, [r7, #92]	@ 0x5c
	for(int i = foundRes; i <= SIM_RX_BUFF_SIZE; ++i){
 8003a32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a34:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a36:	e017      	b.n	8003a68 <GetPhoneNumber+0x94>
		if(_sim->buffer[i] == '\r') break;
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a3c:	4413      	add	r3, r2
 8003a3e:	3390      	adds	r3, #144	@ 0x90
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	2b0d      	cmp	r3, #13
 8003a44:	d015      	beq.n	8003a72 <GetPhoneNumber+0x9e>
		DataResponseStr[count] = _sim->buffer[i];
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a4a:	4413      	add	r3, r2
 8003a4c:	3390      	adds	r3, #144	@ 0x90
 8003a4e:	7819      	ldrb	r1, [r3, #0]
 8003a50:	f107 020c 	add.w	r2, r7, #12
 8003a54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a56:	4413      	add	r3, r2
 8003a58:	460a      	mov	r2, r1
 8003a5a:	701a      	strb	r2, [r3, #0]
		++count;
 8003a5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a5e:	3301      	adds	r3, #1
 8003a60:	65fb      	str	r3, [r7, #92]	@ 0x5c
	for(int i = foundRes; i <= SIM_RX_BUFF_SIZE; ++i){
 8003a62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a64:	3301      	adds	r3, #1
 8003a66:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a6e:	dde3      	ble.n	8003a38 <GetPhoneNumber+0x64>
 8003a70:	e000      	b.n	8003a74 <GetPhoneNumber+0xa0>
		if(_sim->buffer[i] == '\r') break;
 8003a72:	bf00      	nop
	}
#ifdef SIM_Debug
	strcpy(_sim->DebugResponceStr, DataResponseStr);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f203 332a 	addw	r3, r3, #810	@ 0x32a
 8003a7a:	f107 020c 	add.w	r2, r7, #12
 8003a7e:	4611      	mov	r1, r2
 8003a80:	4618      	mov	r0, r3
 8003a82:	f006 ff9e 	bl	800a9c2 <strcpy>
#endif

	int AnalysisPointer = 0;
 8003a86:	2300      	movs	r3, #0
 8003a88:	657b      	str	r3, [r7, #84]	@ 0x54
	count = 0;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
	for(int i = AnalysisPointer; i <= 60; ++i){
 8003a8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a90:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a92:	e013      	b.n	8003abc <GetPhoneNumber+0xe8>
		if(DataResponseStr[i] == '\"') ++count;
 8003a94:	f107 020c 	add.w	r2, r7, #12
 8003a98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a9a:	4413      	add	r3, r2
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	2b22      	cmp	r3, #34	@ 0x22
 8003aa0:	d102      	bne.n	8003aa8 <GetPhoneNumber+0xd4>
 8003aa2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	65fb      	str	r3, [r7, #92]	@ 0x5c
		if(count == 3){
 8003aa8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003aaa:	2b03      	cmp	r3, #3
 8003aac:	d103      	bne.n	8003ab6 <GetPhoneNumber+0xe2>
			AnalysisPointer = i + 1;
 8003aae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	657b      	str	r3, [r7, #84]	@ 0x54
			break;
 8003ab4:	e005      	b.n	8003ac2 <GetPhoneNumber+0xee>
	for(int i = AnalysisPointer; i <= 60; ++i){
 8003ab6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ab8:	3301      	adds	r3, #1
 8003aba:	653b      	str	r3, [r7, #80]	@ 0x50
 8003abc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003abe:	2b3c      	cmp	r3, #60	@ 0x3c
 8003ac0:	dde8      	ble.n	8003a94 <GetPhoneNumber+0xc0>
		}
	}
	count = 0;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	65fb      	str	r3, [r7, #92]	@ 0x5c
	memset(_sim->PhoneNumber,0,strlen(_sim->PhoneNumber));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f103 042e 	add.w	r4, r3, #46	@ 0x2e
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	332e      	adds	r3, #46	@ 0x2e
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7fc fbcd 	bl	8000270 <strlen>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	461a      	mov	r2, r3
 8003ada:	2100      	movs	r1, #0
 8003adc:	4620      	mov	r0, r4
 8003ade:	f006 fede 	bl	800a89e <memset>

	for(int i = AnalysisPointer; i <= 60; ++i){
 8003ae2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ae4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ae6:	e017      	b.n	8003b18 <GetPhoneNumber+0x144>
		if(DataResponseStr[i] == '\"') break;
 8003ae8:	f107 020c 	add.w	r2, r7, #12
 8003aec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003aee:	4413      	add	r3, r2
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	2b22      	cmp	r3, #34	@ 0x22
 8003af4:	d014      	beq.n	8003b20 <GetPhoneNumber+0x14c>
		_sim->PhoneNumber[count] = DataResponseStr[i];
 8003af6:	f107 020c 	add.w	r2, r7, #12
 8003afa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003afc:	4413      	add	r3, r2
 8003afe:	7819      	ldrb	r1, [r3, #0]
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b04:	4413      	add	r3, r2
 8003b06:	332e      	adds	r3, #46	@ 0x2e
 8003b08:	460a      	mov	r2, r1
 8003b0a:	701a      	strb	r2, [r3, #0]
		++count;
 8003b0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b0e:	3301      	adds	r3, #1
 8003b10:	65fb      	str	r3, [r7, #92]	@ 0x5c
	for(int i = AnalysisPointer; i <= 60; ++i){
 8003b12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b14:	3301      	adds	r3, #1
 8003b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b1a:	2b3c      	cmp	r3, #60	@ 0x3c
 8003b1c:	dde4      	ble.n	8003ae8 <GetPhoneNumber+0x114>
 8003b1e:	e000      	b.n	8003b22 <GetPhoneNumber+0x14e>
		if(DataResponseStr[i] == '\"') break;
 8003b20:	bf00      	nop
	}

	return SIM7600_OK;
 8003b22:	2301      	movs	r3, #1
//	int DKD;
//	sscanf(DataResponseStr, "+CNUM: \"My Number\",\"%s\",%d", &_sim->PhoneNumber, DKD);
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3760      	adds	r7, #96	@ 0x60
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bdb0      	pop	{r4, r5, r7, pc}
 8003b2c:	0800ec0c 	.word	0x0800ec0c
 8003b30:	0800ec14 	.word	0x0800ec14
 8003b34:	0800ec20 	.word	0x0800ec20

08003b38 <dayOfWeek>:

int dayOfWeek(int day, int month, int year) {
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
    static int t[] = {0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4};
    if (month < 3) {
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	dc02      	bgt.n	8003b50 <dayOfWeek+0x18>
        year -= 1;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	607b      	str	r3, [r7, #4]
    }
    return (year + year / 4 - year / 100 + year / 400 + t[month - 1] + day) % 7;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	da00      	bge.n	8003b58 <dayOfWeek+0x20>
 8003b56:	3303      	adds	r3, #3
 8003b58:	109b      	asrs	r3, r3, #2
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	441a      	add	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4914      	ldr	r1, [pc, #80]	@ (8003bb4 <dayOfWeek+0x7c>)
 8003b64:	fb81 0103 	smull	r0, r1, r1, r3
 8003b68:	1149      	asrs	r1, r1, #5
 8003b6a:	17db      	asrs	r3, r3, #31
 8003b6c:	1a5b      	subs	r3, r3, r1
 8003b6e:	441a      	add	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4910      	ldr	r1, [pc, #64]	@ (8003bb4 <dayOfWeek+0x7c>)
 8003b74:	fb81 0103 	smull	r0, r1, r1, r3
 8003b78:	11c9      	asrs	r1, r1, #7
 8003b7a:	17db      	asrs	r3, r3, #31
 8003b7c:	1acb      	subs	r3, r1, r3
 8003b7e:	441a      	add	r2, r3
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	3b01      	subs	r3, #1
 8003b84:	490c      	ldr	r1, [pc, #48]	@ (8003bb8 <dayOfWeek+0x80>)
 8003b86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b8a:	441a      	add	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	441a      	add	r2, r3
 8003b90:	4b0a      	ldr	r3, [pc, #40]	@ (8003bbc <dayOfWeek+0x84>)
 8003b92:	fb83 1302 	smull	r1, r3, r3, r2
 8003b96:	4413      	add	r3, r2
 8003b98:	1099      	asrs	r1, r3, #2
 8003b9a:	17d3      	asrs	r3, r2, #31
 8003b9c:	1ac9      	subs	r1, r1, r3
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	00db      	lsls	r3, r3, #3
 8003ba2:	1a5b      	subs	r3, r3, r1
 8003ba4:	1ad1      	subs	r1, r2, r3
 8003ba6:	460b      	mov	r3, r1
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3714      	adds	r7, #20
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	51eb851f 	.word	0x51eb851f
 8003bb8:	20000008 	.word	0x20000008
 8003bbc:	92492493 	.word	0x92492493

08003bc0 <get_timezone_offset>:

int get_timezone_offset(float longitude) {
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	ed87 0a01 	vstr	s0, [r7, #4]
    return (int)round(longitude / 15.0);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7fc fcbc 	bl	8000548 <__aeabi_f2d>
 8003bd0:	f04f 0200 	mov.w	r2, #0
 8003bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8003c04 <get_timezone_offset+0x44>)
 8003bd6:	f7fc fe39 	bl	800084c <__aeabi_ddiv>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	460b      	mov	r3, r1
 8003bde:	ec43 2b17 	vmov	d7, r2, r3
 8003be2:	eeb0 0a47 	vmov.f32	s0, s14
 8003be6:	eef0 0a67 	vmov.f32	s1, s15
 8003bea:	f00a fe35 	bl	800e858 <round>
 8003bee:	ec53 2b10 	vmov	r2, r3, d0
 8003bf2:	4610      	mov	r0, r2
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	f7fc ffaf 	bl	8000b58 <__aeabi_d2iz>
 8003bfa:	4603      	mov	r3, r0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	402e0000 	.word	0x402e0000

08003c08 <GetLBS>:

// Get LBS
int GetLBS(sim7600_t *_sim){
 8003c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c0a:	b09f      	sub	sp, #124	@ 0x7c
 8003c0c:	af08      	add	r7, sp, #32
 8003c0e:	6078      	str	r0, [r7, #4]
	GetSignal(_sim);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 f933 	bl	8003e7c <GetSignal>
	if(_sim->Signal == 0){
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10c      	bne.n	8003c38 <GetLBS+0x30>
#ifdef SIM_Debug
		strcpy(_sim->response,"No Signal");
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003c24:	495c      	ldr	r1, [pc, #368]	@ (8003d98 <GetLBS+0x190>)
 8003c26:	461a      	mov	r2, r3
 8003c28:	460b      	mov	r3, r1
 8003c2a:	cb03      	ldmia	r3!, {r0, r1}
 8003c2c:	6010      	str	r0, [r2, #0]
 8003c2e:	6051      	str	r1, [r2, #4]
 8003c30:	881b      	ldrh	r3, [r3, #0]
 8003c32:	8113      	strh	r3, [r2, #8]
#endif
		return SIM7600_ERROR;
 8003c34:	2300      	movs	r3, #0
 8003c36:	e0ab      	b.n	8003d90 <GetLBS+0x188>
	}

	int foundRes = SendCommand(_sim, "AT+CLBS=4\r\n", "+CLBS:", 2000, 0);
 8003c38:	2300      	movs	r3, #0
 8003c3a:	9302      	str	r3, [sp, #8]
 8003c3c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003c40:	f04f 0300 	mov.w	r3, #0
 8003c44:	e9cd 2300 	strd	r2, r3, [sp]
 8003c48:	4a54      	ldr	r2, [pc, #336]	@ (8003d9c <GetLBS+0x194>)
 8003c4a:	4955      	ldr	r1, [pc, #340]	@ (8003da0 <GetLBS+0x198>)
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7ff fca3 	bl	8003598 <SendCommand>
 8003c52:	64f8      	str	r0, [r7, #76]	@ 0x4c
	if(foundRes == -1){
 8003c54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c5a:	d116      	bne.n	8003c8a <GetLBS+0x82>
#ifdef SIM_Debug
		strcpy(_sim->response,"Get LBS Location Error");
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003c62:	4a50      	ldr	r2, [pc, #320]	@ (8003da4 <GetLBS+0x19c>)
 8003c64:	461c      	mov	r4, r3
 8003c66:	4615      	mov	r5, r2
 8003c68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c6a:	6020      	str	r0, [r4, #0]
 8003c6c:	6061      	str	r1, [r4, #4]
 8003c6e:	60a2      	str	r2, [r4, #8]
 8003c70:	60e3      	str	r3, [r4, #12]
 8003c72:	6828      	ldr	r0, [r5, #0]
 8003c74:	6120      	str	r0, [r4, #16]
 8003c76:	88ab      	ldrh	r3, [r5, #4]
 8003c78:	79aa      	ldrb	r2, [r5, #6]
 8003c7a:	82a3      	strh	r3, [r4, #20]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	75a3      	strb	r3, [r4, #22]
#endif
		ClearBuffer(_sim);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7ff fbb8 	bl	80033f6 <ClearBuffer>
		return SIM7600_ERROR;
 8003c86:	2300      	movs	r3, #0
 8003c88:	e082      	b.n	8003d90 <GetLBS+0x188>
	}
	HAL_Delay(50);
 8003c8a:	2032      	movs	r0, #50	@ 0x32
 8003c8c:	f000 fec8 	bl	8004a20 <HAL_Delay>

	char DataResponseStr[60];
	int count = 0;
 8003c90:	2300      	movs	r3, #0
 8003c92:	657b      	str	r3, [r7, #84]	@ 0x54
	for(int i = foundRes; i <= SIM_RX_BUFF_SIZE; ++i){
 8003c94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c96:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c98:	e017      	b.n	8003cca <GetLBS+0xc2>
		if(_sim->buffer[i] == '\r') break;
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c9e:	4413      	add	r3, r2
 8003ca0:	3390      	adds	r3, #144	@ 0x90
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	2b0d      	cmp	r3, #13
 8003ca6:	d015      	beq.n	8003cd4 <GetLBS+0xcc>
		DataResponseStr[count] = _sim->buffer[i];
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cac:	4413      	add	r3, r2
 8003cae:	3390      	adds	r3, #144	@ 0x90
 8003cb0:	7819      	ldrb	r1, [r3, #0]
 8003cb2:	f107 0210 	add.w	r2, r7, #16
 8003cb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cb8:	4413      	add	r3, r2
 8003cba:	460a      	mov	r2, r1
 8003cbc:	701a      	strb	r2, [r3, #0]
		++count;
 8003cbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	657b      	str	r3, [r7, #84]	@ 0x54
	for(int i = foundRes; i <= SIM_RX_BUFF_SIZE; ++i){
 8003cc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	653b      	str	r3, [r7, #80]	@ 0x50
 8003cca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cd0:	dde3      	ble.n	8003c9a <GetLBS+0x92>
 8003cd2:	e000      	b.n	8003cd6 <GetLBS+0xce>
		if(_sim->buffer[i] == '\r') break;
 8003cd4:	bf00      	nop
	}
#ifdef SIM_Debug
	strcpy(_sim->DebugLBSResponceStr, DataResponseStr);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f203 3366 	addw	r3, r3, #870	@ 0x366
 8003cdc:	f107 0210 	add.w	r2, r7, #16
 8003ce0:	4611      	mov	r1, r2
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f006 fe6d 	bl	800a9c2 <strcpy>
#endif
	int DKD;
	sscanf(DataResponseStr, "+CLBS: 0,%f,%f,%d,%d/%d/%d,%d:%d:%d", &_sim->LBS_Loc.Latitude, &_sim->LBS_Loc.Longitude, &DKD, &_sim->LBS_Date.Year, &_sim->LBS_Date.Month, &_sim->LBS_Date.Date, &_sim->LBS_Date.Hour, &_sim->LBS_Date.Minute, &_sim->LBS_Date.Second);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f103 0c80 	add.w	ip, r3, #128	@ 0x80
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f103 0e84 	add.w	lr, r3, #132	@ 0x84
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	3370      	adds	r3, #112	@ 0x70
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	326c      	adds	r2, #108	@ 0x6c
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	3168      	adds	r1, #104	@ 0x68
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	3074      	adds	r0, #116	@ 0x74
 8003d04:	687c      	ldr	r4, [r7, #4]
 8003d06:	3478      	adds	r4, #120	@ 0x78
 8003d08:	687d      	ldr	r5, [r7, #4]
 8003d0a:	357c      	adds	r5, #124	@ 0x7c
 8003d0c:	f107 0610 	add.w	r6, r7, #16
 8003d10:	9506      	str	r5, [sp, #24]
 8003d12:	9405      	str	r4, [sp, #20]
 8003d14:	9004      	str	r0, [sp, #16]
 8003d16:	9103      	str	r1, [sp, #12]
 8003d18:	9202      	str	r2, [sp, #8]
 8003d1a:	9301      	str	r3, [sp, #4]
 8003d1c:	f107 030c 	add.w	r3, r7, #12
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	4673      	mov	r3, lr
 8003d24:	4662      	mov	r2, ip
 8003d26:	4920      	ldr	r1, [pc, #128]	@ (8003da8 <GetLBS+0x1a0>)
 8003d28:	4630      	mov	r0, r6
 8003d2a:	f006 fd49 	bl	800a7c0 <siscanf>
	_sim->LBS_Date.Day = dayOfWeek(_sim->LBS_Date.Date, _sim->LBS_Date.Month, _sim->LBS_Date.Year) + 1;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	f7ff fefc 	bl	8003b38 <dayOfWeek>
 8003d40:	4603      	mov	r3, r0
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	665a      	str	r2, [r3, #100]	@ 0x64
	_sim->LBS_Date.Year -= 2000;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d4c:	f5a3 62fa 	sub.w	r2, r3, #2000	@ 0x7d0
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	671a      	str	r2, [r3, #112]	@ 0x70
	_sim->LBS_Date.Hour += get_timezone_offset(_sim->LBS_Loc.Longitude);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 8003d5a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d5e:	f7ff ff2f 	bl	8003bc0 <get_timezone_offset>
 8003d62:	4602      	mov	r2, r0
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d68:	441a      	add	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	675a      	str	r2, [r3, #116]	@ 0x74

	ClearBuffer(_sim);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7ff fb41 	bl	80033f6 <ClearBuffer>
#ifdef SIM_Debug
		strcpy(_sim->response,"Get LBS Location OK");
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003d7a:	4a0c      	ldr	r2, [pc, #48]	@ (8003dac <GetLBS+0x1a4>)
 8003d7c:	461d      	mov	r5, r3
 8003d7e:	4614      	mov	r4, r2
 8003d80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d82:	6028      	str	r0, [r5, #0]
 8003d84:	6069      	str	r1, [r5, #4]
 8003d86:	60aa      	str	r2, [r5, #8]
 8003d88:	60eb      	str	r3, [r5, #12]
 8003d8a:	6820      	ldr	r0, [r4, #0]
 8003d8c:	6128      	str	r0, [r5, #16]
#endif

	return SIM7600_OK;
 8003d8e:	2301      	movs	r3, #1
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	375c      	adds	r7, #92	@ 0x5c
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d98:	0800ec38 	.word	0x0800ec38
 8003d9c:	0800ec44 	.word	0x0800ec44
 8003da0:	0800ec4c 	.word	0x0800ec4c
 8003da4:	0800ec58 	.word	0x0800ec58
 8003da8:	0800ec70 	.word	0x0800ec70
 8003dac:	0800ec94 	.word	0x0800ec94

08003db0 <GetRSSI>:

// Get RSSI
int GetRSSI(sim7600_t *_sim){
 8003db0:	b590      	push	{r4, r7, lr}
 8003db2:	b099      	sub	sp, #100	@ 0x64
 8003db4:	af04      	add	r7, sp, #16
 8003db6:	6078      	str	r0, [r7, #4]
	int foundRes = SendCommand(_sim, "AT+CSQ\r\n", "+CSQ:", 2000, 0);
 8003db8:	2300      	movs	r3, #0
 8003dba:	9302      	str	r3, [sp, #8]
 8003dbc:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003dc0:	f04f 0300 	mov.w	r3, #0
 8003dc4:	e9cd 2300 	strd	r2, r3, [sp]
 8003dc8:	4a28      	ldr	r2, [pc, #160]	@ (8003e6c <GetRSSI+0xbc>)
 8003dca:	4929      	ldr	r1, [pc, #164]	@ (8003e70 <GetRSSI+0xc0>)
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7ff fbe3 	bl	8003598 <SendCommand>
 8003dd2:	6478      	str	r0, [r7, #68]	@ 0x44
	if(foundRes == -1){
 8003dd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dda:	d112      	bne.n	8003e02 <GetRSSI+0x52>
#ifdef SIM_Debug
		strcpy(_sim->response,"Get RSSI Error");
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003de2:	4a24      	ldr	r2, [pc, #144]	@ (8003e74 <GetRSSI+0xc4>)
 8003de4:	461c      	mov	r4, r3
 8003de6:	4613      	mov	r3, r2
 8003de8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003dea:	6020      	str	r0, [r4, #0]
 8003dec:	6061      	str	r1, [r4, #4]
 8003dee:	60a2      	str	r2, [r4, #8]
 8003df0:	881a      	ldrh	r2, [r3, #0]
 8003df2:	789b      	ldrb	r3, [r3, #2]
 8003df4:	81a2      	strh	r2, [r4, #12]
 8003df6:	73a3      	strb	r3, [r4, #14]
#endif
		ClearBuffer(_sim);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f7ff fafc 	bl	80033f6 <ClearBuffer>
		return SIM7600_ERROR;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	e030      	b.n	8003e64 <GetRSSI+0xb4>
	}

	char DataResponseStr[50];
	int count = 0;
 8003e02:	2300      	movs	r3, #0
 8003e04:	64fb      	str	r3, [r7, #76]	@ 0x4c
	for(int i = foundRes; i <= SIM_RX_BUFF_SIZE; ++i){
 8003e06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e0a:	e017      	b.n	8003e3c <GetRSSI+0x8c>
		if(_sim->buffer[i] == '\r') break;
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e10:	4413      	add	r3, r2
 8003e12:	3390      	adds	r3, #144	@ 0x90
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	2b0d      	cmp	r3, #13
 8003e18:	d015      	beq.n	8003e46 <GetRSSI+0x96>
		DataResponseStr[count] = _sim->buffer[i];
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e1e:	4413      	add	r3, r2
 8003e20:	3390      	adds	r3, #144	@ 0x90
 8003e22:	7819      	ldrb	r1, [r3, #0]
 8003e24:	f107 0210 	add.w	r2, r7, #16
 8003e28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e2a:	4413      	add	r3, r2
 8003e2c:	460a      	mov	r2, r1
 8003e2e:	701a      	strb	r2, [r3, #0]
		++count;
 8003e30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e32:	3301      	adds	r3, #1
 8003e34:	64fb      	str	r3, [r7, #76]	@ 0x4c
	for(int i = foundRes; i <= SIM_RX_BUFF_SIZE; ++i){
 8003e36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e38:	3301      	adds	r3, #1
 8003e3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e42:	dde3      	ble.n	8003e0c <GetRSSI+0x5c>
 8003e44:	e000      	b.n	8003e48 <GetRSSI+0x98>
		if(_sim->buffer[i] == '\r') break;
 8003e46:	bf00      	nop
	}

	int Ber;
	sscanf(DataResponseStr, "+CSQ: %d,%d", &_sim->RSSI, &Ber);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8003e4e:	f107 030c 	add.w	r3, r7, #12
 8003e52:	f107 0010 	add.w	r0, r7, #16
 8003e56:	4908      	ldr	r1, [pc, #32]	@ (8003e78 <GetRSSI+0xc8>)
 8003e58:	f006 fcb2 	bl	800a7c0 <siscanf>
	ClearBuffer(_sim);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7ff faca 	bl	80033f6 <ClearBuffer>
#ifdef SIM_Debug
//		strcpy(_sim->response,"Get RSSI OK");
#endif

	return SIM7600_OK;
 8003e62:	2301      	movs	r3, #1
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3754      	adds	r7, #84	@ 0x54
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd90      	pop	{r4, r7, pc}
 8003e6c:	0800eca8 	.word	0x0800eca8
 8003e70:	0800ecb0 	.word	0x0800ecb0
 8003e74:	0800ecbc 	.word	0x0800ecbc
 8003e78:	0800eccc 	.word	0x0800eccc

08003e7c <GetSignal>:

int GetSignal(sim7600_t *_sim){
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
	if(GetRSSI(_sim) == SIM7600_OK){
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f7ff ff93 	bl	8003db0 <GetRSSI>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	f040 809c 	bne.w	8003fca <GetSignal+0x14e>
		if((_sim->RSSI == 99) || (_sim->RSSI == 199) || (_sim->RSSI == 0) || (_sim->RSSI == 1) || (_sim->RSSI == 100) || (_sim->RSSI == 101)){
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e96:	2b63      	cmp	r3, #99	@ 0x63
 8003e98:	d013      	beq.n	8003ec2 <GetSignal+0x46>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e9e:	2bc7      	cmp	r3, #199	@ 0xc7
 8003ea0:	d00f      	beq.n	8003ec2 <GetSignal+0x46>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00b      	beq.n	8003ec2 <GetSignal+0x46>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d007      	beq.n	8003ec2 <GetSignal+0x46>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eb6:	2b64      	cmp	r3, #100	@ 0x64
 8003eb8:	d003      	beq.n	8003ec2 <GetSignal+0x46>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ebe:	2b65      	cmp	r3, #101	@ 0x65
 8003ec0:	d107      	bne.n	8003ed2 <GetSignal+0x56>
			_sim->Signal = 0;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	625a      	str	r2, [r3, #36]	@ 0x24
			_sim->NetTech = 0;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8003ed0:	e079      	b.n	8003fc6 <GetSignal+0x14a>
		}
		else if((_sim->RSSI >= 2) && (_sim->RSSI <= 31)){
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	dd38      	ble.n	8003f4c <GetSignal+0xd0>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ede:	2b1f      	cmp	r3, #31
 8003ee0:	dc34      	bgt.n	8003f4c <GetSignal+0xd0>
			_sim->NetTech = 4;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2204      	movs	r2, #4
 8003ee6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			if((_sim->RSSI >= 2) && (_sim->RSSI <= 7)) _sim->Signal = 1;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	dd07      	ble.n	8003f02 <GetSignal+0x86>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef6:	2b07      	cmp	r3, #7
 8003ef8:	dc03      	bgt.n	8003f02 <GetSignal+0x86>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	625a      	str	r2, [r3, #36]	@ 0x24
 8003f00:	e023      	b.n	8003f4a <GetSignal+0xce>
			else if((_sim->RSSI >= 8) && (_sim->RSSI <= 15)) _sim->Signal = 2;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f06:	2b07      	cmp	r3, #7
 8003f08:	dd07      	ble.n	8003f1a <GetSignal+0x9e>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0e:	2b0f      	cmp	r3, #15
 8003f10:	dc03      	bgt.n	8003f1a <GetSignal+0x9e>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2202      	movs	r2, #2
 8003f16:	625a      	str	r2, [r3, #36]	@ 0x24
 8003f18:	e017      	b.n	8003f4a <GetSignal+0xce>
			else if((_sim->RSSI >= 16) && (_sim->RSSI <= 23)) _sim->Signal = 3;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f1e:	2b0f      	cmp	r3, #15
 8003f20:	dd07      	ble.n	8003f32 <GetSignal+0xb6>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f26:	2b17      	cmp	r3, #23
 8003f28:	dc03      	bgt.n	8003f32 <GetSignal+0xb6>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2203      	movs	r2, #3
 8003f2e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003f30:	e00b      	b.n	8003f4a <GetSignal+0xce>
			else if((_sim->RSSI >= 24) && (_sim->RSSI <= 31)) _sim->Signal = 4;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f36:	2b17      	cmp	r3, #23
 8003f38:	dd44      	ble.n	8003fc4 <GetSignal+0x148>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f3e:	2b1f      	cmp	r3, #31
 8003f40:	dc40      	bgt.n	8003fc4 <GetSignal+0x148>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2204      	movs	r2, #4
 8003f46:	625a      	str	r2, [r3, #36]	@ 0x24
			if((_sim->RSSI >= 2) && (_sim->RSSI <= 7)) _sim->Signal = 1;
 8003f48:	e03c      	b.n	8003fc4 <GetSignal+0x148>
 8003f4a:	e03b      	b.n	8003fc4 <GetSignal+0x148>
		}
		else if((_sim->RSSI >= 102) && (_sim->RSSI <= 191)){
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f50:	2b65      	cmp	r3, #101	@ 0x65
 8003f52:	dd38      	ble.n	8003fc6 <GetSignal+0x14a>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f58:	2bbf      	cmp	r3, #191	@ 0xbf
 8003f5a:	dc34      	bgt.n	8003fc6 <GetSignal+0x14a>
			_sim->NetTech = 3;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2203      	movs	r2, #3
 8003f60:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			if((_sim->RSSI >= 102) && (_sim->RSSI <= 122)) _sim->Signal = 1;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f68:	2b65      	cmp	r3, #101	@ 0x65
 8003f6a:	dd07      	ble.n	8003f7c <GetSignal+0x100>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f70:	2b7a      	cmp	r3, #122	@ 0x7a
 8003f72:	dc03      	bgt.n	8003f7c <GetSignal+0x100>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	625a      	str	r2, [r3, #36]	@ 0x24
 8003f7a:	e024      	b.n	8003fc6 <GetSignal+0x14a>
			else if((_sim->RSSI >= 123) && (_sim->RSSI <= 145)) _sim->Signal = 2;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f80:	2b7a      	cmp	r3, #122	@ 0x7a
 8003f82:	dd07      	ble.n	8003f94 <GetSignal+0x118>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f88:	2b91      	cmp	r3, #145	@ 0x91
 8003f8a:	dc03      	bgt.n	8003f94 <GetSignal+0x118>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2202      	movs	r2, #2
 8003f90:	625a      	str	r2, [r3, #36]	@ 0x24
 8003f92:	e018      	b.n	8003fc6 <GetSignal+0x14a>
			else if((_sim->RSSI >= 146) && (_sim->RSSI <= 168)) _sim->Signal = 3;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f98:	2b91      	cmp	r3, #145	@ 0x91
 8003f9a:	dd07      	ble.n	8003fac <GetSignal+0x130>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa0:	2ba8      	cmp	r3, #168	@ 0xa8
 8003fa2:	dc03      	bgt.n	8003fac <GetSignal+0x130>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2203      	movs	r2, #3
 8003fa8:	625a      	str	r2, [r3, #36]	@ 0x24
 8003faa:	e00c      	b.n	8003fc6 <GetSignal+0x14a>
			else if((_sim->RSSI >= 169) && (_sim->RSSI <= 191)) _sim->Signal = 4;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb0:	2ba8      	cmp	r3, #168	@ 0xa8
 8003fb2:	dd08      	ble.n	8003fc6 <GetSignal+0x14a>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb8:	2bbf      	cmp	r3, #191	@ 0xbf
 8003fba:	dc04      	bgt.n	8003fc6 <GetSignal+0x14a>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2204      	movs	r2, #4
 8003fc0:	625a      	str	r2, [r3, #36]	@ 0x24
 8003fc2:	e000      	b.n	8003fc6 <GetSignal+0x14a>
			if((_sim->RSSI >= 2) && (_sim->RSSI <= 7)) _sim->Signal = 1;
 8003fc4:	bf00      	nop
		}
		return SIM7600_OK;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e000      	b.n	8003fcc <GetSignal+0x150>
	}
	return SIM7600_ERROR;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3708      	adds	r7, #8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <http_get>:

// HTTP GET FUNCTION
int http_get(sim7600_t *_sim, char *url, char *response, int *httpCode){
 8003fd4:	b5b0      	push	{r4, r5, r7, lr}
 8003fd6:	b0dc      	sub	sp, #368	@ 0x170
 8003fd8:	af04      	add	r7, sp, #16
 8003fda:	f507 74b0 	add.w	r4, r7, #352	@ 0x160
 8003fde:	f5a4 74aa 	sub.w	r4, r4, #340	@ 0x154
 8003fe2:	6020      	str	r0, [r4, #0]
 8003fe4:	f507 70b0 	add.w	r0, r7, #352	@ 0x160
 8003fe8:	f5a0 70ac 	sub.w	r0, r0, #344	@ 0x158
 8003fec:	6001      	str	r1, [r0, #0]
 8003fee:	f507 71b0 	add.w	r1, r7, #352	@ 0x160
 8003ff2:	f5a1 71ae 	sub.w	r1, r1, #348	@ 0x15c
 8003ff6:	600a      	str	r2, [r1, #0]
 8003ff8:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8003ffc:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8004000:	6013      	str	r3, [r2, #0]
	int ErrCheck = SIM7600_OK;
 8004002:	2301      	movs	r3, #1
 8004004:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

	GetSignal(_sim);
 8004008:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800400c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004010:	6818      	ldr	r0, [r3, #0]
 8004012:	f7ff ff33 	bl	8003e7c <GetSignal>
	if(_sim->Signal == 0){
 8004016:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800401a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004022:	2b00      	cmp	r3, #0
 8004024:	d110      	bne.n	8004048 <http_get+0x74>
#ifdef SIM_Debug
		strcpy(_sim->response,"No Signal");
 8004026:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800402a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8004034:	49cb      	ldr	r1, [pc, #812]	@ (8004364 <http_get+0x390>)
 8004036:	461a      	mov	r2, r3
 8004038:	460b      	mov	r3, r1
 800403a:	cb03      	ldmia	r3!, {r0, r1}
 800403c:	6010      	str	r0, [r2, #0]
 800403e:	6051      	str	r1, [r2, #4]
 8004040:	881b      	ldrh	r3, [r3, #0]
 8004042:	8113      	strh	r3, [r2, #8]
#endif
		return SIM7600_ERROR;
 8004044:	2300      	movs	r3, #0
 8004046:	e280      	b.n	800454a <http_get+0x576>
	}

//	Init HTTP
	if(SendCommand(_sim, "AT+HTTPINIT\r\n", SIM_OK, 2000, 1) == -1){
 8004048:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800404c:	f5a3 70aa 	sub.w	r0, r3, #340	@ 0x154
 8004050:	2301      	movs	r3, #1
 8004052:	9302      	str	r3, [sp, #8]
 8004054:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004058:	f04f 0300 	mov.w	r3, #0
 800405c:	e9cd 2300 	strd	r2, r3, [sp]
 8004060:	4ac1      	ldr	r2, [pc, #772]	@ (8004368 <http_get+0x394>)
 8004062:	49c2      	ldr	r1, [pc, #776]	@ (800436c <http_get+0x398>)
 8004064:	6800      	ldr	r0, [r0, #0]
 8004066:	f7ff fa97 	bl	8003598 <SendCommand>
 800406a:	4603      	mov	r3, r0
 800406c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004070:	d112      	bne.n	8004098 <http_get+0xc4>
#ifdef SIM_Debug
		strcpy(_sim->response,"Init HTTP error");
 8004072:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004076:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8004080:	4abb      	ldr	r2, [pc, #748]	@ (8004370 <http_get+0x39c>)
 8004082:	461c      	mov	r4, r3
 8004084:	4615      	mov	r5, r2
 8004086:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004088:	6020      	str	r0, [r4, #0]
 800408a:	6061      	str	r1, [r4, #4]
 800408c:	60a2      	str	r2, [r4, #8]
 800408e:	60e3      	str	r3, [r4, #12]
#endif
		ErrCheck = SIM7600_ERROR;
 8004090:	2300      	movs	r3, #0
 8004092:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
		goto StopHttpGet;
 8004096:	e1cf      	b.n	8004438 <http_get+0x464>
	}

//	Setup HTTP URL
	char urlStr[200];
	sprintf(urlStr,"AT+HTTPPARA=\"URL\",\"%s\"\r\n", url);
 8004098:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800409c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80040a0:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	49b3      	ldr	r1, [pc, #716]	@ (8004374 <http_get+0x3a0>)
 80040a8:	f006 fb6a 	bl	800a780 <siprintf>
	if(SendCommand(_sim, urlStr, SIM_OK, 1000, 1) == -1){
 80040ac:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 80040b0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80040b4:	f5a3 70aa 	sub.w	r0, r3, #340	@ 0x154
 80040b8:	2301      	movs	r3, #1
 80040ba:	9302      	str	r3, [sp, #8]
 80040bc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80040c0:	f04f 0300 	mov.w	r3, #0
 80040c4:	e9cd 2300 	strd	r2, r3, [sp]
 80040c8:	4aa7      	ldr	r2, [pc, #668]	@ (8004368 <http_get+0x394>)
 80040ca:	6800      	ldr	r0, [r0, #0]
 80040cc:	f7ff fa64 	bl	8003598 <SendCommand>
 80040d0:	4603      	mov	r3, r0
 80040d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d6:	d115      	bne.n	8004104 <http_get+0x130>
#ifdef SIM_Debug
		strcpy(_sim->response,"Setup HTTP URL error");
 80040d8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80040dc:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80040e6:	4aa4      	ldr	r2, [pc, #656]	@ (8004378 <http_get+0x3a4>)
 80040e8:	461d      	mov	r5, r3
 80040ea:	4614      	mov	r4, r2
 80040ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040ee:	6028      	str	r0, [r5, #0]
 80040f0:	6069      	str	r1, [r5, #4]
 80040f2:	60aa      	str	r2, [r5, #8]
 80040f4:	60eb      	str	r3, [r5, #12]
 80040f6:	6820      	ldr	r0, [r4, #0]
 80040f8:	6128      	str	r0, [r5, #16]
 80040fa:	7923      	ldrb	r3, [r4, #4]
 80040fc:	752b      	strb	r3, [r5, #20]
#endif
		ErrCheck = SIM7600_ERROR;
 80040fe:	2300      	movs	r3, #0
 8004100:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
	}

//	Send HTTP GET request
	int foundRes = SendCommand(_sim, "AT+HTTPACTION=0\r\n", "+HTTPACTION: 0", 50000, 0);
 8004104:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004108:	f5a3 70aa 	sub.w	r0, r3, #340	@ 0x154
 800410c:	2300      	movs	r3, #0
 800410e:	9302      	str	r3, [sp, #8]
 8004110:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8004114:	f04f 0300 	mov.w	r3, #0
 8004118:	e9cd 2300 	strd	r2, r3, [sp]
 800411c:	4a97      	ldr	r2, [pc, #604]	@ (800437c <http_get+0x3a8>)
 800411e:	4998      	ldr	r1, [pc, #608]	@ (8004380 <http_get+0x3ac>)
 8004120:	6800      	ldr	r0, [r0, #0]
 8004122:	f7ff fa39 	bl	8003598 <SendCommand>
 8004126:	f8c7 0158 	str.w	r0, [r7, #344]	@ 0x158
	if(foundRes == -1){
 800412a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800412e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004132:	d114      	bne.n	800415e <http_get+0x18a>
#ifdef SIM_Debug
		strcpy(_sim->response,"Send HTTP request error");
 8004134:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004138:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8004142:	4a90      	ldr	r2, [pc, #576]	@ (8004384 <http_get+0x3b0>)
 8004144:	461d      	mov	r5, r3
 8004146:	4614      	mov	r4, r2
 8004148:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800414a:	6028      	str	r0, [r5, #0]
 800414c:	6069      	str	r1, [r5, #4]
 800414e:	60aa      	str	r2, [r5, #8]
 8004150:	60eb      	str	r3, [r5, #12]
 8004152:	cc03      	ldmia	r4!, {r0, r1}
 8004154:	6128      	str	r0, [r5, #16]
 8004156:	6169      	str	r1, [r5, #20]
#endif
		ErrCheck = SIM7600_ERROR;
 8004158:	2300      	movs	r3, #0
 800415a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
	}
	SIM_Delay(10);
 800415e:	200a      	movs	r0, #10
 8004160:	f000 fc5e 	bl	8004a20 <HAL_Delay>

	char DataResponseStr[50];
	int count = 0;
 8004164:	2300      	movs	r3, #0
 8004166:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
	for(int i = foundRes; i <= SIM_RX_BUFF_SIZE; ++i){
 800416a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800416e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004172:	e028      	b.n	80041c6 <http_get+0x1f2>
		if(_sim->buffer[i] == '\r') break;
 8004174:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004178:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8004182:	4413      	add	r3, r2
 8004184:	3390      	adds	r3, #144	@ 0x90
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	2b0d      	cmp	r3, #13
 800418a:	d022      	beq.n	80041d2 <http_get+0x1fe>
		DataResponseStr[count] = _sim->buffer[i];
 800418c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004190:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800419a:	4413      	add	r3, r2
 800419c:	3390      	adds	r3, #144	@ 0x90
 800419e:	7819      	ldrb	r1, [r3, #0]
 80041a0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80041a4:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 80041a8:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80041ac:	4413      	add	r3, r2
 80041ae:	460a      	mov	r2, r1
 80041b0:	701a      	strb	r2, [r3, #0]
		++count;
 80041b2:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80041b6:	3301      	adds	r3, #1
 80041b8:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
	for(int i = foundRes; i <= SIM_RX_BUFF_SIZE; ++i){
 80041bc:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80041c0:	3301      	adds	r3, #1
 80041c2:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80041c6:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80041ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041ce:	ddd1      	ble.n	8004174 <http_get+0x1a0>
 80041d0:	e000      	b.n	80041d4 <http_get+0x200>
		if(_sim->buffer[i] == '\r') break;
 80041d2:	bf00      	nop
	}
	int DataResponseLen = -1;
 80041d4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80041d8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80041dc:	f04f 32ff 	mov.w	r2, #4294967295
 80041e0:	601a      	str	r2, [r3, #0]

	int analysisHttpCode;

	sscanf(DataResponseStr, "+HTTPACTION: 0,%d,%d", &analysisHttpCode, &DataResponseLen);
 80041e2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80041e6:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80041ea:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 80041ee:	4966      	ldr	r1, [pc, #408]	@ (8004388 <http_get+0x3b4>)
 80041f0:	f006 fae6 	bl	800a7c0 <siscanf>
	*httpCode = analysisHttpCode;
 80041f4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80041f8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004202:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	601a      	str	r2, [r3, #0]

	if(*httpCode == 200){
 800420a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800420e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2bc8      	cmp	r3, #200	@ 0xc8
 8004218:	f040 80f8 	bne.w	800440c <http_get+0x438>
#ifdef SIM_Debug
		strcpy(_sim->DebugResponceStr, DataResponseStr);
 800421c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004220:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f203 332a 	addw	r3, r3, #810	@ 0x32a
 800422a:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800422e:	4611      	mov	r1, r2
 8004230:	4618      	mov	r0, r3
 8004232:	f006 fbc6 	bl	800a9c2 <strcpy>
		_sim->DebugHTTPGetCode = *httpCode;
 8004236:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800423a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004246:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f8c3 23a4 	str.w	r2, [r3, #932]	@ 0x3a4
		_sim->DebugHTTPGetDataLen = DataResponseLen;
 8004250:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004254:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800425e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f8c3 23a8 	str.w	r2, [r3, #936]	@ 0x3a8
#endif
		ClearBuffer(_sim);
 8004268:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800426c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004270:	6818      	ldr	r0, [r3, #0]
 8004272:	f7ff f8c0 	bl	80033f6 <ClearBuffer>
		char readDataStr[50];
		sprintf(readDataStr,"AT+HTTPREAD=0,%d\r\n", *httpCode);
 8004276:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800427a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	f107 0310 	add.w	r3, r7, #16
 8004286:	4941      	ldr	r1, [pc, #260]	@ (800438c <http_get+0x3b8>)
 8004288:	4618      	mov	r0, r3
 800428a:	f006 fa79 	bl	800a780 <siprintf>

		foundRes = SendCommand(_sim, readDataStr, "+HTTPREAD:", 2000, 0);
 800428e:	f107 0110 	add.w	r1, r7, #16
 8004292:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004296:	f5a3 70aa 	sub.w	r0, r3, #340	@ 0x154
 800429a:	2300      	movs	r3, #0
 800429c:	9302      	str	r3, [sp, #8]
 800429e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80042a2:	f04f 0300 	mov.w	r3, #0
 80042a6:	e9cd 2300 	strd	r2, r3, [sp]
 80042aa:	4a39      	ldr	r2, [pc, #228]	@ (8004390 <http_get+0x3bc>)
 80042ac:	6800      	ldr	r0, [r0, #0]
 80042ae:	f7ff f973 	bl	8003598 <SendCommand>
 80042b2:	f8c7 0158 	str.w	r0, [r7, #344]	@ 0x158
		if(foundRes == -1){
 80042b6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80042ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042be:	d115      	bne.n	80042ec <http_get+0x318>
#ifdef SIM_Debug
			strcpy(_sim->response,"Read HTTP data ERROR");
 80042c0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80042c4:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80042ce:	4a31      	ldr	r2, [pc, #196]	@ (8004394 <http_get+0x3c0>)
 80042d0:	461d      	mov	r5, r3
 80042d2:	4614      	mov	r4, r2
 80042d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042d6:	6028      	str	r0, [r5, #0]
 80042d8:	6069      	str	r1, [r5, #4]
 80042da:	60aa      	str	r2, [r5, #8]
 80042dc:	60eb      	str	r3, [r5, #12]
 80042de:	6820      	ldr	r0, [r4, #0]
 80042e0:	6128      	str	r0, [r5, #16]
 80042e2:	7923      	ldrb	r3, [r4, #4]
 80042e4:	752b      	strb	r3, [r5, #20]
#endif
			ErrCheck = SIM7600_ERROR;
 80042e6:	2300      	movs	r3, #0
 80042e8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
		}

		while(WaitForResponse(_sim, "+HTTPREAD: 0", 1000, 0) == -1);
 80042ec:	bf00      	nop
 80042ee:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80042f2:	f5a3 70aa 	sub.w	r0, r3, #340	@ 0x154
 80042f6:	2300      	movs	r3, #0
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80042fe:	f04f 0300 	mov.w	r3, #0
 8004302:	4925      	ldr	r1, [pc, #148]	@ (8004398 <http_get+0x3c4>)
 8004304:	6800      	ldr	r0, [r0, #0]
 8004306:	f7ff f894 	bl	8003432 <WaitForResponse>
 800430a:	4603      	mov	r3, r0
 800430c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004310:	d0ed      	beq.n	80042ee <http_get+0x31a>

		for(int i = foundRes; i <= SIM_RX_BUFF_SIZE; ++i){
 8004312:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8004316:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800431a:	e016      	b.n	800434a <http_get+0x376>
			if(_sim->buffer[i] == '\n'){
 800431c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004320:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800432a:	4413      	add	r3, r2
 800432c:	3390      	adds	r3, #144	@ 0x90
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	2b0a      	cmp	r3, #10
 8004332:	d105      	bne.n	8004340 <http_get+0x36c>
				foundRes = i + 1;
 8004334:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004338:	3301      	adds	r3, #1
 800433a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
				break;
 800433e:	e009      	b.n	8004354 <http_get+0x380>
		for(int i = foundRes; i <= SIM_RX_BUFF_SIZE; ++i){
 8004340:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004344:	3301      	adds	r3, #1
 8004346:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800434a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800434e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004352:	dde3      	ble.n	800431c <http_get+0x348>
			}
		}
		count = 0;
 8004354:	2300      	movs	r3, #0
 8004356:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
		for(int i = foundRes; i <= SIM_RX_BUFF_SIZE; ++i){
 800435a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800435e:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8004362:	e044      	b.n	80043ee <http_get+0x41a>
 8004364:	0800ec38 	.word	0x0800ec38
 8004368:	0800eb94 	.word	0x0800eb94
 800436c:	0800ecd8 	.word	0x0800ecd8
 8004370:	0800ece8 	.word	0x0800ece8
 8004374:	0800ecf8 	.word	0x0800ecf8
 8004378:	0800ed14 	.word	0x0800ed14
 800437c:	0800ed2c 	.word	0x0800ed2c
 8004380:	0800ed3c 	.word	0x0800ed3c
 8004384:	0800ed50 	.word	0x0800ed50
 8004388:	0800ed68 	.word	0x0800ed68
 800438c:	0800ed80 	.word	0x0800ed80
 8004390:	0800ed94 	.word	0x0800ed94
 8004394:	0800eda0 	.word	0x0800eda0
 8004398:	0800edb8 	.word	0x0800edb8
			if(_sim->buffer[i] == '\r') break;
 800439c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80043a0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80043aa:	4413      	add	r3, r2
 80043ac:	3390      	adds	r3, #144	@ 0x90
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	2b0d      	cmp	r3, #13
 80043b2:	d022      	beq.n	80043fa <http_get+0x426>
			response[count] = _sim->buffer[i];
 80043b4:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80043b8:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 80043bc:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80043c0:	6812      	ldr	r2, [r2, #0]
 80043c2:	4413      	add	r3, r2
 80043c4:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 80043c8:	f5a2 72aa 	sub.w	r2, r2, #340	@ 0x154
 80043cc:	6811      	ldr	r1, [r2, #0]
 80043ce:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80043d2:	440a      	add	r2, r1
 80043d4:	3290      	adds	r2, #144	@ 0x90
 80043d6:	7812      	ldrb	r2, [r2, #0]
 80043d8:	701a      	strb	r2, [r3, #0]
			++count;
 80043da:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80043de:	3301      	adds	r3, #1
 80043e0:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
		for(int i = foundRes; i <= SIM_RX_BUFF_SIZE; ++i){
 80043e4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80043e8:	3301      	adds	r3, #1
 80043ea:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 80043ee:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80043f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043f6:	ddd1      	ble.n	800439c <http_get+0x3c8>
 80043f8:	e000      	b.n	80043fc <http_get+0x428>
			if(_sim->buffer[i] == '\r') break;
 80043fa:	bf00      	nop
		}

		ClearBuffer(_sim);
 80043fc:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004400:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004404:	6818      	ldr	r0, [r3, #0]
 8004406:	f7fe fff6 	bl	80033f6 <ClearBuffer>
 800440a:	e015      	b.n	8004438 <http_get+0x464>
	}
	else{
#ifdef SIM_Debug
		strcpy(_sim->response,"HTTP CODE RETURN ERROR");
 800440c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004410:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800441a:	4a4e      	ldr	r2, [pc, #312]	@ (8004554 <http_get+0x580>)
 800441c:	461c      	mov	r4, r3
 800441e:	4615      	mov	r5, r2
 8004420:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004422:	6020      	str	r0, [r4, #0]
 8004424:	6061      	str	r1, [r4, #4]
 8004426:	60a2      	str	r2, [r4, #8]
 8004428:	60e3      	str	r3, [r4, #12]
 800442a:	6828      	ldr	r0, [r5, #0]
 800442c:	6120      	str	r0, [r4, #16]
 800442e:	88ab      	ldrh	r3, [r5, #4]
 8004430:	79aa      	ldrb	r2, [r5, #6]
 8004432:	82a3      	strh	r3, [r4, #20]
 8004434:	4613      	mov	r3, r2
 8004436:	75a3      	strb	r3, [r4, #22]
#endif
	}

//	Stop HTTP request
	StopHttpGet:
	if(SendCommand(_sim, "AT+HTTPTERM\r\n", SIM_OK, 1000, 1) == -1){
 8004438:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800443c:	f5a3 70aa 	sub.w	r0, r3, #340	@ 0x154
 8004440:	2301      	movs	r3, #1
 8004442:	9302      	str	r3, [sp, #8]
 8004444:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004448:	f04f 0300 	mov.w	r3, #0
 800444c:	e9cd 2300 	strd	r2, r3, [sp]
 8004450:	4a41      	ldr	r2, [pc, #260]	@ (8004558 <http_get+0x584>)
 8004452:	4942      	ldr	r1, [pc, #264]	@ (800455c <http_get+0x588>)
 8004454:	6800      	ldr	r0, [r0, #0]
 8004456:	f7ff f89f 	bl	8003598 <SendCommand>
 800445a:	4603      	mov	r3, r0
 800445c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004460:	d111      	bne.n	8004486 <http_get+0x4b2>
#ifdef SIM_Debug
		strcpy(_sim->response,"Stop HTTP error");
 8004462:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004466:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8004470:	4a3b      	ldr	r2, [pc, #236]	@ (8004560 <http_get+0x58c>)
 8004472:	461c      	mov	r4, r3
 8004474:	4615      	mov	r5, r2
 8004476:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004478:	6020      	str	r0, [r4, #0]
 800447a:	6061      	str	r1, [r4, #4]
 800447c:	60a2      	str	r2, [r4, #8]
 800447e:	60e3      	str	r3, [r4, #12]
#endif
		ErrCheck = SIM7600_ERROR;
 8004480:	2300      	movs	r3, #0
 8004482:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
	}

	if(ErrCheck == SIM7600_ERROR){
 8004486:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800448a:	2b00      	cmp	r3, #0
 800448c:	d137      	bne.n	80044fe <http_get+0x52a>
		++_sim->SuperviseHTTPError;
 800448e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004492:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800449c:	1c5a      	adds	r2, r3, #1
 800449e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80044a2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

		if(_sim->SuperviseHTTPError > MAX_HTTP_ERROR_COUNT){
 80044ac:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80044b0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044ba:	2b03      	cmp	r3, #3
 80044bc:	dd0e      	ble.n	80044dc <http_get+0x508>
			StartModuleService(_sim);
 80044be:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80044c2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80044c6:	6818      	ldr	r0, [r3, #0]
 80044c8:	f7ff f988 	bl	80037dc <StartModuleService>
			_sim->SuperviseHTTPError = 0;
 80044cc:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80044d0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
		}
#ifdef SIM_Debug
//		strcpy(_sim->response,"HTTP GET ERROR");
		++_sim->CountHTTPGetError;
 80044dc:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80044e0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f8d3 33b0 	ldr.w	r3, [r3, #944]	@ 0x3b0
 80044ea:	1c5a      	adds	r2, r3, #1
 80044ec:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80044f0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
#endif
		return SIM7600_ERROR;
 80044fa:	2300      	movs	r3, #0
 80044fc:	e025      	b.n	800454a <http_get+0x576>
	}

	_sim->SuperviseHTTPError = 0;
 80044fe:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004502:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2200      	movs	r2, #0
 800450a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#ifdef SIM_Debug
	strcpy(_sim->response,"HTTP GET OK");
 800450e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8004512:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800451c:	4a11      	ldr	r2, [pc, #68]	@ (8004564 <http_get+0x590>)
 800451e:	461c      	mov	r4, r3
 8004520:	4613      	mov	r3, r2
 8004522:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004524:	6020      	str	r0, [r4, #0]
 8004526:	6061      	str	r1, [r4, #4]
 8004528:	60a2      	str	r2, [r4, #8]
	++_sim->CountHTTPGetOK;
 800452a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800452e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f8d3 33ac 	ldr.w	r3, [r3, #940]	@ 0x3ac
 8004538:	1c5a      	adds	r2, r3, #1
 800453a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800453e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f8c3 23ac 	str.w	r2, [r3, #940]	@ 0x3ac
#endif
	return SIM7600_OK;
 8004548:	2301      	movs	r3, #1
}
 800454a:	4618      	mov	r0, r3
 800454c:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8004550:	46bd      	mov	sp, r7
 8004552:	bdb0      	pop	{r4, r5, r7, pc}
 8004554:	0800edc8 	.word	0x0800edc8
 8004558:	0800eb94 	.word	0x0800eb94
 800455c:	0800ede0 	.word	0x0800ede0
 8004560:	0800edf0 	.word	0x0800edf0
 8004564:	0800ee00 	.word	0x0800ee00

08004568 <http_post>:


// HTTP POST FUNCTION
int http_post(sim7600_t *_sim, char *url, char *data){
 8004568:	b5b0      	push	{r4, r5, r7, lr}
 800456a:	b0ee      	sub	sp, #440	@ 0x1b8
 800456c:	af04      	add	r7, sp, #16
 800456e:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8004572:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004576:	6018      	str	r0, [r3, #0]
 8004578:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 800457c:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8004580:	6019      	str	r1, [r3, #0]
 8004582:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8004586:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 800458a:	601a      	str	r2, [r3, #0]
	int ErrCheck = SIM7600_OK;
 800458c:	2301      	movs	r3, #1
 800458e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

	GetSignal(_sim);
 8004592:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8004596:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800459a:	6818      	ldr	r0, [r3, #0]
 800459c:	f7ff fc6e 	bl	8003e7c <GetSignal>
	if(_sim->Signal == 0){
 80045a0:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80045a4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d110      	bne.n	80045d2 <http_post+0x6a>
#ifdef SIM_Debug
		strcpy(_sim->response,"No Signal");
 80045b0:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80045b4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80045be:	49ce      	ldr	r1, [pc, #824]	@ (80048f8 <http_post+0x390>)
 80045c0:	461a      	mov	r2, r3
 80045c2:	460b      	mov	r3, r1
 80045c4:	cb03      	ldmia	r3!, {r0, r1}
 80045c6:	6010      	str	r0, [r2, #0]
 80045c8:	6051      	str	r1, [r2, #4]
 80045ca:	881b      	ldrh	r3, [r3, #0]
 80045cc:	8113      	strh	r3, [r2, #8]
#endif
		return SIM7600_ERROR;
 80045ce:	2300      	movs	r3, #0
 80045d0:	e18c      	b.n	80048ec <http_post+0x384>
	}

//	Init HTTP
	if(SendCommand(_sim, "AT+HTTPINIT\r\n", SIM_OK, 2000, 1) == -1){
 80045d2:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80045d6:	f5a3 70ce 	sub.w	r0, r3, #412	@ 0x19c
 80045da:	2301      	movs	r3, #1
 80045dc:	9302      	str	r3, [sp, #8]
 80045de:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80045e2:	f04f 0300 	mov.w	r3, #0
 80045e6:	e9cd 2300 	strd	r2, r3, [sp]
 80045ea:	4ac4      	ldr	r2, [pc, #784]	@ (80048fc <http_post+0x394>)
 80045ec:	49c4      	ldr	r1, [pc, #784]	@ (8004900 <http_post+0x398>)
 80045ee:	6800      	ldr	r0, [r0, #0]
 80045f0:	f7fe ffd2 	bl	8003598 <SendCommand>
 80045f4:	4603      	mov	r3, r0
 80045f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fa:	d114      	bne.n	8004626 <http_post+0xbe>
#ifdef SIM_Debug
		strcpy(_sim->response,"Init HTTP error1");
 80045fc:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8004600:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800460a:	4abe      	ldr	r2, [pc, #760]	@ (8004904 <http_post+0x39c>)
 800460c:	461d      	mov	r5, r3
 800460e:	4614      	mov	r4, r2
 8004610:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004612:	6028      	str	r0, [r5, #0]
 8004614:	6069      	str	r1, [r5, #4]
 8004616:	60aa      	str	r2, [r5, #8]
 8004618:	60eb      	str	r3, [r5, #12]
 800461a:	7823      	ldrb	r3, [r4, #0]
 800461c:	742b      	strb	r3, [r5, #16]
#endif
		ErrCheck = SIM7600_ERROR;
 800461e:	2300      	movs	r3, #0
 8004620:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
		goto StopHttpPost;
 8004624:	e0d7      	b.n	80047d6 <http_post+0x26e>
	}

//	Setup HTTP URL
	char urlStr[200];
	sprintf(urlStr,"AT+HTTPPARA=\"URL\",\"%s\"\r\n", url);
 8004626:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 800462a:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800462e:	f107 00d8 	add.w	r0, r7, #216	@ 0xd8
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	49b4      	ldr	r1, [pc, #720]	@ (8004908 <http_post+0x3a0>)
 8004636:	f006 f8a3 	bl	800a780 <siprintf>
	if(SendCommand(_sim, urlStr, SIM_OK, 2000, 1) == -1){
 800463a:	f107 01d8 	add.w	r1, r7, #216	@ 0xd8
 800463e:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8004642:	f5a3 70ce 	sub.w	r0, r3, #412	@ 0x19c
 8004646:	2301      	movs	r3, #1
 8004648:	9302      	str	r3, [sp, #8]
 800464a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800464e:	f04f 0300 	mov.w	r3, #0
 8004652:	e9cd 2300 	strd	r2, r3, [sp]
 8004656:	4aa9      	ldr	r2, [pc, #676]	@ (80048fc <http_post+0x394>)
 8004658:	6800      	ldr	r0, [r0, #0]
 800465a:	f7fe ff9d 	bl	8003598 <SendCommand>
 800465e:	4603      	mov	r3, r0
 8004660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004664:	d115      	bne.n	8004692 <http_post+0x12a>
#ifdef SIM_Debug
		strcpy(_sim->response,"Setup HTTP URL error");
 8004666:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 800466a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8004674:	4aa5      	ldr	r2, [pc, #660]	@ (800490c <http_post+0x3a4>)
 8004676:	461d      	mov	r5, r3
 8004678:	4614      	mov	r4, r2
 800467a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800467c:	6028      	str	r0, [r5, #0]
 800467e:	6069      	str	r1, [r5, #4]
 8004680:	60aa      	str	r2, [r5, #8]
 8004682:	60eb      	str	r3, [r5, #12]
 8004684:	6820      	ldr	r0, [r4, #0]
 8004686:	6128      	str	r0, [r5, #16]
 8004688:	7923      	ldrb	r3, [r4, #4]
 800468a:	752b      	strb	r3, [r5, #20]
#endif
		ErrCheck = SIM7600_ERROR;
 800468c:	2300      	movs	r3, #0
 800468e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
	}

	if(SendCommand(_sim, "AT+HTTPPARA=\"CONTENT\",\"application/json\"\r\n", SIM_OK, 2000, 1) == -1){
 8004692:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8004696:	f5a3 70ce 	sub.w	r0, r3, #412	@ 0x19c
 800469a:	2301      	movs	r3, #1
 800469c:	9302      	str	r3, [sp, #8]
 800469e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80046a2:	f04f 0300 	mov.w	r3, #0
 80046a6:	e9cd 2300 	strd	r2, r3, [sp]
 80046aa:	4a94      	ldr	r2, [pc, #592]	@ (80048fc <http_post+0x394>)
 80046ac:	4998      	ldr	r1, [pc, #608]	@ (8004910 <http_post+0x3a8>)
 80046ae:	6800      	ldr	r0, [r0, #0]
 80046b0:	f7fe ff72 	bl	8003598 <SendCommand>
 80046b4:	4603      	mov	r3, r0
 80046b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ba:	d116      	bne.n	80046ea <http_post+0x182>
#ifdef SIM_Debug
		strcpy(_sim->response,"Set HTTPPARA ERROR");
 80046bc:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80046c0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80046ca:	4a92      	ldr	r2, [pc, #584]	@ (8004914 <http_post+0x3ac>)
 80046cc:	461d      	mov	r5, r3
 80046ce:	4614      	mov	r4, r2
 80046d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046d2:	6028      	str	r0, [r5, #0]
 80046d4:	6069      	str	r1, [r5, #4]
 80046d6:	60aa      	str	r2, [r5, #8]
 80046d8:	60eb      	str	r3, [r5, #12]
 80046da:	8823      	ldrh	r3, [r4, #0]
 80046dc:	78a2      	ldrb	r2, [r4, #2]
 80046de:	822b      	strh	r3, [r5, #16]
 80046e0:	4613      	mov	r3, r2
 80046e2:	74ab      	strb	r3, [r5, #18]
#endif
		ErrCheck = SIM7600_ERROR;
 80046e4:	2300      	movs	r3, #0
 80046e6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
	}

// Send HTTP DATA
	char httpDataStr[200];
	sprintf(httpDataStr,"AT+HTTPDATA=%d,1000\r\n", strlen(data));
 80046ea:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80046ee:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 80046f2:	6818      	ldr	r0, [r3, #0]
 80046f4:	f7fb fdbc 	bl	8000270 <strlen>
 80046f8:	4602      	mov	r2, r0
 80046fa:	f107 0310 	add.w	r3, r7, #16
 80046fe:	4986      	ldr	r1, [pc, #536]	@ (8004918 <http_post+0x3b0>)
 8004700:	4618      	mov	r0, r3
 8004702:	f006 f83d 	bl	800a780 <siprintf>
#ifdef SIM_Debug
	strcpy(_sim->DebugStr, httpDataStr);
 8004706:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 800470a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f203 23c6 	addw	r3, r3, #710	@ 0x2c6
 8004714:	f107 0210 	add.w	r2, r7, #16
 8004718:	4611      	mov	r1, r2
 800471a:	4618      	mov	r0, r3
 800471c:	f006 f951 	bl	800a9c2 <strcpy>
#endif
	SendCommand(_sim, httpDataStr, "DOWNLOAD", 2000, 1);
 8004720:	f107 0110 	add.w	r1, r7, #16
 8004724:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8004728:	f5a3 70ce 	sub.w	r0, r3, #412	@ 0x19c
 800472c:	2301      	movs	r3, #1
 800472e:	9302      	str	r3, [sp, #8]
 8004730:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004734:	f04f 0300 	mov.w	r3, #0
 8004738:	e9cd 2300 	strd	r2, r3, [sp]
 800473c:	4a77      	ldr	r2, [pc, #476]	@ (800491c <http_post+0x3b4>)
 800473e:	6800      	ldr	r0, [r0, #0]
 8004740:	f7fe ff2a 	bl	8003598 <SendCommand>
	SendCommand(_sim, data, SIM_OK, 2000, 1);
 8004744:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8004748:	f5a3 71d2 	sub.w	r1, r3, #420	@ 0x1a4
 800474c:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8004750:	f5a3 70ce 	sub.w	r0, r3, #412	@ 0x19c
 8004754:	2301      	movs	r3, #1
 8004756:	9302      	str	r3, [sp, #8]
 8004758:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800475c:	f04f 0300 	mov.w	r3, #0
 8004760:	e9cd 2300 	strd	r2, r3, [sp]
 8004764:	4a65      	ldr	r2, [pc, #404]	@ (80048fc <http_post+0x394>)
 8004766:	6809      	ldr	r1, [r1, #0]
 8004768:	6800      	ldr	r0, [r0, #0]
 800476a:	f7fe ff15 	bl	8003598 <SendCommand>

//	Send HTTP POST request
	int responce = SendCommandCheckTrueFalse(_sim, "AT+HTTPACTION=1\r\n", "+HTTPACTION: 1,200", SIM_ERROR, 50000, 0);
 800476e:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8004772:	f5a3 70ce 	sub.w	r0, r3, #412	@ 0x19c
 8004776:	2300      	movs	r3, #0
 8004778:	9302      	str	r3, [sp, #8]
 800477a:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800477e:	f04f 0300 	mov.w	r3, #0
 8004782:	e9cd 2300 	strd	r2, r3, [sp]
 8004786:	4b66      	ldr	r3, [pc, #408]	@ (8004920 <http_post+0x3b8>)
 8004788:	4a66      	ldr	r2, [pc, #408]	@ (8004924 <http_post+0x3bc>)
 800478a:	4967      	ldr	r1, [pc, #412]	@ (8004928 <http_post+0x3c0>)
 800478c:	6800      	ldr	r0, [r0, #0]
 800478e:	f7fe ff29 	bl	80035e4 <SendCommandCheckTrueFalse>
 8004792:	f8c7 01a0 	str.w	r0, [r7, #416]	@ 0x1a0

	if(responce != 1){
 8004796:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800479a:	2b01      	cmp	r3, #1
 800479c:	d014      	beq.n	80047c8 <http_post+0x260>
#ifdef SIM_Debug
		strcpy(_sim->response,"Send HTTP request error");
 800479e:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80047a2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80047ac:	4a5f      	ldr	r2, [pc, #380]	@ (800492c <http_post+0x3c4>)
 80047ae:	461d      	mov	r5, r3
 80047b0:	4614      	mov	r4, r2
 80047b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047b4:	6028      	str	r0, [r5, #0]
 80047b6:	6069      	str	r1, [r5, #4]
 80047b8:	60aa      	str	r2, [r5, #8]
 80047ba:	60eb      	str	r3, [r5, #12]
 80047bc:	cc03      	ldmia	r4!, {r0, r1}
 80047be:	6128      	str	r0, [r5, #16]
 80047c0:	6169      	str	r1, [r5, #20]
#endif
//		return A7680_ERROR;
		ErrCheck = SIM7600_ERROR;
 80047c2:	2300      	movs	r3, #0
 80047c4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
	}

	ClearBuffer(_sim);
 80047c8:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80047cc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80047d0:	6818      	ldr	r0, [r3, #0]
 80047d2:	f7fe fe10 	bl	80033f6 <ClearBuffer>


//	Stop HTTP request
	StopHttpPost:
	if(SendCommand(_sim, "AT+HTTPTERM\r\n", SIM_OK, 2000, 1) == -1){
 80047d6:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80047da:	f5a3 70ce 	sub.w	r0, r3, #412	@ 0x19c
 80047de:	2301      	movs	r3, #1
 80047e0:	9302      	str	r3, [sp, #8]
 80047e2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80047e6:	f04f 0300 	mov.w	r3, #0
 80047ea:	e9cd 2300 	strd	r2, r3, [sp]
 80047ee:	4a43      	ldr	r2, [pc, #268]	@ (80048fc <http_post+0x394>)
 80047f0:	494f      	ldr	r1, [pc, #316]	@ (8004930 <http_post+0x3c8>)
 80047f2:	6800      	ldr	r0, [r0, #0]
 80047f4:	f7fe fed0 	bl	8003598 <SendCommand>
 80047f8:	4603      	mov	r3, r0
 80047fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fe:	d111      	bne.n	8004824 <http_post+0x2bc>
#ifdef SIM_Debug
		strcpy(_sim->response,"Stop HTTP error");
 8004800:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8004804:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800480e:	4a49      	ldr	r2, [pc, #292]	@ (8004934 <http_post+0x3cc>)
 8004810:	461c      	mov	r4, r3
 8004812:	4615      	mov	r5, r2
 8004814:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004816:	6020      	str	r0, [r4, #0]
 8004818:	6061      	str	r1, [r4, #4]
 800481a:	60a2      	str	r2, [r4, #8]
 800481c:	60e3      	str	r3, [r4, #12]
#endif
		ErrCheck = SIM7600_ERROR;
 800481e:	2300      	movs	r3, #0
 8004820:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
	}

	if(ErrCheck == SIM7600_ERROR){
 8004824:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004828:	2b00      	cmp	r3, #0
 800482a:	d137      	bne.n	800489c <http_post+0x334>
		++_sim->SuperviseHTTPError;
 800482c:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8004830:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800483a:	1c5a      	adds	r2, r3, #1
 800483c:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8004840:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
		if(_sim->SuperviseHTTPError > MAX_HTTP_ERROR_COUNT){
 800484a:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 800484e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004858:	2b03      	cmp	r3, #3
 800485a:	dd0e      	ble.n	800487a <http_post+0x312>
			StartModuleService(_sim);
 800485c:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8004860:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004864:	6818      	ldr	r0, [r3, #0]
 8004866:	f7fe ffb9 	bl	80037dc <StartModuleService>
			_sim->SuperviseHTTPError = 0;
 800486a:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 800486e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2200      	movs	r2, #0
 8004876:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
		}
#ifdef SIM_Debug
//		strcpy(_sim->response,"HTTP POST ERROR");
		++_sim->CountHTTPPostError;
 800487a:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 800487e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f8d3 33c0 	ldr.w	r3, [r3, #960]	@ 0x3c0
 8004888:	1c5a      	adds	r2, r3, #1
 800488a:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 800488e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f8c3 23c0 	str.w	r2, [r3, #960]	@ 0x3c0
#endif
		return SIM7600_ERROR;
 8004898:	2300      	movs	r3, #0
 800489a:	e027      	b.n	80048ec <http_post+0x384>
	}
	_sim->SuperviseHTTPError = 0;
 800489c:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80048a0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#ifdef SIM_Debug
	strcpy(_sim->response,"HTTP POST OK");
 80048ac:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80048b0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80048ba:	4a1f      	ldr	r2, [pc, #124]	@ (8004938 <http_post+0x3d0>)
 80048bc:	461c      	mov	r4, r3
 80048be:	4613      	mov	r3, r2
 80048c0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80048c2:	6020      	str	r0, [r4, #0]
 80048c4:	6061      	str	r1, [r4, #4]
 80048c6:	60a2      	str	r2, [r4, #8]
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	7323      	strb	r3, [r4, #12]
	++_sim->CountHTTPPostOK;
 80048cc:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80048d0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f8d3 33bc 	ldr.w	r3, [r3, #956]	@ 0x3bc
 80048da:	1c5a      	adds	r2, r3, #1
 80048dc:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80048e0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f8c3 23bc 	str.w	r2, [r3, #956]	@ 0x3bc
#endif
	return SIM7600_OK;
 80048ea:	2301      	movs	r3, #1
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	f507 77d4 	add.w	r7, r7, #424	@ 0x1a8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bdb0      	pop	{r4, r5, r7, pc}
 80048f6:	bf00      	nop
 80048f8:	0800ec38 	.word	0x0800ec38
 80048fc:	0800eb94 	.word	0x0800eb94
 8004900:	0800ecd8 	.word	0x0800ecd8
 8004904:	0800ee0c 	.word	0x0800ee0c
 8004908:	0800ecf8 	.word	0x0800ecf8
 800490c:	0800ed14 	.word	0x0800ed14
 8004910:	0800ee20 	.word	0x0800ee20
 8004914:	0800ee4c 	.word	0x0800ee4c
 8004918:	0800ee60 	.word	0x0800ee60
 800491c:	0800ee78 	.word	0x0800ee78
 8004920:	0800ee84 	.word	0x0800ee84
 8004924:	0800ee8c 	.word	0x0800ee8c
 8004928:	0800eea0 	.word	0x0800eea0
 800492c:	0800ed50 	.word	0x0800ed50
 8004930:	0800ede0 	.word	0x0800ede0
 8004934:	0800edf0 	.word	0x0800edf0
 8004938:	0800eeb4 	.word	0x0800eeb4

0800493c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004940:	4b0e      	ldr	r3, [pc, #56]	@ (800497c <HAL_Init+0x40>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a0d      	ldr	r2, [pc, #52]	@ (800497c <HAL_Init+0x40>)
 8004946:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800494a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800494c:	4b0b      	ldr	r3, [pc, #44]	@ (800497c <HAL_Init+0x40>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a0a      	ldr	r2, [pc, #40]	@ (800497c <HAL_Init+0x40>)
 8004952:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004956:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004958:	4b08      	ldr	r3, [pc, #32]	@ (800497c <HAL_Init+0x40>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a07      	ldr	r2, [pc, #28]	@ (800497c <HAL_Init+0x40>)
 800495e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004962:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004964:	2003      	movs	r0, #3
 8004966:	f000 f94f 	bl	8004c08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800496a:	200f      	movs	r0, #15
 800496c:	f000 f808 	bl	8004980 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004970:	f7fd fab2 	bl	8001ed8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	40023c00 	.word	0x40023c00

08004980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004988:	4b12      	ldr	r3, [pc, #72]	@ (80049d4 <HAL_InitTick+0x54>)
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	4b12      	ldr	r3, [pc, #72]	@ (80049d8 <HAL_InitTick+0x58>)
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	4619      	mov	r1, r3
 8004992:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004996:	fbb3 f3f1 	udiv	r3, r3, r1
 800499a:	fbb2 f3f3 	udiv	r3, r2, r3
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 f967 	bl	8004c72 <HAL_SYSTICK_Config>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e00e      	b.n	80049cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2b0f      	cmp	r3, #15
 80049b2:	d80a      	bhi.n	80049ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80049b4:	2200      	movs	r2, #0
 80049b6:	6879      	ldr	r1, [r7, #4]
 80049b8:	f04f 30ff 	mov.w	r0, #4294967295
 80049bc:	f000 f92f 	bl	8004c1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80049c0:	4a06      	ldr	r2, [pc, #24]	@ (80049dc <HAL_InitTick+0x5c>)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
 80049c8:	e000      	b.n	80049cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	20000004 	.word	0x20000004
 80049d8:	2000003c 	.word	0x2000003c
 80049dc:	20000038 	.word	0x20000038

080049e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80049e4:	4b06      	ldr	r3, [pc, #24]	@ (8004a00 <HAL_IncTick+0x20>)
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	461a      	mov	r2, r3
 80049ea:	4b06      	ldr	r3, [pc, #24]	@ (8004a04 <HAL_IncTick+0x24>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4413      	add	r3, r2
 80049f0:	4a04      	ldr	r2, [pc, #16]	@ (8004a04 <HAL_IncTick+0x24>)
 80049f2:	6013      	str	r3, [r2, #0]
}
 80049f4:	bf00      	nop
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	2000003c 	.word	0x2000003c
 8004a04:	20000e00 	.word	0x20000e00

08004a08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8004a0c:	4b03      	ldr	r3, [pc, #12]	@ (8004a1c <HAL_GetTick+0x14>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	20000e00 	.word	0x20000e00

08004a20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a28:	f7ff ffee 	bl	8004a08 <HAL_GetTick>
 8004a2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a38:	d005      	beq.n	8004a46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8004a64 <HAL_Delay+0x44>)
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	461a      	mov	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4413      	add	r3, r2
 8004a44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004a46:	bf00      	nop
 8004a48:	f7ff ffde 	bl	8004a08 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d8f7      	bhi.n	8004a48 <HAL_Delay+0x28>
  {
  }
}
 8004a58:	bf00      	nop
 8004a5a:	bf00      	nop
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	2000003c 	.word	0x2000003c

08004a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a78:	4b0c      	ldr	r3, [pc, #48]	@ (8004aac <__NVIC_SetPriorityGrouping+0x44>)
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a84:	4013      	ands	r3, r2
 8004a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004a94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a9a:	4a04      	ldr	r2, [pc, #16]	@ (8004aac <__NVIC_SetPriorityGrouping+0x44>)
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	60d3      	str	r3, [r2, #12]
}
 8004aa0:	bf00      	nop
 8004aa2:	3714      	adds	r7, #20
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	e000ed00 	.word	0xe000ed00

08004ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ab4:	4b04      	ldr	r3, [pc, #16]	@ (8004ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	0a1b      	lsrs	r3, r3, #8
 8004aba:	f003 0307 	and.w	r3, r3, #7
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	e000ed00 	.word	0xe000ed00

08004acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	db0b      	blt.n	8004af6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ade:	79fb      	ldrb	r3, [r7, #7]
 8004ae0:	f003 021f 	and.w	r2, r3, #31
 8004ae4:	4907      	ldr	r1, [pc, #28]	@ (8004b04 <__NVIC_EnableIRQ+0x38>)
 8004ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aea:	095b      	lsrs	r3, r3, #5
 8004aec:	2001      	movs	r0, #1
 8004aee:	fa00 f202 	lsl.w	r2, r0, r2
 8004af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	e000e100 	.word	0xe000e100

08004b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	4603      	mov	r3, r0
 8004b10:	6039      	str	r1, [r7, #0]
 8004b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	db0a      	blt.n	8004b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	b2da      	uxtb	r2, r3
 8004b20:	490c      	ldr	r1, [pc, #48]	@ (8004b54 <__NVIC_SetPriority+0x4c>)
 8004b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b26:	0112      	lsls	r2, r2, #4
 8004b28:	b2d2      	uxtb	r2, r2
 8004b2a:	440b      	add	r3, r1
 8004b2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b30:	e00a      	b.n	8004b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	b2da      	uxtb	r2, r3
 8004b36:	4908      	ldr	r1, [pc, #32]	@ (8004b58 <__NVIC_SetPriority+0x50>)
 8004b38:	79fb      	ldrb	r3, [r7, #7]
 8004b3a:	f003 030f 	and.w	r3, r3, #15
 8004b3e:	3b04      	subs	r3, #4
 8004b40:	0112      	lsls	r2, r2, #4
 8004b42:	b2d2      	uxtb	r2, r2
 8004b44:	440b      	add	r3, r1
 8004b46:	761a      	strb	r2, [r3, #24]
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	e000e100 	.word	0xe000e100
 8004b58:	e000ed00 	.word	0xe000ed00

08004b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b089      	sub	sp, #36	@ 0x24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f003 0307 	and.w	r3, r3, #7
 8004b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	f1c3 0307 	rsb	r3, r3, #7
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	bf28      	it	cs
 8004b7a:	2304      	movcs	r3, #4
 8004b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	3304      	adds	r3, #4
 8004b82:	2b06      	cmp	r3, #6
 8004b84:	d902      	bls.n	8004b8c <NVIC_EncodePriority+0x30>
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	3b03      	subs	r3, #3
 8004b8a:	e000      	b.n	8004b8e <NVIC_EncodePriority+0x32>
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b90:	f04f 32ff 	mov.w	r2, #4294967295
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9a:	43da      	mvns	r2, r3
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	401a      	ands	r2, r3
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	fa01 f303 	lsl.w	r3, r1, r3
 8004bae:	43d9      	mvns	r1, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bb4:	4313      	orrs	r3, r2
         );
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3724      	adds	r7, #36	@ 0x24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
	...

08004bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bd4:	d301      	bcc.n	8004bda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e00f      	b.n	8004bfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004bda:	4a0a      	ldr	r2, [pc, #40]	@ (8004c04 <SysTick_Config+0x40>)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	3b01      	subs	r3, #1
 8004be0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004be2:	210f      	movs	r1, #15
 8004be4:	f04f 30ff 	mov.w	r0, #4294967295
 8004be8:	f7ff ff8e 	bl	8004b08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bec:	4b05      	ldr	r3, [pc, #20]	@ (8004c04 <SysTick_Config+0x40>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bf2:	4b04      	ldr	r3, [pc, #16]	@ (8004c04 <SysTick_Config+0x40>)
 8004bf4:	2207      	movs	r2, #7
 8004bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	e000e010 	.word	0xe000e010

08004c08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f7ff ff29 	bl	8004a68 <__NVIC_SetPriorityGrouping>
}
 8004c16:	bf00      	nop
 8004c18:	3708      	adds	r7, #8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b086      	sub	sp, #24
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	4603      	mov	r3, r0
 8004c26:	60b9      	str	r1, [r7, #8]
 8004c28:	607a      	str	r2, [r7, #4]
 8004c2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c30:	f7ff ff3e 	bl	8004ab0 <__NVIC_GetPriorityGrouping>
 8004c34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	68b9      	ldr	r1, [r7, #8]
 8004c3a:	6978      	ldr	r0, [r7, #20]
 8004c3c:	f7ff ff8e 	bl	8004b5c <NVIC_EncodePriority>
 8004c40:	4602      	mov	r2, r0
 8004c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c46:	4611      	mov	r1, r2
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7ff ff5d 	bl	8004b08 <__NVIC_SetPriority>
}
 8004c4e:	bf00      	nop
 8004c50:	3718      	adds	r7, #24
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b082      	sub	sp, #8
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7ff ff31 	bl	8004acc <__NVIC_EnableIRQ>
}
 8004c6a:	bf00      	nop
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b082      	sub	sp, #8
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7ff ffa2 	bl	8004bc4 <SysTick_Config>
 8004c80:	4603      	mov	r3, r0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
	...

08004c8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004c94:	2300      	movs	r3, #0
 8004c96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004c98:	f7ff feb6 	bl	8004a08 <HAL_GetTick>
 8004c9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d101      	bne.n	8004ca8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e099      	b.n	8004ddc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2202      	movs	r2, #2
 8004cac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 0201 	bic.w	r2, r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004cc8:	e00f      	b.n	8004cea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004cca:	f7ff fe9d 	bl	8004a08 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b05      	cmp	r3, #5
 8004cd6:	d908      	bls.n	8004cea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2203      	movs	r2, #3
 8004ce2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e078      	b.n	8004ddc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1e8      	bne.n	8004cca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	4b38      	ldr	r3, [pc, #224]	@ (8004de4 <HAL_DMA_Init+0x158>)
 8004d04:	4013      	ands	r3, r2
 8004d06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d40:	2b04      	cmp	r3, #4
 8004d42:	d107      	bne.n	8004d54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f023 0307 	bic.w	r3, r3, #7
 8004d6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7a:	2b04      	cmp	r3, #4
 8004d7c:	d117      	bne.n	8004dae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00e      	beq.n	8004dae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 fb01 	bl	8005398 <DMA_CheckFifoParam>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d008      	beq.n	8004dae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2240      	movs	r2, #64	@ 0x40
 8004da0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004daa:	2301      	movs	r3, #1
 8004dac:	e016      	b.n	8004ddc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 fab8 	bl	800532c <DMA_CalcBaseAndBitshift>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dc4:	223f      	movs	r2, #63	@ 0x3f
 8004dc6:	409a      	lsls	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3718      	adds	r7, #24
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	f010803f 	.word	0xf010803f

08004de8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
 8004df4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004df6:	2300      	movs	r3, #0
 8004df8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dfe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d101      	bne.n	8004e0e <HAL_DMA_Start_IT+0x26>
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	e040      	b.n	8004e90 <HAL_DMA_Start_IT+0xa8>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d12f      	bne.n	8004e82 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2202      	movs	r2, #2
 8004e26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	68b9      	ldr	r1, [r7, #8]
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f000 fa4a 	bl	80052d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e40:	223f      	movs	r2, #63	@ 0x3f
 8004e42:	409a      	lsls	r2, r3
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f042 0216 	orr.w	r2, r2, #22
 8004e56:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d007      	beq.n	8004e70 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f042 0208 	orr.w	r2, r2, #8
 8004e6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f042 0201 	orr.w	r2, r2, #1
 8004e7e:	601a      	str	r2, [r3, #0]
 8004e80:	e005      	b.n	8004e8e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3718      	adds	r7, #24
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ea4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004ea6:	f7ff fdaf 	bl	8004a08 <HAL_GetTick>
 8004eaa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d008      	beq.n	8004eca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2280      	movs	r2, #128	@ 0x80
 8004ebc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e052      	b.n	8004f70 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 0216 	bic.w	r2, r2, #22
 8004ed8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	695a      	ldr	r2, [r3, #20]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ee8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d103      	bne.n	8004efa <HAL_DMA_Abort+0x62>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d007      	beq.n	8004f0a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 0208 	bic.w	r2, r2, #8
 8004f08:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f022 0201 	bic.w	r2, r2, #1
 8004f18:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f1a:	e013      	b.n	8004f44 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f1c:	f7ff fd74 	bl	8004a08 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	2b05      	cmp	r3, #5
 8004f28:	d90c      	bls.n	8004f44 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2203      	movs	r2, #3
 8004f34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e015      	b.n	8004f70 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1e4      	bne.n	8004f1c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f56:	223f      	movs	r2, #63	@ 0x3f
 8004f58:	409a      	lsls	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d004      	beq.n	8004f96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2280      	movs	r2, #128	@ 0x80
 8004f90:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e00c      	b.n	8004fb0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2205      	movs	r2, #5
 8004f9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 0201 	bic.w	r2, r2, #1
 8004fac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b086      	sub	sp, #24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004fc8:	4b8e      	ldr	r3, [pc, #568]	@ (8005204 <HAL_DMA_IRQHandler+0x248>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a8e      	ldr	r2, [pc, #568]	@ (8005208 <HAL_DMA_IRQHandler+0x24c>)
 8004fce:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd2:	0a9b      	lsrs	r3, r3, #10
 8004fd4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fe6:	2208      	movs	r2, #8
 8004fe8:	409a      	lsls	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	4013      	ands	r3, r2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d01a      	beq.n	8005028 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0304 	and.w	r3, r3, #4
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d013      	beq.n	8005028 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 0204 	bic.w	r2, r2, #4
 800500e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005014:	2208      	movs	r2, #8
 8005016:	409a      	lsls	r2, r3
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005020:	f043 0201 	orr.w	r2, r3, #1
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800502c:	2201      	movs	r2, #1
 800502e:	409a      	lsls	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4013      	ands	r3, r2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d012      	beq.n	800505e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00b      	beq.n	800505e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800504a:	2201      	movs	r2, #1
 800504c:	409a      	lsls	r2, r3
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005056:	f043 0202 	orr.w	r2, r3, #2
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005062:	2204      	movs	r2, #4
 8005064:	409a      	lsls	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	4013      	ands	r3, r2
 800506a:	2b00      	cmp	r3, #0
 800506c:	d012      	beq.n	8005094 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00b      	beq.n	8005094 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005080:	2204      	movs	r2, #4
 8005082:	409a      	lsls	r2, r3
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800508c:	f043 0204 	orr.w	r2, r3, #4
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005098:	2210      	movs	r2, #16
 800509a:	409a      	lsls	r2, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4013      	ands	r3, r2
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d043      	beq.n	800512c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0308 	and.w	r3, r3, #8
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d03c      	beq.n	800512c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050b6:	2210      	movs	r2, #16
 80050b8:	409a      	lsls	r2, r3
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d018      	beq.n	80050fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d108      	bne.n	80050ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d024      	beq.n	800512c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	4798      	blx	r3
 80050ea:	e01f      	b.n	800512c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d01b      	beq.n	800512c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	4798      	blx	r3
 80050fc:	e016      	b.n	800512c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005108:	2b00      	cmp	r3, #0
 800510a:	d107      	bne.n	800511c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f022 0208 	bic.w	r2, r2, #8
 800511a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005120:	2b00      	cmp	r3, #0
 8005122:	d003      	beq.n	800512c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005130:	2220      	movs	r2, #32
 8005132:	409a      	lsls	r2, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	4013      	ands	r3, r2
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 808f 	beq.w	800525c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0310 	and.w	r3, r3, #16
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 8087 	beq.w	800525c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005152:	2220      	movs	r2, #32
 8005154:	409a      	lsls	r2, r3
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b05      	cmp	r3, #5
 8005164:	d136      	bne.n	80051d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 0216 	bic.w	r2, r2, #22
 8005174:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	695a      	ldr	r2, [r3, #20]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005184:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518a:	2b00      	cmp	r3, #0
 800518c:	d103      	bne.n	8005196 <HAL_DMA_IRQHandler+0x1da>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005192:	2b00      	cmp	r3, #0
 8005194:	d007      	beq.n	80051a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f022 0208 	bic.w	r2, r2, #8
 80051a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051aa:	223f      	movs	r2, #63	@ 0x3f
 80051ac:	409a      	lsls	r2, r3
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d07e      	beq.n	80052c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	4798      	blx	r3
        }
        return;
 80051d2:	e079      	b.n	80052c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d01d      	beq.n	800521e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10d      	bne.n	800520c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d031      	beq.n	800525c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	4798      	blx	r3
 8005200:	e02c      	b.n	800525c <HAL_DMA_IRQHandler+0x2a0>
 8005202:	bf00      	nop
 8005204:	20000004 	.word	0x20000004
 8005208:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005210:	2b00      	cmp	r3, #0
 8005212:	d023      	beq.n	800525c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	4798      	blx	r3
 800521c:	e01e      	b.n	800525c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005228:	2b00      	cmp	r3, #0
 800522a:	d10f      	bne.n	800524c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 0210 	bic.w	r2, r2, #16
 800523a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005250:	2b00      	cmp	r3, #0
 8005252:	d003      	beq.n	800525c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005260:	2b00      	cmp	r3, #0
 8005262:	d032      	beq.n	80052ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	2b00      	cmp	r3, #0
 800526e:	d022      	beq.n	80052b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2205      	movs	r2, #5
 8005274:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f022 0201 	bic.w	r2, r2, #1
 8005286:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	3301      	adds	r3, #1
 800528c:	60bb      	str	r3, [r7, #8]
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	429a      	cmp	r2, r3
 8005292:	d307      	bcc.n	80052a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1f2      	bne.n	8005288 <HAL_DMA_IRQHandler+0x2cc>
 80052a2:	e000      	b.n	80052a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80052a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d005      	beq.n	80052ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	4798      	blx	r3
 80052c6:	e000      	b.n	80052ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80052c8:	bf00      	nop
    }
  }
}
 80052ca:	3718      	adds	r7, #24
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
 80052dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80052ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	2b40      	cmp	r3, #64	@ 0x40
 80052fc:	d108      	bne.n	8005310 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800530e:	e007      	b.n	8005320 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68ba      	ldr	r2, [r7, #8]
 8005316:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	60da      	str	r2, [r3, #12]
}
 8005320:	bf00      	nop
 8005322:	3714      	adds	r7, #20
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	b2db      	uxtb	r3, r3
 800533a:	3b10      	subs	r3, #16
 800533c:	4a14      	ldr	r2, [pc, #80]	@ (8005390 <DMA_CalcBaseAndBitshift+0x64>)
 800533e:	fba2 2303 	umull	r2, r3, r2, r3
 8005342:	091b      	lsrs	r3, r3, #4
 8005344:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005346:	4a13      	ldr	r2, [pc, #76]	@ (8005394 <DMA_CalcBaseAndBitshift+0x68>)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	4413      	add	r3, r2
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	461a      	mov	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2b03      	cmp	r3, #3
 8005358:	d909      	bls.n	800536e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005362:	f023 0303 	bic.w	r3, r3, #3
 8005366:	1d1a      	adds	r2, r3, #4
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	659a      	str	r2, [r3, #88]	@ 0x58
 800536c:	e007      	b.n	800537e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005376:	f023 0303 	bic.w	r3, r3, #3
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005382:	4618      	mov	r0, r3
 8005384:	3714      	adds	r7, #20
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	aaaaaaab 	.word	0xaaaaaaab
 8005394:	0800eee8 	.word	0x0800eee8

08005398 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053a0:	2300      	movs	r3, #0
 80053a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d11f      	bne.n	80053f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	2b03      	cmp	r3, #3
 80053b6:	d856      	bhi.n	8005466 <DMA_CheckFifoParam+0xce>
 80053b8:	a201      	add	r2, pc, #4	@ (adr r2, 80053c0 <DMA_CheckFifoParam+0x28>)
 80053ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053be:	bf00      	nop
 80053c0:	080053d1 	.word	0x080053d1
 80053c4:	080053e3 	.word	0x080053e3
 80053c8:	080053d1 	.word	0x080053d1
 80053cc:	08005467 	.word	0x08005467
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d046      	beq.n	800546a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053e0:	e043      	b.n	800546a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80053ea:	d140      	bne.n	800546e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053f0:	e03d      	b.n	800546e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053fa:	d121      	bne.n	8005440 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	2b03      	cmp	r3, #3
 8005400:	d837      	bhi.n	8005472 <DMA_CheckFifoParam+0xda>
 8005402:	a201      	add	r2, pc, #4	@ (adr r2, 8005408 <DMA_CheckFifoParam+0x70>)
 8005404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005408:	08005419 	.word	0x08005419
 800540c:	0800541f 	.word	0x0800541f
 8005410:	08005419 	.word	0x08005419
 8005414:	08005431 	.word	0x08005431
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	73fb      	strb	r3, [r7, #15]
      break;
 800541c:	e030      	b.n	8005480 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005422:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d025      	beq.n	8005476 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800542e:	e022      	b.n	8005476 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005434:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005438:	d11f      	bne.n	800547a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800543e:	e01c      	b.n	800547a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	2b02      	cmp	r3, #2
 8005444:	d903      	bls.n	800544e <DMA_CheckFifoParam+0xb6>
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	2b03      	cmp	r3, #3
 800544a:	d003      	beq.n	8005454 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800544c:	e018      	b.n	8005480 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	73fb      	strb	r3, [r7, #15]
      break;
 8005452:	e015      	b.n	8005480 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005458:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00e      	beq.n	800547e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	73fb      	strb	r3, [r7, #15]
      break;
 8005464:	e00b      	b.n	800547e <DMA_CheckFifoParam+0xe6>
      break;
 8005466:	bf00      	nop
 8005468:	e00a      	b.n	8005480 <DMA_CheckFifoParam+0xe8>
      break;
 800546a:	bf00      	nop
 800546c:	e008      	b.n	8005480 <DMA_CheckFifoParam+0xe8>
      break;
 800546e:	bf00      	nop
 8005470:	e006      	b.n	8005480 <DMA_CheckFifoParam+0xe8>
      break;
 8005472:	bf00      	nop
 8005474:	e004      	b.n	8005480 <DMA_CheckFifoParam+0xe8>
      break;
 8005476:	bf00      	nop
 8005478:	e002      	b.n	8005480 <DMA_CheckFifoParam+0xe8>
      break;   
 800547a:	bf00      	nop
 800547c:	e000      	b.n	8005480 <DMA_CheckFifoParam+0xe8>
      break;
 800547e:	bf00      	nop
    }
  } 
  
  return status; 
 8005480:	7bfb      	ldrb	r3, [r7, #15]
}
 8005482:	4618      	mov	r0, r3
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop

08005490 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005490:	b480      	push	{r7}
 8005492:	b089      	sub	sp, #36	@ 0x24
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800549a:	2300      	movs	r3, #0
 800549c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800549e:	2300      	movs	r3, #0
 80054a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80054a2:	2300      	movs	r3, #0
 80054a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054a6:	2300      	movs	r3, #0
 80054a8:	61fb      	str	r3, [r7, #28]
 80054aa:	e16b      	b.n	8005784 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80054ac:	2201      	movs	r2, #1
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	fa02 f303 	lsl.w	r3, r2, r3
 80054b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	4013      	ands	r3, r2
 80054be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	f040 815a 	bne.w	800577e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f003 0303 	and.w	r3, r3, #3
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d005      	beq.n	80054e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d130      	bne.n	8005544 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	005b      	lsls	r3, r3, #1
 80054ec:	2203      	movs	r2, #3
 80054ee:	fa02 f303 	lsl.w	r3, r2, r3
 80054f2:	43db      	mvns	r3, r3
 80054f4:	69ba      	ldr	r2, [r7, #24]
 80054f6:	4013      	ands	r3, r2
 80054f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	68da      	ldr	r2, [r3, #12]
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	005b      	lsls	r3, r3, #1
 8005502:	fa02 f303 	lsl.w	r3, r2, r3
 8005506:	69ba      	ldr	r2, [r7, #24]
 8005508:	4313      	orrs	r3, r2
 800550a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005518:	2201      	movs	r2, #1
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	fa02 f303 	lsl.w	r3, r2, r3
 8005520:	43db      	mvns	r3, r3
 8005522:	69ba      	ldr	r2, [r7, #24]
 8005524:	4013      	ands	r3, r2
 8005526:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	091b      	lsrs	r3, r3, #4
 800552e:	f003 0201 	and.w	r2, r3, #1
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	fa02 f303 	lsl.w	r3, r2, r3
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	4313      	orrs	r3, r2
 800553c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f003 0303 	and.w	r3, r3, #3
 800554c:	2b03      	cmp	r3, #3
 800554e:	d017      	beq.n	8005580 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	005b      	lsls	r3, r3, #1
 800555a:	2203      	movs	r2, #3
 800555c:	fa02 f303 	lsl.w	r3, r2, r3
 8005560:	43db      	mvns	r3, r3
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	4013      	ands	r3, r2
 8005566:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	005b      	lsls	r3, r3, #1
 8005570:	fa02 f303 	lsl.w	r3, r2, r3
 8005574:	69ba      	ldr	r2, [r7, #24]
 8005576:	4313      	orrs	r3, r2
 8005578:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	69ba      	ldr	r2, [r7, #24]
 800557e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f003 0303 	and.w	r3, r3, #3
 8005588:	2b02      	cmp	r3, #2
 800558a:	d123      	bne.n	80055d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	08da      	lsrs	r2, r3, #3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	3208      	adds	r2, #8
 8005594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005598:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	f003 0307 	and.w	r3, r3, #7
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	220f      	movs	r2, #15
 80055a4:	fa02 f303 	lsl.w	r3, r2, r3
 80055a8:	43db      	mvns	r3, r3
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	4013      	ands	r3, r2
 80055ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	691a      	ldr	r2, [r3, #16]
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	f003 0307 	and.w	r3, r3, #7
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	fa02 f303 	lsl.w	r3, r2, r3
 80055c0:	69ba      	ldr	r2, [r7, #24]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	08da      	lsrs	r2, r3, #3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	3208      	adds	r2, #8
 80055ce:	69b9      	ldr	r1, [r7, #24]
 80055d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	2203      	movs	r2, #3
 80055e0:	fa02 f303 	lsl.w	r3, r2, r3
 80055e4:	43db      	mvns	r3, r3
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	4013      	ands	r3, r2
 80055ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f003 0203 	and.w	r2, r3, #3
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	005b      	lsls	r3, r3, #1
 80055f8:	fa02 f303 	lsl.w	r3, r2, r3
 80055fc:	69ba      	ldr	r2, [r7, #24]
 80055fe:	4313      	orrs	r3, r2
 8005600:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	69ba      	ldr	r2, [r7, #24]
 8005606:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005610:	2b00      	cmp	r3, #0
 8005612:	f000 80b4 	beq.w	800577e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005616:	2300      	movs	r3, #0
 8005618:	60fb      	str	r3, [r7, #12]
 800561a:	4b60      	ldr	r3, [pc, #384]	@ (800579c <HAL_GPIO_Init+0x30c>)
 800561c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800561e:	4a5f      	ldr	r2, [pc, #380]	@ (800579c <HAL_GPIO_Init+0x30c>)
 8005620:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005624:	6453      	str	r3, [r2, #68]	@ 0x44
 8005626:	4b5d      	ldr	r3, [pc, #372]	@ (800579c <HAL_GPIO_Init+0x30c>)
 8005628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800562a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800562e:	60fb      	str	r3, [r7, #12]
 8005630:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005632:	4a5b      	ldr	r2, [pc, #364]	@ (80057a0 <HAL_GPIO_Init+0x310>)
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	089b      	lsrs	r3, r3, #2
 8005638:	3302      	adds	r3, #2
 800563a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800563e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	f003 0303 	and.w	r3, r3, #3
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	220f      	movs	r2, #15
 800564a:	fa02 f303 	lsl.w	r3, r2, r3
 800564e:	43db      	mvns	r3, r3
 8005650:	69ba      	ldr	r2, [r7, #24]
 8005652:	4013      	ands	r3, r2
 8005654:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a52      	ldr	r2, [pc, #328]	@ (80057a4 <HAL_GPIO_Init+0x314>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d02b      	beq.n	80056b6 <HAL_GPIO_Init+0x226>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a51      	ldr	r2, [pc, #324]	@ (80057a8 <HAL_GPIO_Init+0x318>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d025      	beq.n	80056b2 <HAL_GPIO_Init+0x222>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a50      	ldr	r2, [pc, #320]	@ (80057ac <HAL_GPIO_Init+0x31c>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d01f      	beq.n	80056ae <HAL_GPIO_Init+0x21e>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a4f      	ldr	r2, [pc, #316]	@ (80057b0 <HAL_GPIO_Init+0x320>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d019      	beq.n	80056aa <HAL_GPIO_Init+0x21a>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a4e      	ldr	r2, [pc, #312]	@ (80057b4 <HAL_GPIO_Init+0x324>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d013      	beq.n	80056a6 <HAL_GPIO_Init+0x216>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a4d      	ldr	r2, [pc, #308]	@ (80057b8 <HAL_GPIO_Init+0x328>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d00d      	beq.n	80056a2 <HAL_GPIO_Init+0x212>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a4c      	ldr	r2, [pc, #304]	@ (80057bc <HAL_GPIO_Init+0x32c>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d007      	beq.n	800569e <HAL_GPIO_Init+0x20e>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a4b      	ldr	r2, [pc, #300]	@ (80057c0 <HAL_GPIO_Init+0x330>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d101      	bne.n	800569a <HAL_GPIO_Init+0x20a>
 8005696:	2307      	movs	r3, #7
 8005698:	e00e      	b.n	80056b8 <HAL_GPIO_Init+0x228>
 800569a:	2308      	movs	r3, #8
 800569c:	e00c      	b.n	80056b8 <HAL_GPIO_Init+0x228>
 800569e:	2306      	movs	r3, #6
 80056a0:	e00a      	b.n	80056b8 <HAL_GPIO_Init+0x228>
 80056a2:	2305      	movs	r3, #5
 80056a4:	e008      	b.n	80056b8 <HAL_GPIO_Init+0x228>
 80056a6:	2304      	movs	r3, #4
 80056a8:	e006      	b.n	80056b8 <HAL_GPIO_Init+0x228>
 80056aa:	2303      	movs	r3, #3
 80056ac:	e004      	b.n	80056b8 <HAL_GPIO_Init+0x228>
 80056ae:	2302      	movs	r3, #2
 80056b0:	e002      	b.n	80056b8 <HAL_GPIO_Init+0x228>
 80056b2:	2301      	movs	r3, #1
 80056b4:	e000      	b.n	80056b8 <HAL_GPIO_Init+0x228>
 80056b6:	2300      	movs	r3, #0
 80056b8:	69fa      	ldr	r2, [r7, #28]
 80056ba:	f002 0203 	and.w	r2, r2, #3
 80056be:	0092      	lsls	r2, r2, #2
 80056c0:	4093      	lsls	r3, r2
 80056c2:	69ba      	ldr	r2, [r7, #24]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80056c8:	4935      	ldr	r1, [pc, #212]	@ (80057a0 <HAL_GPIO_Init+0x310>)
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	089b      	lsrs	r3, r3, #2
 80056ce:	3302      	adds	r3, #2
 80056d0:	69ba      	ldr	r2, [r7, #24]
 80056d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80056d6:	4b3b      	ldr	r3, [pc, #236]	@ (80057c4 <HAL_GPIO_Init+0x334>)
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	43db      	mvns	r3, r3
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	4013      	ands	r3, r2
 80056e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d003      	beq.n	80056fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80056f2:	69ba      	ldr	r2, [r7, #24]
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80056fa:	4a32      	ldr	r2, [pc, #200]	@ (80057c4 <HAL_GPIO_Init+0x334>)
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005700:	4b30      	ldr	r3, [pc, #192]	@ (80057c4 <HAL_GPIO_Init+0x334>)
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	43db      	mvns	r3, r3
 800570a:	69ba      	ldr	r2, [r7, #24]
 800570c:	4013      	ands	r3, r2
 800570e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d003      	beq.n	8005724 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	4313      	orrs	r3, r2
 8005722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005724:	4a27      	ldr	r2, [pc, #156]	@ (80057c4 <HAL_GPIO_Init+0x334>)
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800572a:	4b26      	ldr	r3, [pc, #152]	@ (80057c4 <HAL_GPIO_Init+0x334>)
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	43db      	mvns	r3, r3
 8005734:	69ba      	ldr	r2, [r7, #24]
 8005736:	4013      	ands	r3, r2
 8005738:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d003      	beq.n	800574e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005746:	69ba      	ldr	r2, [r7, #24]
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	4313      	orrs	r3, r2
 800574c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800574e:	4a1d      	ldr	r2, [pc, #116]	@ (80057c4 <HAL_GPIO_Init+0x334>)
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005754:	4b1b      	ldr	r3, [pc, #108]	@ (80057c4 <HAL_GPIO_Init+0x334>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	43db      	mvns	r3, r3
 800575e:	69ba      	ldr	r2, [r7, #24]
 8005760:	4013      	ands	r3, r2
 8005762:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d003      	beq.n	8005778 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	4313      	orrs	r3, r2
 8005776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005778:	4a12      	ldr	r2, [pc, #72]	@ (80057c4 <HAL_GPIO_Init+0x334>)
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	3301      	adds	r3, #1
 8005782:	61fb      	str	r3, [r7, #28]
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	2b0f      	cmp	r3, #15
 8005788:	f67f ae90 	bls.w	80054ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800578c:	bf00      	nop
 800578e:	bf00      	nop
 8005790:	3724      	adds	r7, #36	@ 0x24
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	40023800 	.word	0x40023800
 80057a0:	40013800 	.word	0x40013800
 80057a4:	40020000 	.word	0x40020000
 80057a8:	40020400 	.word	0x40020400
 80057ac:	40020800 	.word	0x40020800
 80057b0:	40020c00 	.word	0x40020c00
 80057b4:	40021000 	.word	0x40021000
 80057b8:	40021400 	.word	0x40021400
 80057bc:	40021800 	.word	0x40021800
 80057c0:	40021c00 	.word	0x40021c00
 80057c4:	40013c00 	.word	0x40013c00

080057c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	460b      	mov	r3, r1
 80057d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	691a      	ldr	r2, [r3, #16]
 80057d8:	887b      	ldrh	r3, [r7, #2]
 80057da:	4013      	ands	r3, r2
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d002      	beq.n	80057e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80057e0:	2301      	movs	r3, #1
 80057e2:	73fb      	strb	r3, [r7, #15]
 80057e4:	e001      	b.n	80057ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80057e6:	2300      	movs	r3, #0
 80057e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80057ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	460b      	mov	r3, r1
 8005802:	807b      	strh	r3, [r7, #2]
 8005804:	4613      	mov	r3, r2
 8005806:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005808:	787b      	ldrb	r3, [r7, #1]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d003      	beq.n	8005816 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800580e:	887a      	ldrh	r2, [r7, #2]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005814:	e003      	b.n	800581e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005816:	887b      	ldrh	r3, [r7, #2]
 8005818:	041a      	lsls	r2, r3, #16
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	619a      	str	r2, [r3, #24]
}
 800581e:	bf00      	nop
 8005820:	370c      	adds	r7, #12
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
	...

0800582c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	4603      	mov	r3, r0
 8005834:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005836:	4b08      	ldr	r3, [pc, #32]	@ (8005858 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005838:	695a      	ldr	r2, [r3, #20]
 800583a:	88fb      	ldrh	r3, [r7, #6]
 800583c:	4013      	ands	r3, r2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d006      	beq.n	8005850 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005842:	4a05      	ldr	r2, [pc, #20]	@ (8005858 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005844:	88fb      	ldrh	r3, [r7, #6]
 8005846:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005848:	88fb      	ldrh	r3, [r7, #6]
 800584a:	4618      	mov	r0, r3
 800584c:	f7fb fc54 	bl	80010f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8005850:	bf00      	nop
 8005852:	3708      	adds	r7, #8
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	40013c00 	.word	0x40013c00

0800585c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e12b      	b.n	8005ac6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d106      	bne.n	8005888 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7fc fb50 	bl	8001f28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2224      	movs	r2, #36	@ 0x24
 800588c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f022 0201 	bic.w	r2, r2, #1
 800589e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80058ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80058be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80058c0:	f002 f8a0 	bl	8007a04 <HAL_RCC_GetPCLK1Freq>
 80058c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	4a81      	ldr	r2, [pc, #516]	@ (8005ad0 <HAL_I2C_Init+0x274>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d807      	bhi.n	80058e0 <HAL_I2C_Init+0x84>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	4a80      	ldr	r2, [pc, #512]	@ (8005ad4 <HAL_I2C_Init+0x278>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	bf94      	ite	ls
 80058d8:	2301      	movls	r3, #1
 80058da:	2300      	movhi	r3, #0
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	e006      	b.n	80058ee <HAL_I2C_Init+0x92>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	4a7d      	ldr	r2, [pc, #500]	@ (8005ad8 <HAL_I2C_Init+0x27c>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	bf94      	ite	ls
 80058e8:	2301      	movls	r3, #1
 80058ea:	2300      	movhi	r3, #0
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d001      	beq.n	80058f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e0e7      	b.n	8005ac6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	4a78      	ldr	r2, [pc, #480]	@ (8005adc <HAL_I2C_Init+0x280>)
 80058fa:	fba2 2303 	umull	r2, r3, r2, r3
 80058fe:	0c9b      	lsrs	r3, r3, #18
 8005900:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	430a      	orrs	r2, r1
 8005914:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	4a6a      	ldr	r2, [pc, #424]	@ (8005ad0 <HAL_I2C_Init+0x274>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d802      	bhi.n	8005930 <HAL_I2C_Init+0xd4>
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	3301      	adds	r3, #1
 800592e:	e009      	b.n	8005944 <HAL_I2C_Init+0xe8>
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005936:	fb02 f303 	mul.w	r3, r2, r3
 800593a:	4a69      	ldr	r2, [pc, #420]	@ (8005ae0 <HAL_I2C_Init+0x284>)
 800593c:	fba2 2303 	umull	r2, r3, r2, r3
 8005940:	099b      	lsrs	r3, r3, #6
 8005942:	3301      	adds	r3, #1
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	6812      	ldr	r2, [r2, #0]
 8005948:	430b      	orrs	r3, r1
 800594a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	69db      	ldr	r3, [r3, #28]
 8005952:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005956:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	495c      	ldr	r1, [pc, #368]	@ (8005ad0 <HAL_I2C_Init+0x274>)
 8005960:	428b      	cmp	r3, r1
 8005962:	d819      	bhi.n	8005998 <HAL_I2C_Init+0x13c>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	1e59      	subs	r1, r3, #1
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	005b      	lsls	r3, r3, #1
 800596e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005972:	1c59      	adds	r1, r3, #1
 8005974:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005978:	400b      	ands	r3, r1
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00a      	beq.n	8005994 <HAL_I2C_Init+0x138>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	1e59      	subs	r1, r3, #1
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	005b      	lsls	r3, r3, #1
 8005988:	fbb1 f3f3 	udiv	r3, r1, r3
 800598c:	3301      	adds	r3, #1
 800598e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005992:	e051      	b.n	8005a38 <HAL_I2C_Init+0x1dc>
 8005994:	2304      	movs	r3, #4
 8005996:	e04f      	b.n	8005a38 <HAL_I2C_Init+0x1dc>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d111      	bne.n	80059c4 <HAL_I2C_Init+0x168>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	1e58      	subs	r0, r3, #1
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6859      	ldr	r1, [r3, #4]
 80059a8:	460b      	mov	r3, r1
 80059aa:	005b      	lsls	r3, r3, #1
 80059ac:	440b      	add	r3, r1
 80059ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80059b2:	3301      	adds	r3, #1
 80059b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	bf0c      	ite	eq
 80059bc:	2301      	moveq	r3, #1
 80059be:	2300      	movne	r3, #0
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	e012      	b.n	80059ea <HAL_I2C_Init+0x18e>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	1e58      	subs	r0, r3, #1
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6859      	ldr	r1, [r3, #4]
 80059cc:	460b      	mov	r3, r1
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	440b      	add	r3, r1
 80059d2:	0099      	lsls	r1, r3, #2
 80059d4:	440b      	add	r3, r1
 80059d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80059da:	3301      	adds	r3, #1
 80059dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	bf0c      	ite	eq
 80059e4:	2301      	moveq	r3, #1
 80059e6:	2300      	movne	r3, #0
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <HAL_I2C_Init+0x196>
 80059ee:	2301      	movs	r3, #1
 80059f0:	e022      	b.n	8005a38 <HAL_I2C_Init+0x1dc>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10e      	bne.n	8005a18 <HAL_I2C_Init+0x1bc>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	1e58      	subs	r0, r3, #1
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6859      	ldr	r1, [r3, #4]
 8005a02:	460b      	mov	r3, r1
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	440b      	add	r3, r1
 8005a08:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a16:	e00f      	b.n	8005a38 <HAL_I2C_Init+0x1dc>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	1e58      	subs	r0, r3, #1
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6859      	ldr	r1, [r3, #4]
 8005a20:	460b      	mov	r3, r1
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	440b      	add	r3, r1
 8005a26:	0099      	lsls	r1, r3, #2
 8005a28:	440b      	add	r3, r1
 8005a2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a2e:	3301      	adds	r3, #1
 8005a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a38:	6879      	ldr	r1, [r7, #4]
 8005a3a:	6809      	ldr	r1, [r1, #0]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	69da      	ldr	r2, [r3, #28]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	431a      	orrs	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005a66:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	6911      	ldr	r1, [r2, #16]
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	68d2      	ldr	r2, [r2, #12]
 8005a72:	4311      	orrs	r1, r2
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	6812      	ldr	r2, [r2, #0]
 8005a78:	430b      	orrs	r3, r1
 8005a7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	695a      	ldr	r2, [r3, #20]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	431a      	orrs	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	430a      	orrs	r2, r1
 8005a96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f042 0201 	orr.w	r2, r2, #1
 8005aa6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	000186a0 	.word	0x000186a0
 8005ad4:	001e847f 	.word	0x001e847f
 8005ad8:	003d08ff 	.word	0x003d08ff
 8005adc:	431bde83 	.word	0x431bde83
 8005ae0:	10624dd3 	.word	0x10624dd3

08005ae4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b088      	sub	sp, #32
 8005ae8:	af02      	add	r7, sp, #8
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	607a      	str	r2, [r7, #4]
 8005aee:	461a      	mov	r2, r3
 8005af0:	460b      	mov	r3, r1
 8005af2:	817b      	strh	r3, [r7, #10]
 8005af4:	4613      	mov	r3, r2
 8005af6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005af8:	f7fe ff86 	bl	8004a08 <HAL_GetTick>
 8005afc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b20      	cmp	r3, #32
 8005b08:	f040 80e0 	bne.w	8005ccc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	9300      	str	r3, [sp, #0]
 8005b10:	2319      	movs	r3, #25
 8005b12:	2201      	movs	r2, #1
 8005b14:	4970      	ldr	r1, [pc, #448]	@ (8005cd8 <HAL_I2C_Master_Transmit+0x1f4>)
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f001 f90e 	bl	8006d38 <I2C_WaitOnFlagUntilTimeout>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d001      	beq.n	8005b26 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005b22:	2302      	movs	r3, #2
 8005b24:	e0d3      	b.n	8005cce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d101      	bne.n	8005b34 <HAL_I2C_Master_Transmit+0x50>
 8005b30:	2302      	movs	r3, #2
 8005b32:	e0cc      	b.n	8005cce <HAL_I2C_Master_Transmit+0x1ea>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0301 	and.w	r3, r3, #1
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d007      	beq.n	8005b5a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f042 0201 	orr.w	r2, r2, #1
 8005b58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2221      	movs	r2, #33	@ 0x21
 8005b6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2210      	movs	r2, #16
 8005b76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	893a      	ldrh	r2, [r7, #8]
 8005b8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	4a50      	ldr	r2, [pc, #320]	@ (8005cdc <HAL_I2C_Master_Transmit+0x1f8>)
 8005b9a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005b9c:	8979      	ldrh	r1, [r7, #10]
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	6a3a      	ldr	r2, [r7, #32]
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f000 fdfa 	bl	800679c <I2C_MasterRequestWrite>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d001      	beq.n	8005bb2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e08d      	b.n	8005cce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	613b      	str	r3, [r7, #16]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	695b      	ldr	r3, [r3, #20]
 8005bbc:	613b      	str	r3, [r7, #16]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	613b      	str	r3, [r7, #16]
 8005bc6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005bc8:	e066      	b.n	8005c98 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	6a39      	ldr	r1, [r7, #32]
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f001 f9cc 	bl	8006f6c <I2C_WaitOnTXEFlagUntilTimeout>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00d      	beq.n	8005bf6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bde:	2b04      	cmp	r3, #4
 8005be0:	d107      	bne.n	8005bf2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bf0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e06b      	b.n	8005cce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bfa:	781a      	ldrb	r2, [r3, #0]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c06:	1c5a      	adds	r2, r3, #1
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	3b01      	subs	r3, #1
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	695b      	ldr	r3, [r3, #20]
 8005c2c:	f003 0304 	and.w	r3, r3, #4
 8005c30:	2b04      	cmp	r3, #4
 8005c32:	d11b      	bne.n	8005c6c <HAL_I2C_Master_Transmit+0x188>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d017      	beq.n	8005c6c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c40:	781a      	ldrb	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c4c:	1c5a      	adds	r2, r3, #1
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c64:	3b01      	subs	r3, #1
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	6a39      	ldr	r1, [r7, #32]
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f001 f9c3 	bl	8006ffc <I2C_WaitOnBTFFlagUntilTimeout>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00d      	beq.n	8005c98 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c80:	2b04      	cmp	r3, #4
 8005c82:	d107      	bne.n	8005c94 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c92:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e01a      	b.n	8005cce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d194      	bne.n	8005bca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	e000      	b.n	8005cce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005ccc:	2302      	movs	r3, #2
  }
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3718      	adds	r7, #24
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	00100002 	.word	0x00100002
 8005cdc:	ffff0000 	.word	0xffff0000

08005ce0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b08c      	sub	sp, #48	@ 0x30
 8005ce4:	af02      	add	r7, sp, #8
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	607a      	str	r2, [r7, #4]
 8005cea:	461a      	mov	r2, r3
 8005cec:	460b      	mov	r3, r1
 8005cee:	817b      	strh	r3, [r7, #10]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005cf4:	f7fe fe88 	bl	8004a08 <HAL_GetTick>
 8005cf8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	2b20      	cmp	r3, #32
 8005d04:	f040 8217 	bne.w	8006136 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0a:	9300      	str	r3, [sp, #0]
 8005d0c:	2319      	movs	r3, #25
 8005d0e:	2201      	movs	r2, #1
 8005d10:	497c      	ldr	r1, [pc, #496]	@ (8005f04 <HAL_I2C_Master_Receive+0x224>)
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f001 f810 	bl	8006d38 <I2C_WaitOnFlagUntilTimeout>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005d1e:	2302      	movs	r3, #2
 8005d20:	e20a      	b.n	8006138 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d101      	bne.n	8005d30 <HAL_I2C_Master_Receive+0x50>
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	e203      	b.n	8006138 <HAL_I2C_Master_Receive+0x458>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 0301 	and.w	r3, r3, #1
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d007      	beq.n	8005d56 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f042 0201 	orr.w	r2, r2, #1
 8005d54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d64:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2222      	movs	r2, #34	@ 0x22
 8005d6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2210      	movs	r2, #16
 8005d72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	893a      	ldrh	r2, [r7, #8]
 8005d86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	4a5c      	ldr	r2, [pc, #368]	@ (8005f08 <HAL_I2C_Master_Receive+0x228>)
 8005d96:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005d98:	8979      	ldrh	r1, [r7, #10]
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f000 fd7e 	bl	80068a0 <I2C_MasterRequestRead>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d001      	beq.n	8005dae <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e1c4      	b.n	8006138 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d113      	bne.n	8005dde <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005db6:	2300      	movs	r3, #0
 8005db8:	623b      	str	r3, [r7, #32]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	623b      	str	r3, [r7, #32]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	623b      	str	r3, [r7, #32]
 8005dca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dda:	601a      	str	r2, [r3, #0]
 8005ddc:	e198      	b.n	8006110 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d11b      	bne.n	8005e1e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005df4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005df6:	2300      	movs	r3, #0
 8005df8:	61fb      	str	r3, [r7, #28]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	61fb      	str	r3, [r7, #28]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	61fb      	str	r3, [r7, #28]
 8005e0a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e1a:	601a      	str	r2, [r3, #0]
 8005e1c:	e178      	b.n	8006110 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d11b      	bne.n	8005e5e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e34:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e46:	2300      	movs	r3, #0
 8005e48:	61bb      	str	r3, [r7, #24]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	61bb      	str	r3, [r7, #24]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	61bb      	str	r3, [r7, #24]
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	e158      	b.n	8006110 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005e6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e6e:	2300      	movs	r3, #0
 8005e70:	617b      	str	r3, [r7, #20]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	617b      	str	r3, [r7, #20]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	617b      	str	r3, [r7, #20]
 8005e82:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005e84:	e144      	b.n	8006110 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e8a:	2b03      	cmp	r3, #3
 8005e8c:	f200 80f1 	bhi.w	8006072 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d123      	bne.n	8005ee0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e9a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f001 f8f5 	bl	800708c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d001      	beq.n	8005eac <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e145      	b.n	8006138 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	691a      	ldr	r2, [r3, #16]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb6:	b2d2      	uxtb	r2, r2
 8005eb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ebe:	1c5a      	adds	r2, r3, #1
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005ede:	e117      	b.n	8006110 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d14e      	bne.n	8005f86 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eea:	9300      	str	r3, [sp, #0]
 8005eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eee:	2200      	movs	r2, #0
 8005ef0:	4906      	ldr	r1, [pc, #24]	@ (8005f0c <HAL_I2C_Master_Receive+0x22c>)
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f000 ff20 	bl	8006d38 <I2C_WaitOnFlagUntilTimeout>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d008      	beq.n	8005f10 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e11a      	b.n	8006138 <HAL_I2C_Master_Receive+0x458>
 8005f02:	bf00      	nop
 8005f04:	00100002 	.word	0x00100002
 8005f08:	ffff0000 	.word	0xffff0000
 8005f0c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	691a      	ldr	r2, [r3, #16]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f2a:	b2d2      	uxtb	r2, r2
 8005f2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f32:	1c5a      	adds	r2, r3, #1
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	691a      	ldr	r2, [r3, #16]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f5c:	b2d2      	uxtb	r2, r2
 8005f5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f64:	1c5a      	adds	r2, r3, #1
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005f84:	e0c4      	b.n	8006110 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	496c      	ldr	r1, [pc, #432]	@ (8006140 <HAL_I2C_Master_Receive+0x460>)
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 fed1 	bl	8006d38 <I2C_WaitOnFlagUntilTimeout>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d001      	beq.n	8005fa0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e0cb      	b.n	8006138 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	691a      	ldr	r2, [r3, #16]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fba:	b2d2      	uxtb	r2, r2
 8005fbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc2:	1c5a      	adds	r2, r3, #1
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe4:	9300      	str	r3, [sp, #0]
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe8:	2200      	movs	r2, #0
 8005fea:	4955      	ldr	r1, [pc, #340]	@ (8006140 <HAL_I2C_Master_Receive+0x460>)
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	f000 fea3 	bl	8006d38 <I2C_WaitOnFlagUntilTimeout>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d001      	beq.n	8005ffc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e09d      	b.n	8006138 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800600a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	691a      	ldr	r2, [r3, #16]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006016:	b2d2      	uxtb	r2, r2
 8006018:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800601e:	1c5a      	adds	r2, r3, #1
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006028:	3b01      	subs	r3, #1
 800602a:	b29a      	uxth	r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006034:	b29b      	uxth	r3, r3
 8006036:	3b01      	subs	r3, #1
 8006038:	b29a      	uxth	r2, r3
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	691a      	ldr	r2, [r3, #16]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006048:	b2d2      	uxtb	r2, r2
 800604a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006050:	1c5a      	adds	r2, r3, #1
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800605a:	3b01      	subs	r3, #1
 800605c:	b29a      	uxth	r2, r3
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006066:	b29b      	uxth	r3, r3
 8006068:	3b01      	subs	r3, #1
 800606a:	b29a      	uxth	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006070:	e04e      	b.n	8006110 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006072:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006074:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f001 f808 	bl	800708c <I2C_WaitOnRXNEFlagUntilTimeout>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e058      	b.n	8006138 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	691a      	ldr	r2, [r3, #16]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006090:	b2d2      	uxtb	r2, r2
 8006092:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006098:	1c5a      	adds	r2, r3, #1
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060a2:	3b01      	subs	r3, #1
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	3b01      	subs	r3, #1
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	f003 0304 	and.w	r3, r3, #4
 80060c2:	2b04      	cmp	r3, #4
 80060c4:	d124      	bne.n	8006110 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060ca:	2b03      	cmp	r3, #3
 80060cc:	d107      	bne.n	80060de <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060dc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	691a      	ldr	r2, [r3, #16]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e8:	b2d2      	uxtb	r2, r2
 80060ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f0:	1c5a      	adds	r2, r3, #1
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060fa:	3b01      	subs	r3, #1
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006106:	b29b      	uxth	r3, r3
 8006108:	3b01      	subs	r3, #1
 800610a:	b29a      	uxth	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006114:	2b00      	cmp	r3, #0
 8006116:	f47f aeb6 	bne.w	8005e86 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2220      	movs	r2, #32
 800611e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006132:	2300      	movs	r3, #0
 8006134:	e000      	b.n	8006138 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006136:	2302      	movs	r3, #2
  }
}
 8006138:	4618      	mov	r0, r3
 800613a:	3728      	adds	r7, #40	@ 0x28
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	00010004 	.word	0x00010004

08006144 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b088      	sub	sp, #32
 8006148:	af02      	add	r7, sp, #8
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	4608      	mov	r0, r1
 800614e:	4611      	mov	r1, r2
 8006150:	461a      	mov	r2, r3
 8006152:	4603      	mov	r3, r0
 8006154:	817b      	strh	r3, [r7, #10]
 8006156:	460b      	mov	r3, r1
 8006158:	813b      	strh	r3, [r7, #8]
 800615a:	4613      	mov	r3, r2
 800615c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800615e:	f7fe fc53 	bl	8004a08 <HAL_GetTick>
 8006162:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800616a:	b2db      	uxtb	r3, r3
 800616c:	2b20      	cmp	r3, #32
 800616e:	f040 80d9 	bne.w	8006324 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	9300      	str	r3, [sp, #0]
 8006176:	2319      	movs	r3, #25
 8006178:	2201      	movs	r2, #1
 800617a:	496d      	ldr	r1, [pc, #436]	@ (8006330 <HAL_I2C_Mem_Write+0x1ec>)
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f000 fddb 	bl	8006d38 <I2C_WaitOnFlagUntilTimeout>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d001      	beq.n	800618c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006188:	2302      	movs	r3, #2
 800618a:	e0cc      	b.n	8006326 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006192:	2b01      	cmp	r3, #1
 8006194:	d101      	bne.n	800619a <HAL_I2C_Mem_Write+0x56>
 8006196:	2302      	movs	r3, #2
 8006198:	e0c5      	b.n	8006326 <HAL_I2C_Mem_Write+0x1e2>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d007      	beq.n	80061c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f042 0201 	orr.w	r2, r2, #1
 80061be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80061ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2221      	movs	r2, #33	@ 0x21
 80061d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2240      	movs	r2, #64	@ 0x40
 80061dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6a3a      	ldr	r2, [r7, #32]
 80061ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80061f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	4a4d      	ldr	r2, [pc, #308]	@ (8006334 <HAL_I2C_Mem_Write+0x1f0>)
 8006200:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006202:	88f8      	ldrh	r0, [r7, #6]
 8006204:	893a      	ldrh	r2, [r7, #8]
 8006206:	8979      	ldrh	r1, [r7, #10]
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	9301      	str	r3, [sp, #4]
 800620c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800620e:	9300      	str	r3, [sp, #0]
 8006210:	4603      	mov	r3, r0
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f000 fc12 	bl	8006a3c <I2C_RequestMemoryWrite>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d052      	beq.n	80062c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e081      	b.n	8006326 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f000 fea0 	bl	8006f6c <I2C_WaitOnTXEFlagUntilTimeout>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00d      	beq.n	800624e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006236:	2b04      	cmp	r3, #4
 8006238:	d107      	bne.n	800624a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006248:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e06b      	b.n	8006326 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006252:	781a      	ldrb	r2, [r3, #0]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625e:	1c5a      	adds	r2, r3, #1
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006268:	3b01      	subs	r3, #1
 800626a:	b29a      	uxth	r2, r3
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006274:	b29b      	uxth	r3, r3
 8006276:	3b01      	subs	r3, #1
 8006278:	b29a      	uxth	r2, r3
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	f003 0304 	and.w	r3, r3, #4
 8006288:	2b04      	cmp	r3, #4
 800628a:	d11b      	bne.n	80062c4 <HAL_I2C_Mem_Write+0x180>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006290:	2b00      	cmp	r3, #0
 8006292:	d017      	beq.n	80062c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006298:	781a      	ldrb	r2, [r3, #0]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a4:	1c5a      	adds	r2, r3, #1
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062ae:	3b01      	subs	r3, #1
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	3b01      	subs	r3, #1
 80062be:	b29a      	uxth	r2, r3
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1aa      	bne.n	8006222 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062d0:	68f8      	ldr	r0, [r7, #12]
 80062d2:	f000 fe93 	bl	8006ffc <I2C_WaitOnBTFFlagUntilTimeout>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00d      	beq.n	80062f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062e0:	2b04      	cmp	r3, #4
 80062e2:	d107      	bne.n	80062f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e016      	b.n	8006326 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006306:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2220      	movs	r2, #32
 800630c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006320:	2300      	movs	r3, #0
 8006322:	e000      	b.n	8006326 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006324:	2302      	movs	r3, #2
  }
}
 8006326:	4618      	mov	r0, r3
 8006328:	3718      	adds	r7, #24
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	00100002 	.word	0x00100002
 8006334:	ffff0000 	.word	0xffff0000

08006338 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b08c      	sub	sp, #48	@ 0x30
 800633c:	af02      	add	r7, sp, #8
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	4608      	mov	r0, r1
 8006342:	4611      	mov	r1, r2
 8006344:	461a      	mov	r2, r3
 8006346:	4603      	mov	r3, r0
 8006348:	817b      	strh	r3, [r7, #10]
 800634a:	460b      	mov	r3, r1
 800634c:	813b      	strh	r3, [r7, #8]
 800634e:	4613      	mov	r3, r2
 8006350:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006352:	f7fe fb59 	bl	8004a08 <HAL_GetTick>
 8006356:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800635e:	b2db      	uxtb	r3, r3
 8006360:	2b20      	cmp	r3, #32
 8006362:	f040 8214 	bne.w	800678e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	2319      	movs	r3, #25
 800636c:	2201      	movs	r2, #1
 800636e:	497b      	ldr	r1, [pc, #492]	@ (800655c <HAL_I2C_Mem_Read+0x224>)
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f000 fce1 	bl	8006d38 <I2C_WaitOnFlagUntilTimeout>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d001      	beq.n	8006380 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800637c:	2302      	movs	r3, #2
 800637e:	e207      	b.n	8006790 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006386:	2b01      	cmp	r3, #1
 8006388:	d101      	bne.n	800638e <HAL_I2C_Mem_Read+0x56>
 800638a:	2302      	movs	r3, #2
 800638c:	e200      	b.n	8006790 <HAL_I2C_Mem_Read+0x458>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0301 	and.w	r3, r3, #1
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d007      	beq.n	80063b4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f042 0201 	orr.w	r2, r2, #1
 80063b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80063c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2222      	movs	r2, #34	@ 0x22
 80063c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2240      	movs	r2, #64	@ 0x40
 80063d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80063e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	4a5b      	ldr	r2, [pc, #364]	@ (8006560 <HAL_I2C_Mem_Read+0x228>)
 80063f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80063f6:	88f8      	ldrh	r0, [r7, #6]
 80063f8:	893a      	ldrh	r2, [r7, #8]
 80063fa:	8979      	ldrh	r1, [r7, #10]
 80063fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063fe:	9301      	str	r3, [sp, #4]
 8006400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006402:	9300      	str	r3, [sp, #0]
 8006404:	4603      	mov	r3, r0
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f000 fbae 	bl	8006b68 <I2C_RequestMemoryRead>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e1bc      	b.n	8006790 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800641a:	2b00      	cmp	r3, #0
 800641c:	d113      	bne.n	8006446 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800641e:	2300      	movs	r3, #0
 8006420:	623b      	str	r3, [r7, #32]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	695b      	ldr	r3, [r3, #20]
 8006428:	623b      	str	r3, [r7, #32]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	623b      	str	r3, [r7, #32]
 8006432:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006442:	601a      	str	r2, [r3, #0]
 8006444:	e190      	b.n	8006768 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800644a:	2b01      	cmp	r3, #1
 800644c:	d11b      	bne.n	8006486 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800645c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800645e:	2300      	movs	r3, #0
 8006460:	61fb      	str	r3, [r7, #28]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	61fb      	str	r3, [r7, #28]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	61fb      	str	r3, [r7, #28]
 8006472:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006482:	601a      	str	r2, [r3, #0]
 8006484:	e170      	b.n	8006768 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800648a:	2b02      	cmp	r3, #2
 800648c:	d11b      	bne.n	80064c6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800649c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064ae:	2300      	movs	r3, #0
 80064b0:	61bb      	str	r3, [r7, #24]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	61bb      	str	r3, [r7, #24]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	699b      	ldr	r3, [r3, #24]
 80064c0:	61bb      	str	r3, [r7, #24]
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	e150      	b.n	8006768 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064c6:	2300      	movs	r3, #0
 80064c8:	617b      	str	r3, [r7, #20]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	695b      	ldr	r3, [r3, #20]
 80064d0:	617b      	str	r3, [r7, #20]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	617b      	str	r3, [r7, #20]
 80064da:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80064dc:	e144      	b.n	8006768 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064e2:	2b03      	cmp	r3, #3
 80064e4:	f200 80f1 	bhi.w	80066ca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d123      	bne.n	8006538 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	f000 fdc9 	bl	800708c <I2C_WaitOnRXNEFlagUntilTimeout>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d001      	beq.n	8006504 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e145      	b.n	8006790 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	691a      	ldr	r2, [r3, #16]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800650e:	b2d2      	uxtb	r2, r2
 8006510:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006516:	1c5a      	adds	r2, r3, #1
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006520:	3b01      	subs	r3, #1
 8006522:	b29a      	uxth	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800652c:	b29b      	uxth	r3, r3
 800652e:	3b01      	subs	r3, #1
 8006530:	b29a      	uxth	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006536:	e117      	b.n	8006768 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800653c:	2b02      	cmp	r3, #2
 800653e:	d14e      	bne.n	80065de <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006546:	2200      	movs	r2, #0
 8006548:	4906      	ldr	r1, [pc, #24]	@ (8006564 <HAL_I2C_Mem_Read+0x22c>)
 800654a:	68f8      	ldr	r0, [r7, #12]
 800654c:	f000 fbf4 	bl	8006d38 <I2C_WaitOnFlagUntilTimeout>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d008      	beq.n	8006568 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e11a      	b.n	8006790 <HAL_I2C_Mem_Read+0x458>
 800655a:	bf00      	nop
 800655c:	00100002 	.word	0x00100002
 8006560:	ffff0000 	.word	0xffff0000
 8006564:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006576:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	691a      	ldr	r2, [r3, #16]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006582:	b2d2      	uxtb	r2, r2
 8006584:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800658a:	1c5a      	adds	r2, r3, #1
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006594:	3b01      	subs	r3, #1
 8006596:	b29a      	uxth	r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	3b01      	subs	r3, #1
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	691a      	ldr	r2, [r3, #16]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b4:	b2d2      	uxtb	r2, r2
 80065b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065bc:	1c5a      	adds	r2, r3, #1
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065c6:	3b01      	subs	r3, #1
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	3b01      	subs	r3, #1
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80065dc:	e0c4      	b.n	8006768 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80065de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e0:	9300      	str	r3, [sp, #0]
 80065e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065e4:	2200      	movs	r2, #0
 80065e6:	496c      	ldr	r1, [pc, #432]	@ (8006798 <HAL_I2C_Mem_Read+0x460>)
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 fba5 	bl	8006d38 <I2C_WaitOnFlagUntilTimeout>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d001      	beq.n	80065f8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e0cb      	b.n	8006790 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006606:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	691a      	ldr	r2, [r3, #16]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006612:	b2d2      	uxtb	r2, r2
 8006614:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800661a:	1c5a      	adds	r2, r3, #1
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006624:	3b01      	subs	r3, #1
 8006626:	b29a      	uxth	r2, r3
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006630:	b29b      	uxth	r3, r3
 8006632:	3b01      	subs	r3, #1
 8006634:	b29a      	uxth	r2, r3
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800663a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663c:	9300      	str	r3, [sp, #0]
 800663e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006640:	2200      	movs	r2, #0
 8006642:	4955      	ldr	r1, [pc, #340]	@ (8006798 <HAL_I2C_Mem_Read+0x460>)
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	f000 fb77 	bl	8006d38 <I2C_WaitOnFlagUntilTimeout>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d001      	beq.n	8006654 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e09d      	b.n	8006790 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006662:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	691a      	ldr	r2, [r3, #16]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800666e:	b2d2      	uxtb	r2, r2
 8006670:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006676:	1c5a      	adds	r2, r3, #1
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006680:	3b01      	subs	r3, #1
 8006682:	b29a      	uxth	r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800668c:	b29b      	uxth	r3, r3
 800668e:	3b01      	subs	r3, #1
 8006690:	b29a      	uxth	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	691a      	ldr	r2, [r3, #16]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a0:	b2d2      	uxtb	r2, r2
 80066a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a8:	1c5a      	adds	r2, r3, #1
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066b2:	3b01      	subs	r3, #1
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066be:	b29b      	uxth	r3, r3
 80066c0:	3b01      	subs	r3, #1
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80066c8:	e04e      	b.n	8006768 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066cc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f000 fcdc 	bl	800708c <I2C_WaitOnRXNEFlagUntilTimeout>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d001      	beq.n	80066de <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e058      	b.n	8006790 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	691a      	ldr	r2, [r3, #16]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e8:	b2d2      	uxtb	r2, r2
 80066ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f0:	1c5a      	adds	r2, r3, #1
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066fa:	3b01      	subs	r3, #1
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006706:	b29b      	uxth	r3, r3
 8006708:	3b01      	subs	r3, #1
 800670a:	b29a      	uxth	r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	f003 0304 	and.w	r3, r3, #4
 800671a:	2b04      	cmp	r3, #4
 800671c:	d124      	bne.n	8006768 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006722:	2b03      	cmp	r3, #3
 8006724:	d107      	bne.n	8006736 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006734:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	691a      	ldr	r2, [r3, #16]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006740:	b2d2      	uxtb	r2, r2
 8006742:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006748:	1c5a      	adds	r2, r3, #1
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006752:	3b01      	subs	r3, #1
 8006754:	b29a      	uxth	r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800675e:	b29b      	uxth	r3, r3
 8006760:	3b01      	subs	r3, #1
 8006762:	b29a      	uxth	r2, r3
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800676c:	2b00      	cmp	r3, #0
 800676e:	f47f aeb6 	bne.w	80064de <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2220      	movs	r2, #32
 8006776:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800678a:	2300      	movs	r3, #0
 800678c:	e000      	b.n	8006790 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800678e:	2302      	movs	r3, #2
  }
}
 8006790:	4618      	mov	r0, r3
 8006792:	3728      	adds	r7, #40	@ 0x28
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	00010004 	.word	0x00010004

0800679c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b088      	sub	sp, #32
 80067a0:	af02      	add	r7, sp, #8
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	607a      	str	r2, [r7, #4]
 80067a6:	603b      	str	r3, [r7, #0]
 80067a8:	460b      	mov	r3, r1
 80067aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	2b08      	cmp	r3, #8
 80067b6:	d006      	beq.n	80067c6 <I2C_MasterRequestWrite+0x2a>
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d003      	beq.n	80067c6 <I2C_MasterRequestWrite+0x2a>
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80067c4:	d108      	bne.n	80067d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80067d4:	601a      	str	r2, [r3, #0]
 80067d6:	e00b      	b.n	80067f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067dc:	2b12      	cmp	r3, #18
 80067de:	d107      	bne.n	80067f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80067ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	9300      	str	r3, [sp, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f000 fa9b 	bl	8006d38 <I2C_WaitOnFlagUntilTimeout>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d00d      	beq.n	8006824 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006812:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006816:	d103      	bne.n	8006820 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800681e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	e035      	b.n	8006890 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800682c:	d108      	bne.n	8006840 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800682e:	897b      	ldrh	r3, [r7, #10]
 8006830:	b2db      	uxtb	r3, r3
 8006832:	461a      	mov	r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800683c:	611a      	str	r2, [r3, #16]
 800683e:	e01b      	b.n	8006878 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006840:	897b      	ldrh	r3, [r7, #10]
 8006842:	11db      	asrs	r3, r3, #7
 8006844:	b2db      	uxtb	r3, r3
 8006846:	f003 0306 	and.w	r3, r3, #6
 800684a:	b2db      	uxtb	r3, r3
 800684c:	f063 030f 	orn	r3, r3, #15
 8006850:	b2da      	uxtb	r2, r3
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	490e      	ldr	r1, [pc, #56]	@ (8006898 <I2C_MasterRequestWrite+0xfc>)
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f000 fae4 	bl	8006e2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d001      	beq.n	800686e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e010      	b.n	8006890 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800686e:	897b      	ldrh	r3, [r7, #10]
 8006870:	b2da      	uxtb	r2, r3
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	4907      	ldr	r1, [pc, #28]	@ (800689c <I2C_MasterRequestWrite+0x100>)
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	f000 fad4 	bl	8006e2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d001      	beq.n	800688e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e000      	b.n	8006890 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	3718      	adds	r7, #24
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}
 8006898:	00010008 	.word	0x00010008
 800689c:	00010002 	.word	0x00010002

080068a0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b088      	sub	sp, #32
 80068a4:	af02      	add	r7, sp, #8
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	607a      	str	r2, [r7, #4]
 80068aa:	603b      	str	r3, [r7, #0]
 80068ac:	460b      	mov	r3, r1
 80068ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80068c4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	2b08      	cmp	r3, #8
 80068ca:	d006      	beq.n	80068da <I2C_MasterRequestRead+0x3a>
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d003      	beq.n	80068da <I2C_MasterRequestRead+0x3a>
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80068d8:	d108      	bne.n	80068ec <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80068e8:	601a      	str	r2, [r3, #0]
 80068ea:	e00b      	b.n	8006904 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068f0:	2b11      	cmp	r3, #17
 80068f2:	d107      	bne.n	8006904 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006902:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	9300      	str	r3, [sp, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f000 fa11 	bl	8006d38 <I2C_WaitOnFlagUntilTimeout>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d00d      	beq.n	8006938 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006926:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800692a:	d103      	bne.n	8006934 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006932:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006934:	2303      	movs	r3, #3
 8006936:	e079      	b.n	8006a2c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006940:	d108      	bne.n	8006954 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006942:	897b      	ldrh	r3, [r7, #10]
 8006944:	b2db      	uxtb	r3, r3
 8006946:	f043 0301 	orr.w	r3, r3, #1
 800694a:	b2da      	uxtb	r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	611a      	str	r2, [r3, #16]
 8006952:	e05f      	b.n	8006a14 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006954:	897b      	ldrh	r3, [r7, #10]
 8006956:	11db      	asrs	r3, r3, #7
 8006958:	b2db      	uxtb	r3, r3
 800695a:	f003 0306 	and.w	r3, r3, #6
 800695e:	b2db      	uxtb	r3, r3
 8006960:	f063 030f 	orn	r3, r3, #15
 8006964:	b2da      	uxtb	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	4930      	ldr	r1, [pc, #192]	@ (8006a34 <I2C_MasterRequestRead+0x194>)
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f000 fa5a 	bl	8006e2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d001      	beq.n	8006982 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e054      	b.n	8006a2c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006982:	897b      	ldrh	r3, [r7, #10]
 8006984:	b2da      	uxtb	r2, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	4929      	ldr	r1, [pc, #164]	@ (8006a38 <I2C_MasterRequestRead+0x198>)
 8006992:	68f8      	ldr	r0, [r7, #12]
 8006994:	f000 fa4a 	bl	8006e2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d001      	beq.n	80069a2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e044      	b.n	8006a2c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069a2:	2300      	movs	r3, #0
 80069a4:	613b      	str	r3, [r7, #16]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	695b      	ldr	r3, [r3, #20]
 80069ac:	613b      	str	r3, [r7, #16]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	699b      	ldr	r3, [r3, #24]
 80069b4:	613b      	str	r3, [r7, #16]
 80069b6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80069c6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	9300      	str	r3, [sp, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f000 f9af 	bl	8006d38 <I2C_WaitOnFlagUntilTimeout>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00d      	beq.n	80069fc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069ee:	d103      	bne.n	80069f8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069f6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80069f8:	2303      	movs	r3, #3
 80069fa:	e017      	b.n	8006a2c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80069fc:	897b      	ldrh	r3, [r7, #10]
 80069fe:	11db      	asrs	r3, r3, #7
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	f003 0306 	and.w	r3, r3, #6
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	f063 030e 	orn	r3, r3, #14
 8006a0c:	b2da      	uxtb	r2, r3
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	4907      	ldr	r1, [pc, #28]	@ (8006a38 <I2C_MasterRequestRead+0x198>)
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f000 fa06 	bl	8006e2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d001      	beq.n	8006a2a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e000      	b.n	8006a2c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3718      	adds	r7, #24
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	00010008 	.word	0x00010008
 8006a38:	00010002 	.word	0x00010002

08006a3c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b088      	sub	sp, #32
 8006a40:	af02      	add	r7, sp, #8
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	4608      	mov	r0, r1
 8006a46:	4611      	mov	r1, r2
 8006a48:	461a      	mov	r2, r3
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	817b      	strh	r3, [r7, #10]
 8006a4e:	460b      	mov	r3, r1
 8006a50:	813b      	strh	r3, [r7, #8]
 8006a52:	4613      	mov	r3, r2
 8006a54:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a68:	9300      	str	r3, [sp, #0]
 8006a6a:	6a3b      	ldr	r3, [r7, #32]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f000 f960 	bl	8006d38 <I2C_WaitOnFlagUntilTimeout>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00d      	beq.n	8006a9a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a8c:	d103      	bne.n	8006a96 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a94:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e05f      	b.n	8006b5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006a9a:	897b      	ldrh	r3, [r7, #10]
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006aa8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aac:	6a3a      	ldr	r2, [r7, #32]
 8006aae:	492d      	ldr	r1, [pc, #180]	@ (8006b64 <I2C_RequestMemoryWrite+0x128>)
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f000 f9bb 	bl	8006e2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d001      	beq.n	8006ac0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e04c      	b.n	8006b5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	617b      	str	r3, [r7, #20]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	617b      	str	r3, [r7, #20]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	617b      	str	r3, [r7, #20]
 8006ad4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ad6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ad8:	6a39      	ldr	r1, [r7, #32]
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f000 fa46 	bl	8006f6c <I2C_WaitOnTXEFlagUntilTimeout>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00d      	beq.n	8006b02 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aea:	2b04      	cmp	r3, #4
 8006aec:	d107      	bne.n	8006afe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006afc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e02b      	b.n	8006b5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b02:	88fb      	ldrh	r3, [r7, #6]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d105      	bne.n	8006b14 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b08:	893b      	ldrh	r3, [r7, #8]
 8006b0a:	b2da      	uxtb	r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	611a      	str	r2, [r3, #16]
 8006b12:	e021      	b.n	8006b58 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006b14:	893b      	ldrh	r3, [r7, #8]
 8006b16:	0a1b      	lsrs	r3, r3, #8
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	b2da      	uxtb	r2, r3
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b24:	6a39      	ldr	r1, [r7, #32]
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	f000 fa20 	bl	8006f6c <I2C_WaitOnTXEFlagUntilTimeout>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00d      	beq.n	8006b4e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b36:	2b04      	cmp	r3, #4
 8006b38:	d107      	bne.n	8006b4a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e005      	b.n	8006b5a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b4e:	893b      	ldrh	r3, [r7, #8]
 8006b50:	b2da      	uxtb	r2, r3
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3718      	adds	r7, #24
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	00010002 	.word	0x00010002

08006b68 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b088      	sub	sp, #32
 8006b6c:	af02      	add	r7, sp, #8
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	4608      	mov	r0, r1
 8006b72:	4611      	mov	r1, r2
 8006b74:	461a      	mov	r2, r3
 8006b76:	4603      	mov	r3, r0
 8006b78:	817b      	strh	r3, [r7, #10]
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	813b      	strh	r3, [r7, #8]
 8006b7e:	4613      	mov	r3, r2
 8006b80:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006b90:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ba0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba4:	9300      	str	r3, [sp, #0]
 8006ba6:	6a3b      	ldr	r3, [r7, #32]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006bae:	68f8      	ldr	r0, [r7, #12]
 8006bb0:	f000 f8c2 	bl	8006d38 <I2C_WaitOnFlagUntilTimeout>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00d      	beq.n	8006bd6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bc8:	d103      	bne.n	8006bd2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006bd0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e0aa      	b.n	8006d2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006bd6:	897b      	ldrh	r3, [r7, #10]
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	461a      	mov	r2, r3
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006be4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be8:	6a3a      	ldr	r2, [r7, #32]
 8006bea:	4952      	ldr	r1, [pc, #328]	@ (8006d34 <I2C_RequestMemoryRead+0x1cc>)
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f000 f91d 	bl	8006e2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d001      	beq.n	8006bfc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e097      	b.n	8006d2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	617b      	str	r3, [r7, #20]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	695b      	ldr	r3, [r3, #20]
 8006c06:	617b      	str	r3, [r7, #20]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	617b      	str	r3, [r7, #20]
 8006c10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c14:	6a39      	ldr	r1, [r7, #32]
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	f000 f9a8 	bl	8006f6c <I2C_WaitOnTXEFlagUntilTimeout>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00d      	beq.n	8006c3e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c26:	2b04      	cmp	r3, #4
 8006c28:	d107      	bne.n	8006c3a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e076      	b.n	8006d2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c3e:	88fb      	ldrh	r3, [r7, #6]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d105      	bne.n	8006c50 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c44:	893b      	ldrh	r3, [r7, #8]
 8006c46:	b2da      	uxtb	r2, r3
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	611a      	str	r2, [r3, #16]
 8006c4e:	e021      	b.n	8006c94 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006c50:	893b      	ldrh	r3, [r7, #8]
 8006c52:	0a1b      	lsrs	r3, r3, #8
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	b2da      	uxtb	r2, r3
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c60:	6a39      	ldr	r1, [r7, #32]
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	f000 f982 	bl	8006f6c <I2C_WaitOnTXEFlagUntilTimeout>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00d      	beq.n	8006c8a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c72:	2b04      	cmp	r3, #4
 8006c74:	d107      	bne.n	8006c86 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e050      	b.n	8006d2c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c8a:	893b      	ldrh	r3, [r7, #8]
 8006c8c:	b2da      	uxtb	r2, r3
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c96:	6a39      	ldr	r1, [r7, #32]
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	f000 f967 	bl	8006f6c <I2C_WaitOnTXEFlagUntilTimeout>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00d      	beq.n	8006cc0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ca8:	2b04      	cmp	r3, #4
 8006caa:	d107      	bne.n	8006cbc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e035      	b.n	8006d2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006cce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd2:	9300      	str	r3, [sp, #0]
 8006cd4:	6a3b      	ldr	r3, [r7, #32]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006cdc:	68f8      	ldr	r0, [r7, #12]
 8006cde:	f000 f82b 	bl	8006d38 <I2C_WaitOnFlagUntilTimeout>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00d      	beq.n	8006d04 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cf6:	d103      	bne.n	8006d00 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006cfe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e013      	b.n	8006d2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006d04:	897b      	ldrh	r3, [r7, #10]
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	f043 0301 	orr.w	r3, r3, #1
 8006d0c:	b2da      	uxtb	r2, r3
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d16:	6a3a      	ldr	r2, [r7, #32]
 8006d18:	4906      	ldr	r1, [pc, #24]	@ (8006d34 <I2C_RequestMemoryRead+0x1cc>)
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f000 f886 	bl	8006e2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d001      	beq.n	8006d2a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e000      	b.n	8006d2c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3718      	adds	r7, #24
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	00010002 	.word	0x00010002

08006d38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	603b      	str	r3, [r7, #0]
 8006d44:	4613      	mov	r3, r2
 8006d46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d48:	e048      	b.n	8006ddc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d50:	d044      	beq.n	8006ddc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d52:	f7fd fe59 	bl	8004a08 <HAL_GetTick>
 8006d56:	4602      	mov	r2, r0
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	683a      	ldr	r2, [r7, #0]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d302      	bcc.n	8006d68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d139      	bne.n	8006ddc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	0c1b      	lsrs	r3, r3, #16
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d10d      	bne.n	8006d8e <I2C_WaitOnFlagUntilTimeout+0x56>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	43da      	mvns	r2, r3
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	bf0c      	ite	eq
 8006d84:	2301      	moveq	r3, #1
 8006d86:	2300      	movne	r3, #0
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	e00c      	b.n	8006da8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	699b      	ldr	r3, [r3, #24]
 8006d94:	43da      	mvns	r2, r3
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	4013      	ands	r3, r2
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	bf0c      	ite	eq
 8006da0:	2301      	moveq	r3, #1
 8006da2:	2300      	movne	r3, #0
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	461a      	mov	r2, r3
 8006da8:	79fb      	ldrb	r3, [r7, #7]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d116      	bne.n	8006ddc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2200      	movs	r2, #0
 8006db2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2220      	movs	r2, #32
 8006db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc8:	f043 0220 	orr.w	r2, r3, #32
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e023      	b.n	8006e24 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	0c1b      	lsrs	r3, r3, #16
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d10d      	bne.n	8006e02 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	695b      	ldr	r3, [r3, #20]
 8006dec:	43da      	mvns	r2, r3
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	4013      	ands	r3, r2
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	bf0c      	ite	eq
 8006df8:	2301      	moveq	r3, #1
 8006dfa:	2300      	movne	r3, #0
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	461a      	mov	r2, r3
 8006e00:	e00c      	b.n	8006e1c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	699b      	ldr	r3, [r3, #24]
 8006e08:	43da      	mvns	r2, r3
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	bf0c      	ite	eq
 8006e14:	2301      	moveq	r3, #1
 8006e16:	2300      	movne	r3, #0
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	79fb      	ldrb	r3, [r7, #7]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d093      	beq.n	8006d4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e22:	2300      	movs	r3, #0
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3710      	adds	r7, #16
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]
 8006e38:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e3a:	e071      	b.n	8006f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	695b      	ldr	r3, [r3, #20]
 8006e42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e4a:	d123      	bne.n	8006e94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e5a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006e64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2220      	movs	r2, #32
 8006e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e80:	f043 0204 	orr.w	r2, r3, #4
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e067      	b.n	8006f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e9a:	d041      	beq.n	8006f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e9c:	f7fd fdb4 	bl	8004a08 <HAL_GetTick>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d302      	bcc.n	8006eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d136      	bne.n	8006f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	0c1b      	lsrs	r3, r3, #16
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d10c      	bne.n	8006ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	695b      	ldr	r3, [r3, #20]
 8006ec2:	43da      	mvns	r2, r3
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	bf14      	ite	ne
 8006ece:	2301      	movne	r3, #1
 8006ed0:	2300      	moveq	r3, #0
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	e00b      	b.n	8006eee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	699b      	ldr	r3, [r3, #24]
 8006edc:	43da      	mvns	r2, r3
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	bf14      	ite	ne
 8006ee8:	2301      	movne	r3, #1
 8006eea:	2300      	moveq	r3, #0
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d016      	beq.n	8006f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2220      	movs	r2, #32
 8006efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f0c:	f043 0220 	orr.w	r2, r3, #32
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e021      	b.n	8006f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	0c1b      	lsrs	r3, r3, #16
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d10c      	bne.n	8006f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	695b      	ldr	r3, [r3, #20]
 8006f30:	43da      	mvns	r2, r3
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	4013      	ands	r3, r2
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	bf14      	ite	ne
 8006f3c:	2301      	movne	r3, #1
 8006f3e:	2300      	moveq	r3, #0
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	e00b      	b.n	8006f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	43da      	mvns	r2, r3
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	4013      	ands	r3, r2
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	bf14      	ite	ne
 8006f56:	2301      	movne	r3, #1
 8006f58:	2300      	moveq	r3, #0
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f47f af6d 	bne.w	8006e3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3710      	adds	r7, #16
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f78:	e034      	b.n	8006fe4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f000 f8e3 	bl	8007146 <I2C_IsAcknowledgeFailed>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d001      	beq.n	8006f8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e034      	b.n	8006ff4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f90:	d028      	beq.n	8006fe4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f92:	f7fd fd39 	bl	8004a08 <HAL_GetTick>
 8006f96:	4602      	mov	r2, r0
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	68ba      	ldr	r2, [r7, #8]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d302      	bcc.n	8006fa8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d11d      	bne.n	8006fe4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	695b      	ldr	r3, [r3, #20]
 8006fae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fb2:	2b80      	cmp	r3, #128	@ 0x80
 8006fb4:	d016      	beq.n	8006fe4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2220      	movs	r2, #32
 8006fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fd0:	f043 0220 	orr.w	r2, r3, #32
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e007      	b.n	8006ff4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	695b      	ldr	r3, [r3, #20]
 8006fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fee:	2b80      	cmp	r3, #128	@ 0x80
 8006ff0:	d1c3      	bne.n	8006f7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3710      	adds	r7, #16
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007008:	e034      	b.n	8007074 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800700a:	68f8      	ldr	r0, [r7, #12]
 800700c:	f000 f89b 	bl	8007146 <I2C_IsAcknowledgeFailed>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d001      	beq.n	800701a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	e034      	b.n	8007084 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007020:	d028      	beq.n	8007074 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007022:	f7fd fcf1 	bl	8004a08 <HAL_GetTick>
 8007026:	4602      	mov	r2, r0
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	68ba      	ldr	r2, [r7, #8]
 800702e:	429a      	cmp	r2, r3
 8007030:	d302      	bcc.n	8007038 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d11d      	bne.n	8007074 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	695b      	ldr	r3, [r3, #20]
 800703e:	f003 0304 	and.w	r3, r3, #4
 8007042:	2b04      	cmp	r3, #4
 8007044:	d016      	beq.n	8007074 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2200      	movs	r2, #0
 800704a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2220      	movs	r2, #32
 8007050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007060:	f043 0220 	orr.w	r2, r3, #32
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	e007      	b.n	8007084 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	695b      	ldr	r3, [r3, #20]
 800707a:	f003 0304 	and.w	r3, r3, #4
 800707e:	2b04      	cmp	r3, #4
 8007080:	d1c3      	bne.n	800700a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	3710      	adds	r7, #16
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007098:	e049      	b.n	800712e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	695b      	ldr	r3, [r3, #20]
 80070a0:	f003 0310 	and.w	r3, r3, #16
 80070a4:	2b10      	cmp	r3, #16
 80070a6:	d119      	bne.n	80070dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f06f 0210 	mvn.w	r2, #16
 80070b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2200      	movs	r2, #0
 80070b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2220      	movs	r2, #32
 80070bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	e030      	b.n	800713e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070dc:	f7fd fc94 	bl	8004a08 <HAL_GetTick>
 80070e0:	4602      	mov	r2, r0
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	1ad3      	subs	r3, r2, r3
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d302      	bcc.n	80070f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d11d      	bne.n	800712e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	695b      	ldr	r3, [r3, #20]
 80070f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070fc:	2b40      	cmp	r3, #64	@ 0x40
 80070fe:	d016      	beq.n	800712e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2200      	movs	r2, #0
 8007104:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2220      	movs	r2, #32
 800710a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800711a:	f043 0220 	orr.w	r2, r3, #32
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e007      	b.n	800713e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	695b      	ldr	r3, [r3, #20]
 8007134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007138:	2b40      	cmp	r3, #64	@ 0x40
 800713a:	d1ae      	bne.n	800709a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007146:	b480      	push	{r7}
 8007148:	b083      	sub	sp, #12
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	695b      	ldr	r3, [r3, #20]
 8007154:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007158:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800715c:	d11b      	bne.n	8007196 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007166:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2220      	movs	r2, #32
 8007172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007182:	f043 0204 	orr.w	r2, r3, #4
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	e000      	b.n	8007198 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b086      	sub	sp, #24
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d101      	bne.n	80071b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e267      	b.n	8007686 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0301 	and.w	r3, r3, #1
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d075      	beq.n	80072ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80071c2:	4b88      	ldr	r3, [pc, #544]	@ (80073e4 <HAL_RCC_OscConfig+0x240>)
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	f003 030c 	and.w	r3, r3, #12
 80071ca:	2b04      	cmp	r3, #4
 80071cc:	d00c      	beq.n	80071e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80071ce:	4b85      	ldr	r3, [pc, #532]	@ (80073e4 <HAL_RCC_OscConfig+0x240>)
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80071d6:	2b08      	cmp	r3, #8
 80071d8:	d112      	bne.n	8007200 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80071da:	4b82      	ldr	r3, [pc, #520]	@ (80073e4 <HAL_RCC_OscConfig+0x240>)
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071e6:	d10b      	bne.n	8007200 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071e8:	4b7e      	ldr	r3, [pc, #504]	@ (80073e4 <HAL_RCC_OscConfig+0x240>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d05b      	beq.n	80072ac <HAL_RCC_OscConfig+0x108>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d157      	bne.n	80072ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e242      	b.n	8007686 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007208:	d106      	bne.n	8007218 <HAL_RCC_OscConfig+0x74>
 800720a:	4b76      	ldr	r3, [pc, #472]	@ (80073e4 <HAL_RCC_OscConfig+0x240>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a75      	ldr	r2, [pc, #468]	@ (80073e4 <HAL_RCC_OscConfig+0x240>)
 8007210:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007214:	6013      	str	r3, [r2, #0]
 8007216:	e01d      	b.n	8007254 <HAL_RCC_OscConfig+0xb0>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007220:	d10c      	bne.n	800723c <HAL_RCC_OscConfig+0x98>
 8007222:	4b70      	ldr	r3, [pc, #448]	@ (80073e4 <HAL_RCC_OscConfig+0x240>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a6f      	ldr	r2, [pc, #444]	@ (80073e4 <HAL_RCC_OscConfig+0x240>)
 8007228:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800722c:	6013      	str	r3, [r2, #0]
 800722e:	4b6d      	ldr	r3, [pc, #436]	@ (80073e4 <HAL_RCC_OscConfig+0x240>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a6c      	ldr	r2, [pc, #432]	@ (80073e4 <HAL_RCC_OscConfig+0x240>)
 8007234:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007238:	6013      	str	r3, [r2, #0]
 800723a:	e00b      	b.n	8007254 <HAL_RCC_OscConfig+0xb0>
 800723c:	4b69      	ldr	r3, [pc, #420]	@ (80073e4 <HAL_RCC_OscConfig+0x240>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a68      	ldr	r2, [pc, #416]	@ (80073e4 <HAL_RCC_OscConfig+0x240>)
 8007242:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007246:	6013      	str	r3, [r2, #0]
 8007248:	4b66      	ldr	r3, [pc, #408]	@ (80073e4 <HAL_RCC_OscConfig+0x240>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a65      	ldr	r2, [pc, #404]	@ (80073e4 <HAL_RCC_OscConfig+0x240>)
 800724e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007252:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d013      	beq.n	8007284 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800725c:	f7fd fbd4 	bl	8004a08 <HAL_GetTick>
 8007260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007262:	e008      	b.n	8007276 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007264:	f7fd fbd0 	bl	8004a08 <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	2b64      	cmp	r3, #100	@ 0x64
 8007270:	d901      	bls.n	8007276 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e207      	b.n	8007686 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007276:	4b5b      	ldr	r3, [pc, #364]	@ (80073e4 <HAL_RCC_OscConfig+0x240>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800727e:	2b00      	cmp	r3, #0
 8007280:	d0f0      	beq.n	8007264 <HAL_RCC_OscConfig+0xc0>
 8007282:	e014      	b.n	80072ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007284:	f7fd fbc0 	bl	8004a08 <HAL_GetTick>
 8007288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800728a:	e008      	b.n	800729e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800728c:	f7fd fbbc 	bl	8004a08 <HAL_GetTick>
 8007290:	4602      	mov	r2, r0
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	2b64      	cmp	r3, #100	@ 0x64
 8007298:	d901      	bls.n	800729e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800729a:	2303      	movs	r3, #3
 800729c:	e1f3      	b.n	8007686 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800729e:	4b51      	ldr	r3, [pc, #324]	@ (80073e4 <HAL_RCC_OscConfig+0x240>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1f0      	bne.n	800728c <HAL_RCC_OscConfig+0xe8>
 80072aa:	e000      	b.n	80072ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 0302 	and.w	r3, r3, #2
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d063      	beq.n	8007382 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80072ba:	4b4a      	ldr	r3, [pc, #296]	@ (80073e4 <HAL_RCC_OscConfig+0x240>)
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	f003 030c 	and.w	r3, r3, #12
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00b      	beq.n	80072de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072c6:	4b47      	ldr	r3, [pc, #284]	@ (80073e4 <HAL_RCC_OscConfig+0x240>)
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80072ce:	2b08      	cmp	r3, #8
 80072d0:	d11c      	bne.n	800730c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072d2:	4b44      	ldr	r3, [pc, #272]	@ (80073e4 <HAL_RCC_OscConfig+0x240>)
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d116      	bne.n	800730c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072de:	4b41      	ldr	r3, [pc, #260]	@ (80073e4 <HAL_RCC_OscConfig+0x240>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f003 0302 	and.w	r3, r3, #2
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d005      	beq.n	80072f6 <HAL_RCC_OscConfig+0x152>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d001      	beq.n	80072f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e1c7      	b.n	8007686 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072f6:	4b3b      	ldr	r3, [pc, #236]	@ (80073e4 <HAL_RCC_OscConfig+0x240>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	00db      	lsls	r3, r3, #3
 8007304:	4937      	ldr	r1, [pc, #220]	@ (80073e4 <HAL_RCC_OscConfig+0x240>)
 8007306:	4313      	orrs	r3, r2
 8007308:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800730a:	e03a      	b.n	8007382 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d020      	beq.n	8007356 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007314:	4b34      	ldr	r3, [pc, #208]	@ (80073e8 <HAL_RCC_OscConfig+0x244>)
 8007316:	2201      	movs	r2, #1
 8007318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800731a:	f7fd fb75 	bl	8004a08 <HAL_GetTick>
 800731e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007320:	e008      	b.n	8007334 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007322:	f7fd fb71 	bl	8004a08 <HAL_GetTick>
 8007326:	4602      	mov	r2, r0
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	1ad3      	subs	r3, r2, r3
 800732c:	2b02      	cmp	r3, #2
 800732e:	d901      	bls.n	8007334 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007330:	2303      	movs	r3, #3
 8007332:	e1a8      	b.n	8007686 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007334:	4b2b      	ldr	r3, [pc, #172]	@ (80073e4 <HAL_RCC_OscConfig+0x240>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 0302 	and.w	r3, r3, #2
 800733c:	2b00      	cmp	r3, #0
 800733e:	d0f0      	beq.n	8007322 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007340:	4b28      	ldr	r3, [pc, #160]	@ (80073e4 <HAL_RCC_OscConfig+0x240>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	00db      	lsls	r3, r3, #3
 800734e:	4925      	ldr	r1, [pc, #148]	@ (80073e4 <HAL_RCC_OscConfig+0x240>)
 8007350:	4313      	orrs	r3, r2
 8007352:	600b      	str	r3, [r1, #0]
 8007354:	e015      	b.n	8007382 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007356:	4b24      	ldr	r3, [pc, #144]	@ (80073e8 <HAL_RCC_OscConfig+0x244>)
 8007358:	2200      	movs	r2, #0
 800735a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800735c:	f7fd fb54 	bl	8004a08 <HAL_GetTick>
 8007360:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007362:	e008      	b.n	8007376 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007364:	f7fd fb50 	bl	8004a08 <HAL_GetTick>
 8007368:	4602      	mov	r2, r0
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	1ad3      	subs	r3, r2, r3
 800736e:	2b02      	cmp	r3, #2
 8007370:	d901      	bls.n	8007376 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007372:	2303      	movs	r3, #3
 8007374:	e187      	b.n	8007686 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007376:	4b1b      	ldr	r3, [pc, #108]	@ (80073e4 <HAL_RCC_OscConfig+0x240>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f003 0302 	and.w	r3, r3, #2
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1f0      	bne.n	8007364 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 0308 	and.w	r3, r3, #8
 800738a:	2b00      	cmp	r3, #0
 800738c:	d036      	beq.n	80073fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	695b      	ldr	r3, [r3, #20]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d016      	beq.n	80073c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007396:	4b15      	ldr	r3, [pc, #84]	@ (80073ec <HAL_RCC_OscConfig+0x248>)
 8007398:	2201      	movs	r2, #1
 800739a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800739c:	f7fd fb34 	bl	8004a08 <HAL_GetTick>
 80073a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073a2:	e008      	b.n	80073b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073a4:	f7fd fb30 	bl	8004a08 <HAL_GetTick>
 80073a8:	4602      	mov	r2, r0
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	1ad3      	subs	r3, r2, r3
 80073ae:	2b02      	cmp	r3, #2
 80073b0:	d901      	bls.n	80073b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80073b2:	2303      	movs	r3, #3
 80073b4:	e167      	b.n	8007686 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073b6:	4b0b      	ldr	r3, [pc, #44]	@ (80073e4 <HAL_RCC_OscConfig+0x240>)
 80073b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073ba:	f003 0302 	and.w	r3, r3, #2
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d0f0      	beq.n	80073a4 <HAL_RCC_OscConfig+0x200>
 80073c2:	e01b      	b.n	80073fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073c4:	4b09      	ldr	r3, [pc, #36]	@ (80073ec <HAL_RCC_OscConfig+0x248>)
 80073c6:	2200      	movs	r2, #0
 80073c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073ca:	f7fd fb1d 	bl	8004a08 <HAL_GetTick>
 80073ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073d0:	e00e      	b.n	80073f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073d2:	f7fd fb19 	bl	8004a08 <HAL_GetTick>
 80073d6:	4602      	mov	r2, r0
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	1ad3      	subs	r3, r2, r3
 80073dc:	2b02      	cmp	r3, #2
 80073de:	d907      	bls.n	80073f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e150      	b.n	8007686 <HAL_RCC_OscConfig+0x4e2>
 80073e4:	40023800 	.word	0x40023800
 80073e8:	42470000 	.word	0x42470000
 80073ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073f0:	4b88      	ldr	r3, [pc, #544]	@ (8007614 <HAL_RCC_OscConfig+0x470>)
 80073f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073f4:	f003 0302 	and.w	r3, r3, #2
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d1ea      	bne.n	80073d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f003 0304 	and.w	r3, r3, #4
 8007404:	2b00      	cmp	r3, #0
 8007406:	f000 8097 	beq.w	8007538 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800740a:	2300      	movs	r3, #0
 800740c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800740e:	4b81      	ldr	r3, [pc, #516]	@ (8007614 <HAL_RCC_OscConfig+0x470>)
 8007410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007412:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10f      	bne.n	800743a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800741a:	2300      	movs	r3, #0
 800741c:	60bb      	str	r3, [r7, #8]
 800741e:	4b7d      	ldr	r3, [pc, #500]	@ (8007614 <HAL_RCC_OscConfig+0x470>)
 8007420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007422:	4a7c      	ldr	r2, [pc, #496]	@ (8007614 <HAL_RCC_OscConfig+0x470>)
 8007424:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007428:	6413      	str	r3, [r2, #64]	@ 0x40
 800742a:	4b7a      	ldr	r3, [pc, #488]	@ (8007614 <HAL_RCC_OscConfig+0x470>)
 800742c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800742e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007432:	60bb      	str	r3, [r7, #8]
 8007434:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007436:	2301      	movs	r3, #1
 8007438:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800743a:	4b77      	ldr	r3, [pc, #476]	@ (8007618 <HAL_RCC_OscConfig+0x474>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007442:	2b00      	cmp	r3, #0
 8007444:	d118      	bne.n	8007478 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007446:	4b74      	ldr	r3, [pc, #464]	@ (8007618 <HAL_RCC_OscConfig+0x474>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a73      	ldr	r2, [pc, #460]	@ (8007618 <HAL_RCC_OscConfig+0x474>)
 800744c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007450:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007452:	f7fd fad9 	bl	8004a08 <HAL_GetTick>
 8007456:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007458:	e008      	b.n	800746c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800745a:	f7fd fad5 	bl	8004a08 <HAL_GetTick>
 800745e:	4602      	mov	r2, r0
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	1ad3      	subs	r3, r2, r3
 8007464:	2b02      	cmp	r3, #2
 8007466:	d901      	bls.n	800746c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007468:	2303      	movs	r3, #3
 800746a:	e10c      	b.n	8007686 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800746c:	4b6a      	ldr	r3, [pc, #424]	@ (8007618 <HAL_RCC_OscConfig+0x474>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007474:	2b00      	cmp	r3, #0
 8007476:	d0f0      	beq.n	800745a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	2b01      	cmp	r3, #1
 800747e:	d106      	bne.n	800748e <HAL_RCC_OscConfig+0x2ea>
 8007480:	4b64      	ldr	r3, [pc, #400]	@ (8007614 <HAL_RCC_OscConfig+0x470>)
 8007482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007484:	4a63      	ldr	r2, [pc, #396]	@ (8007614 <HAL_RCC_OscConfig+0x470>)
 8007486:	f043 0301 	orr.w	r3, r3, #1
 800748a:	6713      	str	r3, [r2, #112]	@ 0x70
 800748c:	e01c      	b.n	80074c8 <HAL_RCC_OscConfig+0x324>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	2b05      	cmp	r3, #5
 8007494:	d10c      	bne.n	80074b0 <HAL_RCC_OscConfig+0x30c>
 8007496:	4b5f      	ldr	r3, [pc, #380]	@ (8007614 <HAL_RCC_OscConfig+0x470>)
 8007498:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800749a:	4a5e      	ldr	r2, [pc, #376]	@ (8007614 <HAL_RCC_OscConfig+0x470>)
 800749c:	f043 0304 	orr.w	r3, r3, #4
 80074a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80074a2:	4b5c      	ldr	r3, [pc, #368]	@ (8007614 <HAL_RCC_OscConfig+0x470>)
 80074a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074a6:	4a5b      	ldr	r2, [pc, #364]	@ (8007614 <HAL_RCC_OscConfig+0x470>)
 80074a8:	f043 0301 	orr.w	r3, r3, #1
 80074ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80074ae:	e00b      	b.n	80074c8 <HAL_RCC_OscConfig+0x324>
 80074b0:	4b58      	ldr	r3, [pc, #352]	@ (8007614 <HAL_RCC_OscConfig+0x470>)
 80074b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074b4:	4a57      	ldr	r2, [pc, #348]	@ (8007614 <HAL_RCC_OscConfig+0x470>)
 80074b6:	f023 0301 	bic.w	r3, r3, #1
 80074ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80074bc:	4b55      	ldr	r3, [pc, #340]	@ (8007614 <HAL_RCC_OscConfig+0x470>)
 80074be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074c0:	4a54      	ldr	r2, [pc, #336]	@ (8007614 <HAL_RCC_OscConfig+0x470>)
 80074c2:	f023 0304 	bic.w	r3, r3, #4
 80074c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d015      	beq.n	80074fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074d0:	f7fd fa9a 	bl	8004a08 <HAL_GetTick>
 80074d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074d6:	e00a      	b.n	80074ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074d8:	f7fd fa96 	bl	8004a08 <HAL_GetTick>
 80074dc:	4602      	mov	r2, r0
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d901      	bls.n	80074ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80074ea:	2303      	movs	r3, #3
 80074ec:	e0cb      	b.n	8007686 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074ee:	4b49      	ldr	r3, [pc, #292]	@ (8007614 <HAL_RCC_OscConfig+0x470>)
 80074f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074f2:	f003 0302 	and.w	r3, r3, #2
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d0ee      	beq.n	80074d8 <HAL_RCC_OscConfig+0x334>
 80074fa:	e014      	b.n	8007526 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074fc:	f7fd fa84 	bl	8004a08 <HAL_GetTick>
 8007500:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007502:	e00a      	b.n	800751a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007504:	f7fd fa80 	bl	8004a08 <HAL_GetTick>
 8007508:	4602      	mov	r2, r0
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	1ad3      	subs	r3, r2, r3
 800750e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007512:	4293      	cmp	r3, r2
 8007514:	d901      	bls.n	800751a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007516:	2303      	movs	r3, #3
 8007518:	e0b5      	b.n	8007686 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800751a:	4b3e      	ldr	r3, [pc, #248]	@ (8007614 <HAL_RCC_OscConfig+0x470>)
 800751c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800751e:	f003 0302 	and.w	r3, r3, #2
 8007522:	2b00      	cmp	r3, #0
 8007524:	d1ee      	bne.n	8007504 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007526:	7dfb      	ldrb	r3, [r7, #23]
 8007528:	2b01      	cmp	r3, #1
 800752a:	d105      	bne.n	8007538 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800752c:	4b39      	ldr	r3, [pc, #228]	@ (8007614 <HAL_RCC_OscConfig+0x470>)
 800752e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007530:	4a38      	ldr	r2, [pc, #224]	@ (8007614 <HAL_RCC_OscConfig+0x470>)
 8007532:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007536:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	2b00      	cmp	r3, #0
 800753e:	f000 80a1 	beq.w	8007684 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007542:	4b34      	ldr	r3, [pc, #208]	@ (8007614 <HAL_RCC_OscConfig+0x470>)
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	f003 030c 	and.w	r3, r3, #12
 800754a:	2b08      	cmp	r3, #8
 800754c:	d05c      	beq.n	8007608 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	699b      	ldr	r3, [r3, #24]
 8007552:	2b02      	cmp	r3, #2
 8007554:	d141      	bne.n	80075da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007556:	4b31      	ldr	r3, [pc, #196]	@ (800761c <HAL_RCC_OscConfig+0x478>)
 8007558:	2200      	movs	r2, #0
 800755a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800755c:	f7fd fa54 	bl	8004a08 <HAL_GetTick>
 8007560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007562:	e008      	b.n	8007576 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007564:	f7fd fa50 	bl	8004a08 <HAL_GetTick>
 8007568:	4602      	mov	r2, r0
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	2b02      	cmp	r3, #2
 8007570:	d901      	bls.n	8007576 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	e087      	b.n	8007686 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007576:	4b27      	ldr	r3, [pc, #156]	@ (8007614 <HAL_RCC_OscConfig+0x470>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800757e:	2b00      	cmp	r3, #0
 8007580:	d1f0      	bne.n	8007564 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	69da      	ldr	r2, [r3, #28]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a1b      	ldr	r3, [r3, #32]
 800758a:	431a      	orrs	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007590:	019b      	lsls	r3, r3, #6
 8007592:	431a      	orrs	r2, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007598:	085b      	lsrs	r3, r3, #1
 800759a:	3b01      	subs	r3, #1
 800759c:	041b      	lsls	r3, r3, #16
 800759e:	431a      	orrs	r2, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a4:	061b      	lsls	r3, r3, #24
 80075a6:	491b      	ldr	r1, [pc, #108]	@ (8007614 <HAL_RCC_OscConfig+0x470>)
 80075a8:	4313      	orrs	r3, r2
 80075aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075ac:	4b1b      	ldr	r3, [pc, #108]	@ (800761c <HAL_RCC_OscConfig+0x478>)
 80075ae:	2201      	movs	r2, #1
 80075b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075b2:	f7fd fa29 	bl	8004a08 <HAL_GetTick>
 80075b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075b8:	e008      	b.n	80075cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075ba:	f7fd fa25 	bl	8004a08 <HAL_GetTick>
 80075be:	4602      	mov	r2, r0
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	1ad3      	subs	r3, r2, r3
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d901      	bls.n	80075cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80075c8:	2303      	movs	r3, #3
 80075ca:	e05c      	b.n	8007686 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075cc:	4b11      	ldr	r3, [pc, #68]	@ (8007614 <HAL_RCC_OscConfig+0x470>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d0f0      	beq.n	80075ba <HAL_RCC_OscConfig+0x416>
 80075d8:	e054      	b.n	8007684 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075da:	4b10      	ldr	r3, [pc, #64]	@ (800761c <HAL_RCC_OscConfig+0x478>)
 80075dc:	2200      	movs	r2, #0
 80075de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075e0:	f7fd fa12 	bl	8004a08 <HAL_GetTick>
 80075e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075e6:	e008      	b.n	80075fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075e8:	f7fd fa0e 	bl	8004a08 <HAL_GetTick>
 80075ec:	4602      	mov	r2, r0
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	1ad3      	subs	r3, r2, r3
 80075f2:	2b02      	cmp	r3, #2
 80075f4:	d901      	bls.n	80075fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80075f6:	2303      	movs	r3, #3
 80075f8:	e045      	b.n	8007686 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075fa:	4b06      	ldr	r3, [pc, #24]	@ (8007614 <HAL_RCC_OscConfig+0x470>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007602:	2b00      	cmp	r3, #0
 8007604:	d1f0      	bne.n	80075e8 <HAL_RCC_OscConfig+0x444>
 8007606:	e03d      	b.n	8007684 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	699b      	ldr	r3, [r3, #24]
 800760c:	2b01      	cmp	r3, #1
 800760e:	d107      	bne.n	8007620 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	e038      	b.n	8007686 <HAL_RCC_OscConfig+0x4e2>
 8007614:	40023800 	.word	0x40023800
 8007618:	40007000 	.word	0x40007000
 800761c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007620:	4b1b      	ldr	r3, [pc, #108]	@ (8007690 <HAL_RCC_OscConfig+0x4ec>)
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	699b      	ldr	r3, [r3, #24]
 800762a:	2b01      	cmp	r3, #1
 800762c:	d028      	beq.n	8007680 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007638:	429a      	cmp	r2, r3
 800763a:	d121      	bne.n	8007680 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007646:	429a      	cmp	r2, r3
 8007648:	d11a      	bne.n	8007680 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007650:	4013      	ands	r3, r2
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007656:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007658:	4293      	cmp	r3, r2
 800765a:	d111      	bne.n	8007680 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007666:	085b      	lsrs	r3, r3, #1
 8007668:	3b01      	subs	r3, #1
 800766a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800766c:	429a      	cmp	r2, r3
 800766e:	d107      	bne.n	8007680 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800767a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800767c:	429a      	cmp	r2, r3
 800767e:	d001      	beq.n	8007684 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	e000      	b.n	8007686 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3718      	adds	r7, #24
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	40023800 	.word	0x40023800

08007694 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d101      	bne.n	80076a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	e0cc      	b.n	8007842 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80076a8:	4b68      	ldr	r3, [pc, #416]	@ (800784c <HAL_RCC_ClockConfig+0x1b8>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 0307 	and.w	r3, r3, #7
 80076b0:	683a      	ldr	r2, [r7, #0]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d90c      	bls.n	80076d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076b6:	4b65      	ldr	r3, [pc, #404]	@ (800784c <HAL_RCC_ClockConfig+0x1b8>)
 80076b8:	683a      	ldr	r2, [r7, #0]
 80076ba:	b2d2      	uxtb	r2, r2
 80076bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076be:	4b63      	ldr	r3, [pc, #396]	@ (800784c <HAL_RCC_ClockConfig+0x1b8>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 0307 	and.w	r3, r3, #7
 80076c6:	683a      	ldr	r2, [r7, #0]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d001      	beq.n	80076d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	e0b8      	b.n	8007842 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 0302 	and.w	r3, r3, #2
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d020      	beq.n	800771e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 0304 	and.w	r3, r3, #4
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d005      	beq.n	80076f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80076e8:	4b59      	ldr	r3, [pc, #356]	@ (8007850 <HAL_RCC_ClockConfig+0x1bc>)
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	4a58      	ldr	r2, [pc, #352]	@ (8007850 <HAL_RCC_ClockConfig+0x1bc>)
 80076ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80076f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 0308 	and.w	r3, r3, #8
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d005      	beq.n	800770c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007700:	4b53      	ldr	r3, [pc, #332]	@ (8007850 <HAL_RCC_ClockConfig+0x1bc>)
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	4a52      	ldr	r2, [pc, #328]	@ (8007850 <HAL_RCC_ClockConfig+0x1bc>)
 8007706:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800770a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800770c:	4b50      	ldr	r3, [pc, #320]	@ (8007850 <HAL_RCC_ClockConfig+0x1bc>)
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	494d      	ldr	r1, [pc, #308]	@ (8007850 <HAL_RCC_ClockConfig+0x1bc>)
 800771a:	4313      	orrs	r3, r2
 800771c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 0301 	and.w	r3, r3, #1
 8007726:	2b00      	cmp	r3, #0
 8007728:	d044      	beq.n	80077b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d107      	bne.n	8007742 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007732:	4b47      	ldr	r3, [pc, #284]	@ (8007850 <HAL_RCC_ClockConfig+0x1bc>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800773a:	2b00      	cmp	r3, #0
 800773c:	d119      	bne.n	8007772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e07f      	b.n	8007842 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	2b02      	cmp	r3, #2
 8007748:	d003      	beq.n	8007752 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800774e:	2b03      	cmp	r3, #3
 8007750:	d107      	bne.n	8007762 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007752:	4b3f      	ldr	r3, [pc, #252]	@ (8007850 <HAL_RCC_ClockConfig+0x1bc>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800775a:	2b00      	cmp	r3, #0
 800775c:	d109      	bne.n	8007772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	e06f      	b.n	8007842 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007762:	4b3b      	ldr	r3, [pc, #236]	@ (8007850 <HAL_RCC_ClockConfig+0x1bc>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 0302 	and.w	r3, r3, #2
 800776a:	2b00      	cmp	r3, #0
 800776c:	d101      	bne.n	8007772 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	e067      	b.n	8007842 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007772:	4b37      	ldr	r3, [pc, #220]	@ (8007850 <HAL_RCC_ClockConfig+0x1bc>)
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	f023 0203 	bic.w	r2, r3, #3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	4934      	ldr	r1, [pc, #208]	@ (8007850 <HAL_RCC_ClockConfig+0x1bc>)
 8007780:	4313      	orrs	r3, r2
 8007782:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007784:	f7fd f940 	bl	8004a08 <HAL_GetTick>
 8007788:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800778a:	e00a      	b.n	80077a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800778c:	f7fd f93c 	bl	8004a08 <HAL_GetTick>
 8007790:	4602      	mov	r2, r0
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	f241 3288 	movw	r2, #5000	@ 0x1388
 800779a:	4293      	cmp	r3, r2
 800779c:	d901      	bls.n	80077a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800779e:	2303      	movs	r3, #3
 80077a0:	e04f      	b.n	8007842 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077a2:	4b2b      	ldr	r3, [pc, #172]	@ (8007850 <HAL_RCC_ClockConfig+0x1bc>)
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	f003 020c 	and.w	r2, r3, #12
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d1eb      	bne.n	800778c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80077b4:	4b25      	ldr	r3, [pc, #148]	@ (800784c <HAL_RCC_ClockConfig+0x1b8>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f003 0307 	and.w	r3, r3, #7
 80077bc:	683a      	ldr	r2, [r7, #0]
 80077be:	429a      	cmp	r2, r3
 80077c0:	d20c      	bcs.n	80077dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077c2:	4b22      	ldr	r3, [pc, #136]	@ (800784c <HAL_RCC_ClockConfig+0x1b8>)
 80077c4:	683a      	ldr	r2, [r7, #0]
 80077c6:	b2d2      	uxtb	r2, r2
 80077c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077ca:	4b20      	ldr	r3, [pc, #128]	@ (800784c <HAL_RCC_ClockConfig+0x1b8>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f003 0307 	and.w	r3, r3, #7
 80077d2:	683a      	ldr	r2, [r7, #0]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d001      	beq.n	80077dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	e032      	b.n	8007842 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 0304 	and.w	r3, r3, #4
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d008      	beq.n	80077fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80077e8:	4b19      	ldr	r3, [pc, #100]	@ (8007850 <HAL_RCC_ClockConfig+0x1bc>)
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	4916      	ldr	r1, [pc, #88]	@ (8007850 <HAL_RCC_ClockConfig+0x1bc>)
 80077f6:	4313      	orrs	r3, r2
 80077f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 0308 	and.w	r3, r3, #8
 8007802:	2b00      	cmp	r3, #0
 8007804:	d009      	beq.n	800781a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007806:	4b12      	ldr	r3, [pc, #72]	@ (8007850 <HAL_RCC_ClockConfig+0x1bc>)
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	00db      	lsls	r3, r3, #3
 8007814:	490e      	ldr	r1, [pc, #56]	@ (8007850 <HAL_RCC_ClockConfig+0x1bc>)
 8007816:	4313      	orrs	r3, r2
 8007818:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800781a:	f000 f821 	bl	8007860 <HAL_RCC_GetSysClockFreq>
 800781e:	4602      	mov	r2, r0
 8007820:	4b0b      	ldr	r3, [pc, #44]	@ (8007850 <HAL_RCC_ClockConfig+0x1bc>)
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	091b      	lsrs	r3, r3, #4
 8007826:	f003 030f 	and.w	r3, r3, #15
 800782a:	490a      	ldr	r1, [pc, #40]	@ (8007854 <HAL_RCC_ClockConfig+0x1c0>)
 800782c:	5ccb      	ldrb	r3, [r1, r3]
 800782e:	fa22 f303 	lsr.w	r3, r2, r3
 8007832:	4a09      	ldr	r2, [pc, #36]	@ (8007858 <HAL_RCC_ClockConfig+0x1c4>)
 8007834:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007836:	4b09      	ldr	r3, [pc, #36]	@ (800785c <HAL_RCC_ClockConfig+0x1c8>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4618      	mov	r0, r3
 800783c:	f7fd f8a0 	bl	8004980 <HAL_InitTick>

  return HAL_OK;
 8007840:	2300      	movs	r3, #0
}
 8007842:	4618      	mov	r0, r3
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	40023c00 	.word	0x40023c00
 8007850:	40023800 	.word	0x40023800
 8007854:	0800eed0 	.word	0x0800eed0
 8007858:	20000004 	.word	0x20000004
 800785c:	20000038 	.word	0x20000038

08007860 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007860:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007864:	b090      	sub	sp, #64	@ 0x40
 8007866:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007868:	2300      	movs	r3, #0
 800786a:	637b      	str	r3, [r7, #52]	@ 0x34
 800786c:	2300      	movs	r3, #0
 800786e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007870:	2300      	movs	r3, #0
 8007872:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007874:	2300      	movs	r3, #0
 8007876:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007878:	4b59      	ldr	r3, [pc, #356]	@ (80079e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	f003 030c 	and.w	r3, r3, #12
 8007880:	2b08      	cmp	r3, #8
 8007882:	d00d      	beq.n	80078a0 <HAL_RCC_GetSysClockFreq+0x40>
 8007884:	2b08      	cmp	r3, #8
 8007886:	f200 80a1 	bhi.w	80079cc <HAL_RCC_GetSysClockFreq+0x16c>
 800788a:	2b00      	cmp	r3, #0
 800788c:	d002      	beq.n	8007894 <HAL_RCC_GetSysClockFreq+0x34>
 800788e:	2b04      	cmp	r3, #4
 8007890:	d003      	beq.n	800789a <HAL_RCC_GetSysClockFreq+0x3a>
 8007892:	e09b      	b.n	80079cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007894:	4b53      	ldr	r3, [pc, #332]	@ (80079e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8007896:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8007898:	e09b      	b.n	80079d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800789a:	4b53      	ldr	r3, [pc, #332]	@ (80079e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800789c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800789e:	e098      	b.n	80079d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80078a0:	4b4f      	ldr	r3, [pc, #316]	@ (80079e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80078a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80078aa:	4b4d      	ldr	r3, [pc, #308]	@ (80079e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d028      	beq.n	8007908 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078b6:	4b4a      	ldr	r3, [pc, #296]	@ (80079e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	099b      	lsrs	r3, r3, #6
 80078bc:	2200      	movs	r2, #0
 80078be:	623b      	str	r3, [r7, #32]
 80078c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80078c2:	6a3b      	ldr	r3, [r7, #32]
 80078c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80078c8:	2100      	movs	r1, #0
 80078ca:	4b47      	ldr	r3, [pc, #284]	@ (80079e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80078cc:	fb03 f201 	mul.w	r2, r3, r1
 80078d0:	2300      	movs	r3, #0
 80078d2:	fb00 f303 	mul.w	r3, r0, r3
 80078d6:	4413      	add	r3, r2
 80078d8:	4a43      	ldr	r2, [pc, #268]	@ (80079e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80078da:	fba0 1202 	umull	r1, r2, r0, r2
 80078de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80078e0:	460a      	mov	r2, r1
 80078e2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80078e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078e6:	4413      	add	r3, r2
 80078e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80078ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078ec:	2200      	movs	r2, #0
 80078ee:	61bb      	str	r3, [r7, #24]
 80078f0:	61fa      	str	r2, [r7, #28]
 80078f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80078f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80078fa:	f7f9 f9c5 	bl	8000c88 <__aeabi_uldivmod>
 80078fe:	4602      	mov	r2, r0
 8007900:	460b      	mov	r3, r1
 8007902:	4613      	mov	r3, r2
 8007904:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007906:	e053      	b.n	80079b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007908:	4b35      	ldr	r3, [pc, #212]	@ (80079e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	099b      	lsrs	r3, r3, #6
 800790e:	2200      	movs	r2, #0
 8007910:	613b      	str	r3, [r7, #16]
 8007912:	617a      	str	r2, [r7, #20]
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800791a:	f04f 0b00 	mov.w	fp, #0
 800791e:	4652      	mov	r2, sl
 8007920:	465b      	mov	r3, fp
 8007922:	f04f 0000 	mov.w	r0, #0
 8007926:	f04f 0100 	mov.w	r1, #0
 800792a:	0159      	lsls	r1, r3, #5
 800792c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007930:	0150      	lsls	r0, r2, #5
 8007932:	4602      	mov	r2, r0
 8007934:	460b      	mov	r3, r1
 8007936:	ebb2 080a 	subs.w	r8, r2, sl
 800793a:	eb63 090b 	sbc.w	r9, r3, fp
 800793e:	f04f 0200 	mov.w	r2, #0
 8007942:	f04f 0300 	mov.w	r3, #0
 8007946:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800794a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800794e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007952:	ebb2 0408 	subs.w	r4, r2, r8
 8007956:	eb63 0509 	sbc.w	r5, r3, r9
 800795a:	f04f 0200 	mov.w	r2, #0
 800795e:	f04f 0300 	mov.w	r3, #0
 8007962:	00eb      	lsls	r3, r5, #3
 8007964:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007968:	00e2      	lsls	r2, r4, #3
 800796a:	4614      	mov	r4, r2
 800796c:	461d      	mov	r5, r3
 800796e:	eb14 030a 	adds.w	r3, r4, sl
 8007972:	603b      	str	r3, [r7, #0]
 8007974:	eb45 030b 	adc.w	r3, r5, fp
 8007978:	607b      	str	r3, [r7, #4]
 800797a:	f04f 0200 	mov.w	r2, #0
 800797e:	f04f 0300 	mov.w	r3, #0
 8007982:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007986:	4629      	mov	r1, r5
 8007988:	028b      	lsls	r3, r1, #10
 800798a:	4621      	mov	r1, r4
 800798c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007990:	4621      	mov	r1, r4
 8007992:	028a      	lsls	r2, r1, #10
 8007994:	4610      	mov	r0, r2
 8007996:	4619      	mov	r1, r3
 8007998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800799a:	2200      	movs	r2, #0
 800799c:	60bb      	str	r3, [r7, #8]
 800799e:	60fa      	str	r2, [r7, #12]
 80079a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80079a4:	f7f9 f970 	bl	8000c88 <__aeabi_uldivmod>
 80079a8:	4602      	mov	r2, r0
 80079aa:	460b      	mov	r3, r1
 80079ac:	4613      	mov	r3, r2
 80079ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80079b0:	4b0b      	ldr	r3, [pc, #44]	@ (80079e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	0c1b      	lsrs	r3, r3, #16
 80079b6:	f003 0303 	and.w	r3, r3, #3
 80079ba:	3301      	adds	r3, #1
 80079bc:	005b      	lsls	r3, r3, #1
 80079be:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80079c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80079c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80079c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80079ca:	e002      	b.n	80079d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80079cc:	4b05      	ldr	r3, [pc, #20]	@ (80079e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80079ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80079d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80079d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3740      	adds	r7, #64	@ 0x40
 80079d8:	46bd      	mov	sp, r7
 80079da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079de:	bf00      	nop
 80079e0:	40023800 	.word	0x40023800
 80079e4:	00f42400 	.word	0x00f42400
 80079e8:	017d7840 	.word	0x017d7840

080079ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079ec:	b480      	push	{r7}
 80079ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80079f0:	4b03      	ldr	r3, [pc, #12]	@ (8007a00 <HAL_RCC_GetHCLKFreq+0x14>)
 80079f2:	681b      	ldr	r3, [r3, #0]
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr
 80079fe:	bf00      	nop
 8007a00:	20000004 	.word	0x20000004

08007a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007a08:	f7ff fff0 	bl	80079ec <HAL_RCC_GetHCLKFreq>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	4b05      	ldr	r3, [pc, #20]	@ (8007a24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	0a9b      	lsrs	r3, r3, #10
 8007a14:	f003 0307 	and.w	r3, r3, #7
 8007a18:	4903      	ldr	r1, [pc, #12]	@ (8007a28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a1a:	5ccb      	ldrb	r3, [r1, r3]
 8007a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	40023800 	.word	0x40023800
 8007a28:	0800eee0 	.word	0x0800eee0

08007a2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007a30:	f7ff ffdc 	bl	80079ec <HAL_RCC_GetHCLKFreq>
 8007a34:	4602      	mov	r2, r0
 8007a36:	4b05      	ldr	r3, [pc, #20]	@ (8007a4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	0b5b      	lsrs	r3, r3, #13
 8007a3c:	f003 0307 	and.w	r3, r3, #7
 8007a40:	4903      	ldr	r1, [pc, #12]	@ (8007a50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a42:	5ccb      	ldrb	r3, [r1, r3]
 8007a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	40023800 	.word	0x40023800
 8007a50:	0800eee0 	.word	0x0800eee0

08007a54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d101      	bne.n	8007a66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	e041      	b.n	8007aea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d106      	bne.n	8007a80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f7fa fa9c 	bl	8001fb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2202      	movs	r2, #2
 8007a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	3304      	adds	r3, #4
 8007a90:	4619      	mov	r1, r3
 8007a92:	4610      	mov	r0, r2
 8007a94:	f000 fa7e 	bl	8007f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3708      	adds	r7, #8
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
	...

08007af4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d001      	beq.n	8007b0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e04e      	b.n	8007baa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2202      	movs	r2, #2
 8007b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68da      	ldr	r2, [r3, #12]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f042 0201 	orr.w	r2, r2, #1
 8007b22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a23      	ldr	r2, [pc, #140]	@ (8007bb8 <HAL_TIM_Base_Start_IT+0xc4>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d022      	beq.n	8007b74 <HAL_TIM_Base_Start_IT+0x80>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b36:	d01d      	beq.n	8007b74 <HAL_TIM_Base_Start_IT+0x80>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a1f      	ldr	r2, [pc, #124]	@ (8007bbc <HAL_TIM_Base_Start_IT+0xc8>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d018      	beq.n	8007b74 <HAL_TIM_Base_Start_IT+0x80>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a1e      	ldr	r2, [pc, #120]	@ (8007bc0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d013      	beq.n	8007b74 <HAL_TIM_Base_Start_IT+0x80>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a1c      	ldr	r2, [pc, #112]	@ (8007bc4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d00e      	beq.n	8007b74 <HAL_TIM_Base_Start_IT+0x80>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a1b      	ldr	r2, [pc, #108]	@ (8007bc8 <HAL_TIM_Base_Start_IT+0xd4>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d009      	beq.n	8007b74 <HAL_TIM_Base_Start_IT+0x80>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a19      	ldr	r2, [pc, #100]	@ (8007bcc <HAL_TIM_Base_Start_IT+0xd8>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d004      	beq.n	8007b74 <HAL_TIM_Base_Start_IT+0x80>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a18      	ldr	r2, [pc, #96]	@ (8007bd0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d111      	bne.n	8007b98 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	f003 0307 	and.w	r3, r3, #7
 8007b7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2b06      	cmp	r3, #6
 8007b84:	d010      	beq.n	8007ba8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f042 0201 	orr.w	r2, r2, #1
 8007b94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b96:	e007      	b.n	8007ba8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f042 0201 	orr.w	r2, r2, #1
 8007ba6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3714      	adds	r7, #20
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	40010000 	.word	0x40010000
 8007bbc:	40000400 	.word	0x40000400
 8007bc0:	40000800 	.word	0x40000800
 8007bc4:	40000c00 	.word	0x40000c00
 8007bc8:	40010400 	.word	0x40010400
 8007bcc:	40014000 	.word	0x40014000
 8007bd0:	40001800 	.word	0x40001800

08007bd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	f003 0302 	and.w	r3, r3, #2
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d020      	beq.n	8007c38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f003 0302 	and.w	r3, r3, #2
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d01b      	beq.n	8007c38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f06f 0202 	mvn.w	r2, #2
 8007c08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	699b      	ldr	r3, [r3, #24]
 8007c16:	f003 0303 	and.w	r3, r3, #3
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d003      	beq.n	8007c26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 f999 	bl	8007f56 <HAL_TIM_IC_CaptureCallback>
 8007c24:	e005      	b.n	8007c32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 f98b 	bl	8007f42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 f99c 	bl	8007f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	f003 0304 	and.w	r3, r3, #4
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d020      	beq.n	8007c84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f003 0304 	and.w	r3, r3, #4
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d01b      	beq.n	8007c84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f06f 0204 	mvn.w	r2, #4
 8007c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2202      	movs	r2, #2
 8007c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	699b      	ldr	r3, [r3, #24]
 8007c62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d003      	beq.n	8007c72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 f973 	bl	8007f56 <HAL_TIM_IC_CaptureCallback>
 8007c70:	e005      	b.n	8007c7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 f965 	bl	8007f42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f976 	bl	8007f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	f003 0308 	and.w	r3, r3, #8
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d020      	beq.n	8007cd0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f003 0308 	and.w	r3, r3, #8
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d01b      	beq.n	8007cd0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f06f 0208 	mvn.w	r2, #8
 8007ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2204      	movs	r2, #4
 8007ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	69db      	ldr	r3, [r3, #28]
 8007cae:	f003 0303 	and.w	r3, r3, #3
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d003      	beq.n	8007cbe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 f94d 	bl	8007f56 <HAL_TIM_IC_CaptureCallback>
 8007cbc:	e005      	b.n	8007cca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 f93f 	bl	8007f42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 f950 	bl	8007f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	f003 0310 	and.w	r3, r3, #16
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d020      	beq.n	8007d1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f003 0310 	and.w	r3, r3, #16
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d01b      	beq.n	8007d1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f06f 0210 	mvn.w	r2, #16
 8007cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2208      	movs	r2, #8
 8007cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	69db      	ldr	r3, [r3, #28]
 8007cfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d003      	beq.n	8007d0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 f927 	bl	8007f56 <HAL_TIM_IC_CaptureCallback>
 8007d08:	e005      	b.n	8007d16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 f919 	bl	8007f42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 f92a 	bl	8007f6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	f003 0301 	and.w	r3, r3, #1
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00c      	beq.n	8007d40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f003 0301 	and.w	r3, r3, #1
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d007      	beq.n	8007d40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f06f 0201 	mvn.w	r2, #1
 8007d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f7f9 f9f2 	bl	8001124 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00c      	beq.n	8007d64 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d007      	beq.n	8007d64 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 fae4 	bl	800832c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00c      	beq.n	8007d88 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d007      	beq.n	8007d88 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 f8fb 	bl	8007f7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	f003 0320 	and.w	r3, r3, #32
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00c      	beq.n	8007dac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f003 0320 	and.w	r3, r3, #32
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d007      	beq.n	8007dac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f06f 0220 	mvn.w	r2, #32
 8007da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 fab6 	bl	8008318 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007dac:	bf00      	nop
 8007dae:	3710      	adds	r7, #16
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d101      	bne.n	8007dd0 <HAL_TIM_ConfigClockSource+0x1c>
 8007dcc:	2302      	movs	r3, #2
 8007dce:	e0b4      	b.n	8007f3a <HAL_TIM_ConfigClockSource+0x186>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2202      	movs	r2, #2
 8007ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007dee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007df6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68ba      	ldr	r2, [r7, #8]
 8007dfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e08:	d03e      	beq.n	8007e88 <HAL_TIM_ConfigClockSource+0xd4>
 8007e0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e0e:	f200 8087 	bhi.w	8007f20 <HAL_TIM_ConfigClockSource+0x16c>
 8007e12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e16:	f000 8086 	beq.w	8007f26 <HAL_TIM_ConfigClockSource+0x172>
 8007e1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e1e:	d87f      	bhi.n	8007f20 <HAL_TIM_ConfigClockSource+0x16c>
 8007e20:	2b70      	cmp	r3, #112	@ 0x70
 8007e22:	d01a      	beq.n	8007e5a <HAL_TIM_ConfigClockSource+0xa6>
 8007e24:	2b70      	cmp	r3, #112	@ 0x70
 8007e26:	d87b      	bhi.n	8007f20 <HAL_TIM_ConfigClockSource+0x16c>
 8007e28:	2b60      	cmp	r3, #96	@ 0x60
 8007e2a:	d050      	beq.n	8007ece <HAL_TIM_ConfigClockSource+0x11a>
 8007e2c:	2b60      	cmp	r3, #96	@ 0x60
 8007e2e:	d877      	bhi.n	8007f20 <HAL_TIM_ConfigClockSource+0x16c>
 8007e30:	2b50      	cmp	r3, #80	@ 0x50
 8007e32:	d03c      	beq.n	8007eae <HAL_TIM_ConfigClockSource+0xfa>
 8007e34:	2b50      	cmp	r3, #80	@ 0x50
 8007e36:	d873      	bhi.n	8007f20 <HAL_TIM_ConfigClockSource+0x16c>
 8007e38:	2b40      	cmp	r3, #64	@ 0x40
 8007e3a:	d058      	beq.n	8007eee <HAL_TIM_ConfigClockSource+0x13a>
 8007e3c:	2b40      	cmp	r3, #64	@ 0x40
 8007e3e:	d86f      	bhi.n	8007f20 <HAL_TIM_ConfigClockSource+0x16c>
 8007e40:	2b30      	cmp	r3, #48	@ 0x30
 8007e42:	d064      	beq.n	8007f0e <HAL_TIM_ConfigClockSource+0x15a>
 8007e44:	2b30      	cmp	r3, #48	@ 0x30
 8007e46:	d86b      	bhi.n	8007f20 <HAL_TIM_ConfigClockSource+0x16c>
 8007e48:	2b20      	cmp	r3, #32
 8007e4a:	d060      	beq.n	8007f0e <HAL_TIM_ConfigClockSource+0x15a>
 8007e4c:	2b20      	cmp	r3, #32
 8007e4e:	d867      	bhi.n	8007f20 <HAL_TIM_ConfigClockSource+0x16c>
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d05c      	beq.n	8007f0e <HAL_TIM_ConfigClockSource+0x15a>
 8007e54:	2b10      	cmp	r3, #16
 8007e56:	d05a      	beq.n	8007f0e <HAL_TIM_ConfigClockSource+0x15a>
 8007e58:	e062      	b.n	8007f20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e6a:	f000 f9b9 	bl	80081e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007e7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	68ba      	ldr	r2, [r7, #8]
 8007e84:	609a      	str	r2, [r3, #8]
      break;
 8007e86:	e04f      	b.n	8007f28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e98:	f000 f9a2 	bl	80081e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	689a      	ldr	r2, [r3, #8]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007eaa:	609a      	str	r2, [r3, #8]
      break;
 8007eac:	e03c      	b.n	8007f28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007eba:	461a      	mov	r2, r3
 8007ebc:	f000 f916 	bl	80080ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2150      	movs	r1, #80	@ 0x50
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f000 f96f 	bl	80081aa <TIM_ITRx_SetConfig>
      break;
 8007ecc:	e02c      	b.n	8007f28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007eda:	461a      	mov	r2, r3
 8007edc:	f000 f935 	bl	800814a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2160      	movs	r1, #96	@ 0x60
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f000 f95f 	bl	80081aa <TIM_ITRx_SetConfig>
      break;
 8007eec:	e01c      	b.n	8007f28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007efa:	461a      	mov	r2, r3
 8007efc:	f000 f8f6 	bl	80080ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2140      	movs	r1, #64	@ 0x40
 8007f06:	4618      	mov	r0, r3
 8007f08:	f000 f94f 	bl	80081aa <TIM_ITRx_SetConfig>
      break;
 8007f0c:	e00c      	b.n	8007f28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4619      	mov	r1, r3
 8007f18:	4610      	mov	r0, r2
 8007f1a:	f000 f946 	bl	80081aa <TIM_ITRx_SetConfig>
      break;
 8007f1e:	e003      	b.n	8007f28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	73fb      	strb	r3, [r7, #15]
      break;
 8007f24:	e000      	b.n	8007f28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007f26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3710      	adds	r7, #16
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f42:	b480      	push	{r7}
 8007f44:	b083      	sub	sp, #12
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f4a:	bf00      	nop
 8007f4c:	370c      	adds	r7, #12
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr

08007f56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f56:	b480      	push	{r7}
 8007f58:	b083      	sub	sp, #12
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f5e:	bf00      	nop
 8007f60:	370c      	adds	r7, #12
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr

08007f6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	b083      	sub	sp, #12
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f72:	bf00      	nop
 8007f74:	370c      	adds	r7, #12
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr

08007f7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f7e:	b480      	push	{r7}
 8007f80:	b083      	sub	sp, #12
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f86:	bf00      	nop
 8007f88:	370c      	adds	r7, #12
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr
	...

08007f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4a46      	ldr	r2, [pc, #280]	@ (80080c0 <TIM_Base_SetConfig+0x12c>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d013      	beq.n	8007fd4 <TIM_Base_SetConfig+0x40>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fb2:	d00f      	beq.n	8007fd4 <TIM_Base_SetConfig+0x40>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4a43      	ldr	r2, [pc, #268]	@ (80080c4 <TIM_Base_SetConfig+0x130>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d00b      	beq.n	8007fd4 <TIM_Base_SetConfig+0x40>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a42      	ldr	r2, [pc, #264]	@ (80080c8 <TIM_Base_SetConfig+0x134>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d007      	beq.n	8007fd4 <TIM_Base_SetConfig+0x40>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4a41      	ldr	r2, [pc, #260]	@ (80080cc <TIM_Base_SetConfig+0x138>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d003      	beq.n	8007fd4 <TIM_Base_SetConfig+0x40>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4a40      	ldr	r2, [pc, #256]	@ (80080d0 <TIM_Base_SetConfig+0x13c>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d108      	bne.n	8007fe6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a35      	ldr	r2, [pc, #212]	@ (80080c0 <TIM_Base_SetConfig+0x12c>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d02b      	beq.n	8008046 <TIM_Base_SetConfig+0xb2>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ff4:	d027      	beq.n	8008046 <TIM_Base_SetConfig+0xb2>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a32      	ldr	r2, [pc, #200]	@ (80080c4 <TIM_Base_SetConfig+0x130>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d023      	beq.n	8008046 <TIM_Base_SetConfig+0xb2>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a31      	ldr	r2, [pc, #196]	@ (80080c8 <TIM_Base_SetConfig+0x134>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d01f      	beq.n	8008046 <TIM_Base_SetConfig+0xb2>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a30      	ldr	r2, [pc, #192]	@ (80080cc <TIM_Base_SetConfig+0x138>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d01b      	beq.n	8008046 <TIM_Base_SetConfig+0xb2>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a2f      	ldr	r2, [pc, #188]	@ (80080d0 <TIM_Base_SetConfig+0x13c>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d017      	beq.n	8008046 <TIM_Base_SetConfig+0xb2>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a2e      	ldr	r2, [pc, #184]	@ (80080d4 <TIM_Base_SetConfig+0x140>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d013      	beq.n	8008046 <TIM_Base_SetConfig+0xb2>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4a2d      	ldr	r2, [pc, #180]	@ (80080d8 <TIM_Base_SetConfig+0x144>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d00f      	beq.n	8008046 <TIM_Base_SetConfig+0xb2>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a2c      	ldr	r2, [pc, #176]	@ (80080dc <TIM_Base_SetConfig+0x148>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d00b      	beq.n	8008046 <TIM_Base_SetConfig+0xb2>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4a2b      	ldr	r2, [pc, #172]	@ (80080e0 <TIM_Base_SetConfig+0x14c>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d007      	beq.n	8008046 <TIM_Base_SetConfig+0xb2>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	4a2a      	ldr	r2, [pc, #168]	@ (80080e4 <TIM_Base_SetConfig+0x150>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d003      	beq.n	8008046 <TIM_Base_SetConfig+0xb2>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4a29      	ldr	r2, [pc, #164]	@ (80080e8 <TIM_Base_SetConfig+0x154>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d108      	bne.n	8008058 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800804c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	68fa      	ldr	r2, [r7, #12]
 8008054:	4313      	orrs	r3, r2
 8008056:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	695b      	ldr	r3, [r3, #20]
 8008062:	4313      	orrs	r3, r2
 8008064:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	689a      	ldr	r2, [r3, #8]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4a10      	ldr	r2, [pc, #64]	@ (80080c0 <TIM_Base_SetConfig+0x12c>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d003      	beq.n	800808c <TIM_Base_SetConfig+0xf8>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a12      	ldr	r2, [pc, #72]	@ (80080d0 <TIM_Base_SetConfig+0x13c>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d103      	bne.n	8008094 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	691a      	ldr	r2, [r3, #16]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	691b      	ldr	r3, [r3, #16]
 800809e:	f003 0301 	and.w	r3, r3, #1
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d105      	bne.n	80080b2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	f023 0201 	bic.w	r2, r3, #1
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	611a      	str	r2, [r3, #16]
  }
}
 80080b2:	bf00      	nop
 80080b4:	3714      	adds	r7, #20
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	40010000 	.word	0x40010000
 80080c4:	40000400 	.word	0x40000400
 80080c8:	40000800 	.word	0x40000800
 80080cc:	40000c00 	.word	0x40000c00
 80080d0:	40010400 	.word	0x40010400
 80080d4:	40014000 	.word	0x40014000
 80080d8:	40014400 	.word	0x40014400
 80080dc:	40014800 	.word	0x40014800
 80080e0:	40001800 	.word	0x40001800
 80080e4:	40001c00 	.word	0x40001c00
 80080e8:	40002000 	.word	0x40002000

080080ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b087      	sub	sp, #28
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6a1b      	ldr	r3, [r3, #32]
 80080fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6a1b      	ldr	r3, [r3, #32]
 8008102:	f023 0201 	bic.w	r2, r3, #1
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	699b      	ldr	r3, [r3, #24]
 800810e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008116:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	011b      	lsls	r3, r3, #4
 800811c:	693a      	ldr	r2, [r7, #16]
 800811e:	4313      	orrs	r3, r2
 8008120:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	f023 030a 	bic.w	r3, r3, #10
 8008128:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800812a:	697a      	ldr	r2, [r7, #20]
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	4313      	orrs	r3, r2
 8008130:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	693a      	ldr	r2, [r7, #16]
 8008136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	697a      	ldr	r2, [r7, #20]
 800813c:	621a      	str	r2, [r3, #32]
}
 800813e:	bf00      	nop
 8008140:	371c      	adds	r7, #28
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr

0800814a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800814a:	b480      	push	{r7}
 800814c:	b087      	sub	sp, #28
 800814e:	af00      	add	r7, sp, #0
 8008150:	60f8      	str	r0, [r7, #12]
 8008152:	60b9      	str	r1, [r7, #8]
 8008154:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	6a1b      	ldr	r3, [r3, #32]
 800815a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6a1b      	ldr	r3, [r3, #32]
 8008160:	f023 0210 	bic.w	r2, r3, #16
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	699b      	ldr	r3, [r3, #24]
 800816c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008174:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	031b      	lsls	r3, r3, #12
 800817a:	693a      	ldr	r2, [r7, #16]
 800817c:	4313      	orrs	r3, r2
 800817e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008186:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	011b      	lsls	r3, r3, #4
 800818c:	697a      	ldr	r2, [r7, #20]
 800818e:	4313      	orrs	r3, r2
 8008190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	693a      	ldr	r2, [r7, #16]
 8008196:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	697a      	ldr	r2, [r7, #20]
 800819c:	621a      	str	r2, [r3, #32]
}
 800819e:	bf00      	nop
 80081a0:	371c      	adds	r7, #28
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr

080081aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80081aa:	b480      	push	{r7}
 80081ac:	b085      	sub	sp, #20
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
 80081b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80081c2:	683a      	ldr	r2, [r7, #0]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	f043 0307 	orr.w	r3, r3, #7
 80081cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	68fa      	ldr	r2, [r7, #12]
 80081d2:	609a      	str	r2, [r3, #8]
}
 80081d4:	bf00      	nop
 80081d6:	3714      	adds	r7, #20
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b087      	sub	sp, #28
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	607a      	str	r2, [r7, #4]
 80081ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80081fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	021a      	lsls	r2, r3, #8
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	431a      	orrs	r2, r3
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	4313      	orrs	r3, r2
 8008208:	697a      	ldr	r2, [r7, #20]
 800820a:	4313      	orrs	r3, r2
 800820c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	697a      	ldr	r2, [r7, #20]
 8008212:	609a      	str	r2, [r3, #8]
}
 8008214:	bf00      	nop
 8008216:	371c      	adds	r7, #28
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008220:	b480      	push	{r7}
 8008222:	b085      	sub	sp, #20
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008230:	2b01      	cmp	r3, #1
 8008232:	d101      	bne.n	8008238 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008234:	2302      	movs	r3, #2
 8008236:	e05a      	b.n	80082ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2202      	movs	r2, #2
 8008244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800825e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	4313      	orrs	r3, r2
 8008268:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a21      	ldr	r2, [pc, #132]	@ (80082fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d022      	beq.n	80082c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008284:	d01d      	beq.n	80082c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a1d      	ldr	r2, [pc, #116]	@ (8008300 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d018      	beq.n	80082c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a1b      	ldr	r2, [pc, #108]	@ (8008304 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d013      	beq.n	80082c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a1a      	ldr	r2, [pc, #104]	@ (8008308 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d00e      	beq.n	80082c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a18      	ldr	r2, [pc, #96]	@ (800830c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d009      	beq.n	80082c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a17      	ldr	r2, [pc, #92]	@ (8008310 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d004      	beq.n	80082c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a15      	ldr	r2, [pc, #84]	@ (8008314 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d10c      	bne.n	80082dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	68ba      	ldr	r2, [r7, #8]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68ba      	ldr	r2, [r7, #8]
 80082da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3714      	adds	r7, #20
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr
 80082fa:	bf00      	nop
 80082fc:	40010000 	.word	0x40010000
 8008300:	40000400 	.word	0x40000400
 8008304:	40000800 	.word	0x40000800
 8008308:	40000c00 	.word	0x40000c00
 800830c:	40010400 	.word	0x40010400
 8008310:	40014000 	.word	0x40014000
 8008314:	40001800 	.word	0x40001800

08008318 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008320:	bf00      	nop
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008334:	bf00      	nop
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d101      	bne.n	8008352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	e042      	b.n	80083d8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008358:	b2db      	uxtb	r3, r3
 800835a:	2b00      	cmp	r3, #0
 800835c:	d106      	bne.n	800836c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f7f9 fe6a 	bl	8002040 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2224      	movs	r2, #36	@ 0x24
 8008370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	68da      	ldr	r2, [r3, #12]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008382:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f001 f859 	bl	800943c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	691a      	ldr	r2, [r3, #16]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008398:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	695a      	ldr	r2, [r3, #20]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80083a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	68da      	ldr	r2, [r3, #12]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80083b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2220      	movs	r2, #32
 80083c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2220      	movs	r2, #32
 80083cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80083d6:	2300      	movs	r3, #0
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3708      	adds	r7, #8
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b08a      	sub	sp, #40	@ 0x28
 80083e4:	af02      	add	r7, sp, #8
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	603b      	str	r3, [r7, #0]
 80083ec:	4613      	mov	r3, r2
 80083ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80083f0:	2300      	movs	r3, #0
 80083f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	2b20      	cmp	r3, #32
 80083fe:	d175      	bne.n	80084ec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d002      	beq.n	800840c <HAL_UART_Transmit+0x2c>
 8008406:	88fb      	ldrh	r3, [r7, #6]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d101      	bne.n	8008410 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	e06e      	b.n	80084ee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2200      	movs	r2, #0
 8008414:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2221      	movs	r2, #33	@ 0x21
 800841a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800841e:	f7fc faf3 	bl	8004a08 <HAL_GetTick>
 8008422:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	88fa      	ldrh	r2, [r7, #6]
 8008428:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	88fa      	ldrh	r2, [r7, #6]
 800842e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008438:	d108      	bne.n	800844c <HAL_UART_Transmit+0x6c>
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d104      	bne.n	800844c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008442:	2300      	movs	r3, #0
 8008444:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	61bb      	str	r3, [r7, #24]
 800844a:	e003      	b.n	8008454 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008450:	2300      	movs	r3, #0
 8008452:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008454:	e02e      	b.n	80084b4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	9300      	str	r3, [sp, #0]
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	2200      	movs	r2, #0
 800845e:	2180      	movs	r1, #128	@ 0x80
 8008460:	68f8      	ldr	r0, [r7, #12]
 8008462:	f000 fcf7 	bl	8008e54 <UART_WaitOnFlagUntilTimeout>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d005      	beq.n	8008478 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2220      	movs	r2, #32
 8008470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008474:	2303      	movs	r3, #3
 8008476:	e03a      	b.n	80084ee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008478:	69fb      	ldr	r3, [r7, #28]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d10b      	bne.n	8008496 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800847e:	69bb      	ldr	r3, [r7, #24]
 8008480:	881b      	ldrh	r3, [r3, #0]
 8008482:	461a      	mov	r2, r3
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800848c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	3302      	adds	r3, #2
 8008492:	61bb      	str	r3, [r7, #24]
 8008494:	e007      	b.n	80084a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008496:	69fb      	ldr	r3, [r7, #28]
 8008498:	781a      	ldrb	r2, [r3, #0]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80084a0:	69fb      	ldr	r3, [r7, #28]
 80084a2:	3301      	adds	r3, #1
 80084a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	3b01      	subs	r3, #1
 80084ae:	b29a      	uxth	r2, r3
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1cb      	bne.n	8008456 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	9300      	str	r3, [sp, #0]
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	2200      	movs	r2, #0
 80084c6:	2140      	movs	r1, #64	@ 0x40
 80084c8:	68f8      	ldr	r0, [r7, #12]
 80084ca:	f000 fcc3 	bl	8008e54 <UART_WaitOnFlagUntilTimeout>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d005      	beq.n	80084e0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2220      	movs	r2, #32
 80084d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80084dc:	2303      	movs	r3, #3
 80084de:	e006      	b.n	80084ee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2220      	movs	r2, #32
 80084e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80084e8:	2300      	movs	r3, #0
 80084ea:	e000      	b.n	80084ee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80084ec:	2302      	movs	r3, #2
  }
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3720      	adds	r7, #32
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b084      	sub	sp, #16
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	60f8      	str	r0, [r7, #12]
 80084fe:	60b9      	str	r1, [r7, #8]
 8008500:	4613      	mov	r3, r2
 8008502:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800850a:	b2db      	uxtb	r3, r3
 800850c:	2b20      	cmp	r3, #32
 800850e:	d112      	bne.n	8008536 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d002      	beq.n	800851c <HAL_UART_Receive_IT+0x26>
 8008516:	88fb      	ldrh	r3, [r7, #6]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d101      	bne.n	8008520 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800851c:	2301      	movs	r3, #1
 800851e:	e00b      	b.n	8008538 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2200      	movs	r2, #0
 8008524:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008526:	88fb      	ldrh	r3, [r7, #6]
 8008528:	461a      	mov	r2, r3
 800852a:	68b9      	ldr	r1, [r7, #8]
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	f000 fcea 	bl	8008f06 <UART_Start_Receive_IT>
 8008532:	4603      	mov	r3, r0
 8008534:	e000      	b.n	8008538 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008536:	2302      	movs	r3, #2
  }
}
 8008538:	4618      	mov	r0, r3
 800853a:	3710      	adds	r7, #16
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b090      	sub	sp, #64	@ 0x40
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008548:	2300      	movs	r3, #0
 800854a:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	695b      	ldr	r3, [r3, #20]
 8008552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008556:	2b80      	cmp	r3, #128	@ 0x80
 8008558:	bf0c      	ite	eq
 800855a:	2301      	moveq	r3, #1
 800855c:	2300      	movne	r3, #0
 800855e:	b2db      	uxtb	r3, r3
 8008560:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008568:	b2db      	uxtb	r3, r3
 800856a:	2b21      	cmp	r3, #33	@ 0x21
 800856c:	d128      	bne.n	80085c0 <HAL_UART_DMAStop+0x80>
 800856e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008570:	2b00      	cmp	r3, #0
 8008572:	d025      	beq.n	80085c0 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	3314      	adds	r3, #20
 800857a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800857e:	e853 3f00 	ldrex	r3, [r3]
 8008582:	623b      	str	r3, [r7, #32]
   return(result);
 8008584:	6a3b      	ldr	r3, [r7, #32]
 8008586:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800858a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	3314      	adds	r3, #20
 8008592:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008594:	633a      	str	r2, [r7, #48]	@ 0x30
 8008596:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008598:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800859a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800859c:	e841 2300 	strex	r3, r2, [r1]
 80085a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80085a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d1e5      	bne.n	8008574 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d004      	beq.n	80085ba <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7fc fc6f 	bl	8004e98 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 fd78 	bl	80090b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	695b      	ldr	r3, [r3, #20]
 80085c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085ca:	2b40      	cmp	r3, #64	@ 0x40
 80085cc:	bf0c      	ite	eq
 80085ce:	2301      	moveq	r3, #1
 80085d0:	2300      	movne	r3, #0
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	2b22      	cmp	r3, #34	@ 0x22
 80085e0:	d128      	bne.n	8008634 <HAL_UART_DMAStop+0xf4>
 80085e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d025      	beq.n	8008634 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	3314      	adds	r3, #20
 80085ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	e853 3f00 	ldrex	r3, [r3]
 80085f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	3314      	adds	r3, #20
 8008606:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008608:	61fa      	str	r2, [r7, #28]
 800860a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860c:	69b9      	ldr	r1, [r7, #24]
 800860e:	69fa      	ldr	r2, [r7, #28]
 8008610:	e841 2300 	strex	r3, r2, [r1]
 8008614:	617b      	str	r3, [r7, #20]
   return(result);
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d1e5      	bne.n	80085e8 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008620:	2b00      	cmp	r3, #0
 8008622:	d004      	beq.n	800862e <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008628:	4618      	mov	r0, r3
 800862a:	f7fc fc35 	bl	8004e98 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 fd66 	bl	8009100 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	3740      	adds	r7, #64	@ 0x40
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800863e:	b580      	push	{r7, lr}
 8008640:	b08c      	sub	sp, #48	@ 0x30
 8008642:	af00      	add	r7, sp, #0
 8008644:	60f8      	str	r0, [r7, #12]
 8008646:	60b9      	str	r1, [r7, #8]
 8008648:	4613      	mov	r3, r2
 800864a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008652:	b2db      	uxtb	r3, r3
 8008654:	2b20      	cmp	r3, #32
 8008656:	d14a      	bne.n	80086ee <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d002      	beq.n	8008664 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800865e:	88fb      	ldrh	r3, [r7, #6]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d101      	bne.n	8008668 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	e043      	b.n	80086f0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2201      	movs	r2, #1
 800866c:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2200      	movs	r2, #0
 8008672:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008674:	88fb      	ldrh	r3, [r7, #6]
 8008676:	461a      	mov	r2, r3
 8008678:	68b9      	ldr	r1, [r7, #8]
 800867a:	68f8      	ldr	r0, [r7, #12]
 800867c:	f000 fc7e 	bl	8008f7c <UART_Start_Receive_DMA>
 8008680:	4603      	mov	r3, r0
 8008682:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008686:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800868a:	2b00      	cmp	r3, #0
 800868c:	d12c      	bne.n	80086e8 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008692:	2b01      	cmp	r3, #1
 8008694:	d125      	bne.n	80086e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008696:	2300      	movs	r3, #0
 8008698:	613b      	str	r3, [r7, #16]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	613b      	str	r3, [r7, #16]
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	613b      	str	r3, [r7, #16]
 80086aa:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	330c      	adds	r3, #12
 80086b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	e853 3f00 	ldrex	r3, [r3]
 80086ba:	617b      	str	r3, [r7, #20]
   return(result);
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	f043 0310 	orr.w	r3, r3, #16
 80086c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	330c      	adds	r3, #12
 80086ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80086cc:	627a      	str	r2, [r7, #36]	@ 0x24
 80086ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d0:	6a39      	ldr	r1, [r7, #32]
 80086d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086d4:	e841 2300 	strex	r3, r2, [r1]
 80086d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d1e5      	bne.n	80086ac <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80086e0:	e002      	b.n	80086e8 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80086e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80086ec:	e000      	b.n	80086f0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80086ee:	2302      	movs	r3, #2
  }
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3730      	adds	r7, #48	@ 0x30
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b0ba      	sub	sp, #232	@ 0xe8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	695b      	ldr	r3, [r3, #20]
 800871a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800871e:	2300      	movs	r3, #0
 8008720:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008724:	2300      	movs	r3, #0
 8008726:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800872a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800872e:	f003 030f 	and.w	r3, r3, #15
 8008732:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008736:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800873a:	2b00      	cmp	r3, #0
 800873c:	d10f      	bne.n	800875e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800873e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008742:	f003 0320 	and.w	r3, r3, #32
 8008746:	2b00      	cmp	r3, #0
 8008748:	d009      	beq.n	800875e <HAL_UART_IRQHandler+0x66>
 800874a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800874e:	f003 0320 	and.w	r3, r3, #32
 8008752:	2b00      	cmp	r3, #0
 8008754:	d003      	beq.n	800875e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 fdb1 	bl	80092be <UART_Receive_IT>
      return;
 800875c:	e25b      	b.n	8008c16 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800875e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008762:	2b00      	cmp	r3, #0
 8008764:	f000 80de 	beq.w	8008924 <HAL_UART_IRQHandler+0x22c>
 8008768:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800876c:	f003 0301 	and.w	r3, r3, #1
 8008770:	2b00      	cmp	r3, #0
 8008772:	d106      	bne.n	8008782 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008778:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800877c:	2b00      	cmp	r3, #0
 800877e:	f000 80d1 	beq.w	8008924 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008786:	f003 0301 	and.w	r3, r3, #1
 800878a:	2b00      	cmp	r3, #0
 800878c:	d00b      	beq.n	80087a6 <HAL_UART_IRQHandler+0xae>
 800878e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008796:	2b00      	cmp	r3, #0
 8008798:	d005      	beq.n	80087a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800879e:	f043 0201 	orr.w	r2, r3, #1
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80087a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087aa:	f003 0304 	and.w	r3, r3, #4
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d00b      	beq.n	80087ca <HAL_UART_IRQHandler+0xd2>
 80087b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087b6:	f003 0301 	and.w	r3, r3, #1
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d005      	beq.n	80087ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087c2:	f043 0202 	orr.w	r2, r3, #2
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80087ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087ce:	f003 0302 	and.w	r3, r3, #2
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d00b      	beq.n	80087ee <HAL_UART_IRQHandler+0xf6>
 80087d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087da:	f003 0301 	and.w	r3, r3, #1
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d005      	beq.n	80087ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087e6:	f043 0204 	orr.w	r2, r3, #4
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80087ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087f2:	f003 0308 	and.w	r3, r3, #8
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d011      	beq.n	800881e <HAL_UART_IRQHandler+0x126>
 80087fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087fe:	f003 0320 	and.w	r3, r3, #32
 8008802:	2b00      	cmp	r3, #0
 8008804:	d105      	bne.n	8008812 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008806:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800880a:	f003 0301 	and.w	r3, r3, #1
 800880e:	2b00      	cmp	r3, #0
 8008810:	d005      	beq.n	800881e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008816:	f043 0208 	orr.w	r2, r3, #8
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008822:	2b00      	cmp	r3, #0
 8008824:	f000 81f2 	beq.w	8008c0c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800882c:	f003 0320 	and.w	r3, r3, #32
 8008830:	2b00      	cmp	r3, #0
 8008832:	d008      	beq.n	8008846 <HAL_UART_IRQHandler+0x14e>
 8008834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008838:	f003 0320 	and.w	r3, r3, #32
 800883c:	2b00      	cmp	r3, #0
 800883e:	d002      	beq.n	8008846 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 fd3c 	bl	80092be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	695b      	ldr	r3, [r3, #20]
 800884c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008850:	2b40      	cmp	r3, #64	@ 0x40
 8008852:	bf0c      	ite	eq
 8008854:	2301      	moveq	r3, #1
 8008856:	2300      	movne	r3, #0
 8008858:	b2db      	uxtb	r3, r3
 800885a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008862:	f003 0308 	and.w	r3, r3, #8
 8008866:	2b00      	cmp	r3, #0
 8008868:	d103      	bne.n	8008872 <HAL_UART_IRQHandler+0x17a>
 800886a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800886e:	2b00      	cmp	r3, #0
 8008870:	d04f      	beq.n	8008912 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 fc44 	bl	8009100 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	695b      	ldr	r3, [r3, #20]
 800887e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008882:	2b40      	cmp	r3, #64	@ 0x40
 8008884:	d141      	bne.n	800890a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	3314      	adds	r3, #20
 800888c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008890:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008894:	e853 3f00 	ldrex	r3, [r3]
 8008898:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800889c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80088a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	3314      	adds	r3, #20
 80088ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80088b2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80088b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80088be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80088c2:	e841 2300 	strex	r3, r2, [r1]
 80088c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80088ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d1d9      	bne.n	8008886 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d013      	beq.n	8008902 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088de:	4a7e      	ldr	r2, [pc, #504]	@ (8008ad8 <HAL_UART_IRQHandler+0x3e0>)
 80088e0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7fc fb46 	bl	8004f78 <HAL_DMA_Abort_IT>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d016      	beq.n	8008920 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80088fc:	4610      	mov	r0, r2
 80088fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008900:	e00e      	b.n	8008920 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f000 f99e 	bl	8008c44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008908:	e00a      	b.n	8008920 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 f99a 	bl	8008c44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008910:	e006      	b.n	8008920 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 f996 	bl	8008c44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800891e:	e175      	b.n	8008c0c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008920:	bf00      	nop
    return;
 8008922:	e173      	b.n	8008c0c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008928:	2b01      	cmp	r3, #1
 800892a:	f040 814f 	bne.w	8008bcc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800892e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008932:	f003 0310 	and.w	r3, r3, #16
 8008936:	2b00      	cmp	r3, #0
 8008938:	f000 8148 	beq.w	8008bcc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800893c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008940:	f003 0310 	and.w	r3, r3, #16
 8008944:	2b00      	cmp	r3, #0
 8008946:	f000 8141 	beq.w	8008bcc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800894a:	2300      	movs	r3, #0
 800894c:	60bb      	str	r3, [r7, #8]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	60bb      	str	r3, [r7, #8]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	60bb      	str	r3, [r7, #8]
 800895e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	695b      	ldr	r3, [r3, #20]
 8008966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800896a:	2b40      	cmp	r3, #64	@ 0x40
 800896c:	f040 80b6 	bne.w	8008adc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800897c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008980:	2b00      	cmp	r3, #0
 8008982:	f000 8145 	beq.w	8008c10 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800898a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800898e:	429a      	cmp	r2, r3
 8008990:	f080 813e 	bcs.w	8008c10 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800899a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089a0:	69db      	ldr	r3, [r3, #28]
 80089a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089a6:	f000 8088 	beq.w	8008aba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	330c      	adds	r3, #12
 80089b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80089b8:	e853 3f00 	ldrex	r3, [r3]
 80089bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80089c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80089c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80089c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	330c      	adds	r3, #12
 80089d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80089d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80089da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089de:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80089e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80089e6:	e841 2300 	strex	r3, r2, [r1]
 80089ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80089ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d1d9      	bne.n	80089aa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	3314      	adds	r3, #20
 80089fc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a00:	e853 3f00 	ldrex	r3, [r3]
 8008a04:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008a06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008a08:	f023 0301 	bic.w	r3, r3, #1
 8008a0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	3314      	adds	r3, #20
 8008a16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008a1a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008a1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a20:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008a22:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008a26:	e841 2300 	strex	r3, r2, [r1]
 8008a2a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008a2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d1e1      	bne.n	80089f6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	3314      	adds	r3, #20
 8008a38:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008a3c:	e853 3f00 	ldrex	r3, [r3]
 8008a40:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008a42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008a44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	3314      	adds	r3, #20
 8008a52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008a56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008a58:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a5a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008a5c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008a5e:	e841 2300 	strex	r3, r2, [r1]
 8008a62:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008a64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d1e3      	bne.n	8008a32 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2220      	movs	r2, #32
 8008a6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	330c      	adds	r3, #12
 8008a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a82:	e853 3f00 	ldrex	r3, [r3]
 8008a86:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008a88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a8a:	f023 0310 	bic.w	r3, r3, #16
 8008a8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	330c      	adds	r3, #12
 8008a98:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008a9c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008a9e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008aa2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008aa4:	e841 2300 	strex	r3, r2, [r1]
 8008aa8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008aaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d1e3      	bne.n	8008a78 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f7fc f9ef 	bl	8004e98 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2202      	movs	r2, #2
 8008abe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	1ad3      	subs	r3, r2, r3
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	4619      	mov	r1, r3
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f7f8 fb01 	bl	80010d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008ad6:	e09b      	b.n	8008c10 <HAL_UART_IRQHandler+0x518>
 8008ad8:	080091c7 	.word	0x080091c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	1ad3      	subs	r3, r2, r3
 8008ae8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	f000 808e 	beq.w	8008c14 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008af8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	f000 8089 	beq.w	8008c14 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	330c      	adds	r3, #12
 8008b08:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b0c:	e853 3f00 	ldrex	r3, [r3]
 8008b10:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	330c      	adds	r3, #12
 8008b22:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008b26:	647a      	str	r2, [r7, #68]	@ 0x44
 8008b28:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b2a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b2e:	e841 2300 	strex	r3, r2, [r1]
 8008b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d1e3      	bne.n	8008b02 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	3314      	adds	r3, #20
 8008b40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b44:	e853 3f00 	ldrex	r3, [r3]
 8008b48:	623b      	str	r3, [r7, #32]
   return(result);
 8008b4a:	6a3b      	ldr	r3, [r7, #32]
 8008b4c:	f023 0301 	bic.w	r3, r3, #1
 8008b50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	3314      	adds	r3, #20
 8008b5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008b5e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b66:	e841 2300 	strex	r3, r2, [r1]
 8008b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d1e3      	bne.n	8008b3a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2220      	movs	r2, #32
 8008b76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	330c      	adds	r3, #12
 8008b86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	e853 3f00 	ldrex	r3, [r3]
 8008b8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f023 0310 	bic.w	r3, r3, #16
 8008b96:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	330c      	adds	r3, #12
 8008ba0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008ba4:	61fa      	str	r2, [r7, #28]
 8008ba6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba8:	69b9      	ldr	r1, [r7, #24]
 8008baa:	69fa      	ldr	r2, [r7, #28]
 8008bac:	e841 2300 	strex	r3, r2, [r1]
 8008bb0:	617b      	str	r3, [r7, #20]
   return(result);
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d1e3      	bne.n	8008b80 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2202      	movs	r2, #2
 8008bbc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008bbe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f7f8 fa87 	bl	80010d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008bca:	e023      	b.n	8008c14 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d009      	beq.n	8008bec <HAL_UART_IRQHandler+0x4f4>
 8008bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d003      	beq.n	8008bec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 fb02 	bl	80091ee <UART_Transmit_IT>
    return;
 8008bea:	e014      	b.n	8008c16 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d00e      	beq.n	8008c16 <HAL_UART_IRQHandler+0x51e>
 8008bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d008      	beq.n	8008c16 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 fb42 	bl	800928e <UART_EndTransmit_IT>
    return;
 8008c0a:	e004      	b.n	8008c16 <HAL_UART_IRQHandler+0x51e>
    return;
 8008c0c:	bf00      	nop
 8008c0e:	e002      	b.n	8008c16 <HAL_UART_IRQHandler+0x51e>
      return;
 8008c10:	bf00      	nop
 8008c12:	e000      	b.n	8008c16 <HAL_UART_IRQHandler+0x51e>
      return;
 8008c14:	bf00      	nop
  }
}
 8008c16:	37e8      	adds	r7, #232	@ 0xe8
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008c24:	bf00      	nop
 8008c26:	370c      	adds	r7, #12
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b083      	sub	sp, #12
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008c38:	bf00      	nop
 8008c3a:	370c      	adds	r7, #12
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008c4c:	bf00      	nop
 8008c4e:	370c      	adds	r7, #12
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b09c      	sub	sp, #112	@ 0x70
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c64:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d172      	bne.n	8008d5a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008c74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c76:	2200      	movs	r2, #0
 8008c78:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	330c      	adds	r3, #12
 8008c80:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c84:	e853 3f00 	ldrex	r3, [r3]
 8008c88:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008c8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	330c      	adds	r3, #12
 8008c98:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008c9a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008c9c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008ca0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008ca2:	e841 2300 	strex	r3, r2, [r1]
 8008ca6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008ca8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d1e5      	bne.n	8008c7a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	3314      	adds	r3, #20
 8008cb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb8:	e853 3f00 	ldrex	r3, [r3]
 8008cbc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008cbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cc0:	f023 0301 	bic.w	r3, r3, #1
 8008cc4:	667b      	str	r3, [r7, #100]	@ 0x64
 8008cc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	3314      	adds	r3, #20
 8008ccc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008cce:	647a      	str	r2, [r7, #68]	@ 0x44
 8008cd0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008cd4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008cd6:	e841 2300 	strex	r3, r2, [r1]
 8008cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008cdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d1e5      	bne.n	8008cae <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ce2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	3314      	adds	r3, #20
 8008ce8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cec:	e853 3f00 	ldrex	r3, [r3]
 8008cf0:	623b      	str	r3, [r7, #32]
   return(result);
 8008cf2:	6a3b      	ldr	r3, [r7, #32]
 8008cf4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008cf8:	663b      	str	r3, [r7, #96]	@ 0x60
 8008cfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	3314      	adds	r3, #20
 8008d00:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008d02:	633a      	str	r2, [r7, #48]	@ 0x30
 8008d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d0a:	e841 2300 	strex	r3, r2, [r1]
 8008d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1e5      	bne.n	8008ce2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008d16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d18:	2220      	movs	r2, #32
 8008d1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d119      	bne.n	8008d5a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	330c      	adds	r3, #12
 8008d2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	e853 3f00 	ldrex	r3, [r3]
 8008d34:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f023 0310 	bic.w	r3, r3, #16
 8008d3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	330c      	adds	r3, #12
 8008d44:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008d46:	61fa      	str	r2, [r7, #28]
 8008d48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d4a:	69b9      	ldr	r1, [r7, #24]
 8008d4c:	69fa      	ldr	r2, [r7, #28]
 8008d4e:	e841 2300 	strex	r3, r2, [r1]
 8008d52:	617b      	str	r3, [r7, #20]
   return(result);
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d1e5      	bne.n	8008d26 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d106      	bne.n	8008d76 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d6a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008d70:	f7f8 f9b2 	bl	80010d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d74:	e002      	b.n	8008d7c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008d76:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008d78:	f7f8 f934 	bl	8000fe4 <HAL_UART_RxCpltCallback>
}
 8008d7c:	bf00      	nop
 8008d7e:	3770      	adds	r7, #112	@ 0x70
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d90:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2201      	movs	r2, #1
 8008d96:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d108      	bne.n	8008db2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008da4:	085b      	lsrs	r3, r3, #1
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	4619      	mov	r1, r3
 8008daa:	68f8      	ldr	r0, [r7, #12]
 8008dac:	f7f8 f994 	bl	80010d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008db0:	e002      	b.n	8008db8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8008db2:	68f8      	ldr	r0, [r7, #12]
 8008db4:	f7ff ff3c 	bl	8008c30 <HAL_UART_RxHalfCpltCallback>
}
 8008db8:	bf00      	nop
 8008dba:	3710      	adds	r7, #16
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dd0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	695b      	ldr	r3, [r3, #20]
 8008dd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ddc:	2b80      	cmp	r3, #128	@ 0x80
 8008dde:	bf0c      	ite	eq
 8008de0:	2301      	moveq	r3, #1
 8008de2:	2300      	movne	r3, #0
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	2b21      	cmp	r3, #33	@ 0x21
 8008df2:	d108      	bne.n	8008e06 <UART_DMAError+0x46>
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d005      	beq.n	8008e06 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8008e00:	68b8      	ldr	r0, [r7, #8]
 8008e02:	f000 f955 	bl	80090b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	695b      	ldr	r3, [r3, #20]
 8008e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e10:	2b40      	cmp	r3, #64	@ 0x40
 8008e12:	bf0c      	ite	eq
 8008e14:	2301      	moveq	r3, #1
 8008e16:	2300      	movne	r3, #0
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	2b22      	cmp	r3, #34	@ 0x22
 8008e26:	d108      	bne.n	8008e3a <UART_DMAError+0x7a>
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d005      	beq.n	8008e3a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	2200      	movs	r2, #0
 8008e32:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8008e34:	68b8      	ldr	r0, [r7, #8]
 8008e36:	f000 f963 	bl	8009100 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e3e:	f043 0210 	orr.w	r2, r3, #16
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e46:	68b8      	ldr	r0, [r7, #8]
 8008e48:	f7ff fefc 	bl	8008c44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e4c:	bf00      	nop
 8008e4e:	3710      	adds	r7, #16
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b086      	sub	sp, #24
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	603b      	str	r3, [r7, #0]
 8008e60:	4613      	mov	r3, r2
 8008e62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e64:	e03b      	b.n	8008ede <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e66:	6a3b      	ldr	r3, [r7, #32]
 8008e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e6c:	d037      	beq.n	8008ede <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e6e:	f7fb fdcb 	bl	8004a08 <HAL_GetTick>
 8008e72:	4602      	mov	r2, r0
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	1ad3      	subs	r3, r2, r3
 8008e78:	6a3a      	ldr	r2, [r7, #32]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d302      	bcc.n	8008e84 <UART_WaitOnFlagUntilTimeout+0x30>
 8008e7e:	6a3b      	ldr	r3, [r7, #32]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d101      	bne.n	8008e88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008e84:	2303      	movs	r3, #3
 8008e86:	e03a      	b.n	8008efe <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	68db      	ldr	r3, [r3, #12]
 8008e8e:	f003 0304 	and.w	r3, r3, #4
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d023      	beq.n	8008ede <UART_WaitOnFlagUntilTimeout+0x8a>
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	2b80      	cmp	r3, #128	@ 0x80
 8008e9a:	d020      	beq.n	8008ede <UART_WaitOnFlagUntilTimeout+0x8a>
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	2b40      	cmp	r3, #64	@ 0x40
 8008ea0:	d01d      	beq.n	8008ede <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f003 0308 	and.w	r3, r3, #8
 8008eac:	2b08      	cmp	r3, #8
 8008eae:	d116      	bne.n	8008ede <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	617b      	str	r3, [r7, #20]
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	617b      	str	r3, [r7, #20]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	617b      	str	r3, [r7, #20]
 8008ec4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ec6:	68f8      	ldr	r0, [r7, #12]
 8008ec8:	f000 f91a 	bl	8009100 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2208      	movs	r2, #8
 8008ed0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	e00f      	b.n	8008efe <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	4013      	ands	r3, r2
 8008ee8:	68ba      	ldr	r2, [r7, #8]
 8008eea:	429a      	cmp	r2, r3
 8008eec:	bf0c      	ite	eq
 8008eee:	2301      	moveq	r3, #1
 8008ef0:	2300      	movne	r3, #0
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	79fb      	ldrb	r3, [r7, #7]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d0b4      	beq.n	8008e66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008efc:	2300      	movs	r3, #0
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3718      	adds	r7, #24
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}

08008f06 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f06:	b480      	push	{r7}
 8008f08:	b085      	sub	sp, #20
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	60f8      	str	r0, [r7, #12]
 8008f0e:	60b9      	str	r1, [r7, #8]
 8008f10:	4613      	mov	r3, r2
 8008f12:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	68ba      	ldr	r2, [r7, #8]
 8008f18:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	88fa      	ldrh	r2, [r7, #6]
 8008f1e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	88fa      	ldrh	r2, [r7, #6]
 8008f24:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2222      	movs	r2, #34	@ 0x22
 8008f30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	691b      	ldr	r3, [r3, #16]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d007      	beq.n	8008f4c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	68da      	ldr	r2, [r3, #12]
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008f4a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	695a      	ldr	r2, [r3, #20]
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f042 0201 	orr.w	r2, r2, #1
 8008f5a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	68da      	ldr	r2, [r3, #12]
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f042 0220 	orr.w	r2, r2, #32
 8008f6a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3714      	adds	r7, #20
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr
	...

08008f7c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b098      	sub	sp, #96	@ 0x60
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	4613      	mov	r3, r2
 8008f88:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008f8a:	68ba      	ldr	r2, [r7, #8]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	88fa      	ldrh	r2, [r7, #6]
 8008f94:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2222      	movs	r2, #34	@ 0x22
 8008fa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fa8:	4a3e      	ldr	r2, [pc, #248]	@ (80090a4 <UART_Start_Receive_DMA+0x128>)
 8008faa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fb0:	4a3d      	ldr	r2, [pc, #244]	@ (80090a8 <UART_Start_Receive_DMA+0x12c>)
 8008fb2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fb8:	4a3c      	ldr	r2, [pc, #240]	@ (80090ac <UART_Start_Receive_DMA+0x130>)
 8008fba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008fc4:	f107 0308 	add.w	r3, r7, #8
 8008fc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	3304      	adds	r3, #4
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	88fb      	ldrh	r3, [r7, #6]
 8008fdc:	f7fb ff04 	bl	8004de8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	613b      	str	r3, [r7, #16]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	613b      	str	r3, [r7, #16]
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	613b      	str	r3, [r7, #16]
 8008ff4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	691b      	ldr	r3, [r3, #16]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d019      	beq.n	8009032 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	330c      	adds	r3, #12
 8009004:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009006:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009008:	e853 3f00 	ldrex	r3, [r3]
 800900c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800900e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009010:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009014:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	330c      	adds	r3, #12
 800901c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800901e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009020:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009022:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009024:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009026:	e841 2300 	strex	r3, r2, [r1]
 800902a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800902c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800902e:	2b00      	cmp	r3, #0
 8009030:	d1e5      	bne.n	8008ffe <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	3314      	adds	r3, #20
 8009038:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800903a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800903c:	e853 3f00 	ldrex	r3, [r3]
 8009040:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009044:	f043 0301 	orr.w	r3, r3, #1
 8009048:	657b      	str	r3, [r7, #84]	@ 0x54
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	3314      	adds	r3, #20
 8009050:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009052:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009054:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009056:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009058:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800905a:	e841 2300 	strex	r3, r2, [r1]
 800905e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009062:	2b00      	cmp	r3, #0
 8009064:	d1e5      	bne.n	8009032 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	3314      	adds	r3, #20
 800906c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	e853 3f00 	ldrex	r3, [r3]
 8009074:	617b      	str	r3, [r7, #20]
   return(result);
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800907c:	653b      	str	r3, [r7, #80]	@ 0x50
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	3314      	adds	r3, #20
 8009084:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009086:	627a      	str	r2, [r7, #36]	@ 0x24
 8009088:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908a:	6a39      	ldr	r1, [r7, #32]
 800908c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800908e:	e841 2300 	strex	r3, r2, [r1]
 8009092:	61fb      	str	r3, [r7, #28]
   return(result);
 8009094:	69fb      	ldr	r3, [r7, #28]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d1e5      	bne.n	8009066 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800909a:	2300      	movs	r3, #0
}
 800909c:	4618      	mov	r0, r3
 800909e:	3760      	adds	r7, #96	@ 0x60
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	08008c59 	.word	0x08008c59
 80090a8:	08008d85 	.word	0x08008d85
 80090ac:	08008dc1 	.word	0x08008dc1

080090b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b089      	sub	sp, #36	@ 0x24
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	330c      	adds	r3, #12
 80090be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	e853 3f00 	ldrex	r3, [r3]
 80090c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80090ce:	61fb      	str	r3, [r7, #28]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	330c      	adds	r3, #12
 80090d6:	69fa      	ldr	r2, [r7, #28]
 80090d8:	61ba      	str	r2, [r7, #24]
 80090da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090dc:	6979      	ldr	r1, [r7, #20]
 80090de:	69ba      	ldr	r2, [r7, #24]
 80090e0:	e841 2300 	strex	r3, r2, [r1]
 80090e4:	613b      	str	r3, [r7, #16]
   return(result);
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d1e5      	bne.n	80090b8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2220      	movs	r2, #32
 80090f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80090f4:	bf00      	nop
 80090f6:	3724      	adds	r7, #36	@ 0x24
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr

08009100 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009100:	b480      	push	{r7}
 8009102:	b095      	sub	sp, #84	@ 0x54
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	330c      	adds	r3, #12
 800910e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009112:	e853 3f00 	ldrex	r3, [r3]
 8009116:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800911a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800911e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	330c      	adds	r3, #12
 8009126:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009128:	643a      	str	r2, [r7, #64]	@ 0x40
 800912a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800912e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009130:	e841 2300 	strex	r3, r2, [r1]
 8009134:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009138:	2b00      	cmp	r3, #0
 800913a:	d1e5      	bne.n	8009108 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	3314      	adds	r3, #20
 8009142:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009144:	6a3b      	ldr	r3, [r7, #32]
 8009146:	e853 3f00 	ldrex	r3, [r3]
 800914a:	61fb      	str	r3, [r7, #28]
   return(result);
 800914c:	69fb      	ldr	r3, [r7, #28]
 800914e:	f023 0301 	bic.w	r3, r3, #1
 8009152:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	3314      	adds	r3, #20
 800915a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800915c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800915e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009160:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009162:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009164:	e841 2300 	strex	r3, r2, [r1]
 8009168:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800916a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800916c:	2b00      	cmp	r3, #0
 800916e:	d1e5      	bne.n	800913c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009174:	2b01      	cmp	r3, #1
 8009176:	d119      	bne.n	80091ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	330c      	adds	r3, #12
 800917e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	e853 3f00 	ldrex	r3, [r3]
 8009186:	60bb      	str	r3, [r7, #8]
   return(result);
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	f023 0310 	bic.w	r3, r3, #16
 800918e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	330c      	adds	r3, #12
 8009196:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009198:	61ba      	str	r2, [r7, #24]
 800919a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800919c:	6979      	ldr	r1, [r7, #20]
 800919e:	69ba      	ldr	r2, [r7, #24]
 80091a0:	e841 2300 	strex	r3, r2, [r1]
 80091a4:	613b      	str	r3, [r7, #16]
   return(result);
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d1e5      	bne.n	8009178 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2220      	movs	r2, #32
 80091b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80091ba:	bf00      	nop
 80091bc:	3754      	adds	r7, #84	@ 0x54
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr

080091c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80091c6:	b580      	push	{r7, lr}
 80091c8:	b084      	sub	sp, #16
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2200      	movs	r2, #0
 80091d8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2200      	movs	r2, #0
 80091de:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80091e0:	68f8      	ldr	r0, [r7, #12]
 80091e2:	f7ff fd2f 	bl	8008c44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091e6:	bf00      	nop
 80091e8:	3710      	adds	r7, #16
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}

080091ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80091ee:	b480      	push	{r7}
 80091f0:	b085      	sub	sp, #20
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	2b21      	cmp	r3, #33	@ 0x21
 8009200:	d13e      	bne.n	8009280 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800920a:	d114      	bne.n	8009236 <UART_Transmit_IT+0x48>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	691b      	ldr	r3, [r3, #16]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d110      	bne.n	8009236 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6a1b      	ldr	r3, [r3, #32]
 8009218:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	881b      	ldrh	r3, [r3, #0]
 800921e:	461a      	mov	r2, r3
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009228:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6a1b      	ldr	r3, [r3, #32]
 800922e:	1c9a      	adds	r2, r3, #2
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	621a      	str	r2, [r3, #32]
 8009234:	e008      	b.n	8009248 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6a1b      	ldr	r3, [r3, #32]
 800923a:	1c59      	adds	r1, r3, #1
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	6211      	str	r1, [r2, #32]
 8009240:	781a      	ldrb	r2, [r3, #0]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800924c:	b29b      	uxth	r3, r3
 800924e:	3b01      	subs	r3, #1
 8009250:	b29b      	uxth	r3, r3
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	4619      	mov	r1, r3
 8009256:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009258:	2b00      	cmp	r3, #0
 800925a:	d10f      	bne.n	800927c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	68da      	ldr	r2, [r3, #12]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800926a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	68da      	ldr	r2, [r3, #12]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800927a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800927c:	2300      	movs	r3, #0
 800927e:	e000      	b.n	8009282 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009280:	2302      	movs	r3, #2
  }
}
 8009282:	4618      	mov	r0, r3
 8009284:	3714      	adds	r7, #20
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr

0800928e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800928e:	b580      	push	{r7, lr}
 8009290:	b082      	sub	sp, #8
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	68da      	ldr	r2, [r3, #12]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80092a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2220      	movs	r2, #32
 80092aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f7ff fcb4 	bl	8008c1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80092b4:	2300      	movs	r3, #0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3708      	adds	r7, #8
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}

080092be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80092be:	b580      	push	{r7, lr}
 80092c0:	b08c      	sub	sp, #48	@ 0x30
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	2b22      	cmp	r3, #34	@ 0x22
 80092d0:	f040 80ae 	bne.w	8009430 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092dc:	d117      	bne.n	800930e <UART_Receive_IT+0x50>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	691b      	ldr	r3, [r3, #16]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d113      	bne.n	800930e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80092e6:	2300      	movs	r3, #0
 80092e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092fc:	b29a      	uxth	r2, r3
 80092fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009300:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009306:	1c9a      	adds	r2, r3, #2
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	629a      	str	r2, [r3, #40]	@ 0x28
 800930c:	e026      	b.n	800935c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009312:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009314:	2300      	movs	r3, #0
 8009316:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009320:	d007      	beq.n	8009332 <UART_Receive_IT+0x74>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d10a      	bne.n	8009340 <UART_Receive_IT+0x82>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	691b      	ldr	r3, [r3, #16]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d106      	bne.n	8009340 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	b2da      	uxtb	r2, r3
 800933a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800933c:	701a      	strb	r2, [r3, #0]
 800933e:	e008      	b.n	8009352 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	b2db      	uxtb	r3, r3
 8009348:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800934c:	b2da      	uxtb	r2, r3
 800934e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009350:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009356:	1c5a      	adds	r2, r3, #1
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009360:	b29b      	uxth	r3, r3
 8009362:	3b01      	subs	r3, #1
 8009364:	b29b      	uxth	r3, r3
 8009366:	687a      	ldr	r2, [r7, #4]
 8009368:	4619      	mov	r1, r3
 800936a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800936c:	2b00      	cmp	r3, #0
 800936e:	d15d      	bne.n	800942c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	68da      	ldr	r2, [r3, #12]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f022 0220 	bic.w	r2, r2, #32
 800937e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	68da      	ldr	r2, [r3, #12]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800938e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	695a      	ldr	r2, [r3, #20]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f022 0201 	bic.w	r2, r2, #1
 800939e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2220      	movs	r2, #32
 80093a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d135      	bne.n	8009422 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2200      	movs	r2, #0
 80093ba:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	330c      	adds	r3, #12
 80093c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	e853 3f00 	ldrex	r3, [r3]
 80093ca:	613b      	str	r3, [r7, #16]
   return(result);
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	f023 0310 	bic.w	r3, r3, #16
 80093d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	330c      	adds	r3, #12
 80093da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093dc:	623a      	str	r2, [r7, #32]
 80093de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e0:	69f9      	ldr	r1, [r7, #28]
 80093e2:	6a3a      	ldr	r2, [r7, #32]
 80093e4:	e841 2300 	strex	r3, r2, [r1]
 80093e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d1e5      	bne.n	80093bc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f003 0310 	and.w	r3, r3, #16
 80093fa:	2b10      	cmp	r3, #16
 80093fc:	d10a      	bne.n	8009414 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80093fe:	2300      	movs	r3, #0
 8009400:	60fb      	str	r3, [r7, #12]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	60fb      	str	r3, [r7, #12]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	60fb      	str	r3, [r7, #12]
 8009412:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009418:	4619      	mov	r1, r3
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f7f7 fe5c 	bl	80010d8 <HAL_UARTEx_RxEventCallback>
 8009420:	e002      	b.n	8009428 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f7f7 fdde 	bl	8000fe4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009428:	2300      	movs	r3, #0
 800942a:	e002      	b.n	8009432 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800942c:	2300      	movs	r3, #0
 800942e:	e000      	b.n	8009432 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009430:	2302      	movs	r3, #2
  }
}
 8009432:	4618      	mov	r0, r3
 8009434:	3730      	adds	r7, #48	@ 0x30
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
	...

0800943c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800943c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009440:	b0c0      	sub	sp, #256	@ 0x100
 8009442:	af00      	add	r7, sp, #0
 8009444:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	691b      	ldr	r3, [r3, #16]
 8009450:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009458:	68d9      	ldr	r1, [r3, #12]
 800945a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	ea40 0301 	orr.w	r3, r0, r1
 8009464:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800946a:	689a      	ldr	r2, [r3, #8]
 800946c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009470:	691b      	ldr	r3, [r3, #16]
 8009472:	431a      	orrs	r2, r3
 8009474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009478:	695b      	ldr	r3, [r3, #20]
 800947a:	431a      	orrs	r2, r3
 800947c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009480:	69db      	ldr	r3, [r3, #28]
 8009482:	4313      	orrs	r3, r2
 8009484:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009494:	f021 010c 	bic.w	r1, r1, #12
 8009498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800949c:	681a      	ldr	r2, [r3, #0]
 800949e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80094a2:	430b      	orrs	r3, r1
 80094a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80094a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	695b      	ldr	r3, [r3, #20]
 80094ae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80094b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094b6:	6999      	ldr	r1, [r3, #24]
 80094b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	ea40 0301 	orr.w	r3, r0, r1
 80094c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80094c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	4b8f      	ldr	r3, [pc, #572]	@ (8009708 <UART_SetConfig+0x2cc>)
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d005      	beq.n	80094dc <UART_SetConfig+0xa0>
 80094d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	4b8d      	ldr	r3, [pc, #564]	@ (800970c <UART_SetConfig+0x2d0>)
 80094d8:	429a      	cmp	r2, r3
 80094da:	d104      	bne.n	80094e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80094dc:	f7fe faa6 	bl	8007a2c <HAL_RCC_GetPCLK2Freq>
 80094e0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80094e4:	e003      	b.n	80094ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80094e6:	f7fe fa8d 	bl	8007a04 <HAL_RCC_GetPCLK1Freq>
 80094ea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80094ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094f2:	69db      	ldr	r3, [r3, #28]
 80094f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80094f8:	f040 810c 	bne.w	8009714 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80094fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009500:	2200      	movs	r2, #0
 8009502:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009506:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800950a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800950e:	4622      	mov	r2, r4
 8009510:	462b      	mov	r3, r5
 8009512:	1891      	adds	r1, r2, r2
 8009514:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009516:	415b      	adcs	r3, r3
 8009518:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800951a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800951e:	4621      	mov	r1, r4
 8009520:	eb12 0801 	adds.w	r8, r2, r1
 8009524:	4629      	mov	r1, r5
 8009526:	eb43 0901 	adc.w	r9, r3, r1
 800952a:	f04f 0200 	mov.w	r2, #0
 800952e:	f04f 0300 	mov.w	r3, #0
 8009532:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009536:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800953a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800953e:	4690      	mov	r8, r2
 8009540:	4699      	mov	r9, r3
 8009542:	4623      	mov	r3, r4
 8009544:	eb18 0303 	adds.w	r3, r8, r3
 8009548:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800954c:	462b      	mov	r3, r5
 800954e:	eb49 0303 	adc.w	r3, r9, r3
 8009552:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009562:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009566:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800956a:	460b      	mov	r3, r1
 800956c:	18db      	adds	r3, r3, r3
 800956e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009570:	4613      	mov	r3, r2
 8009572:	eb42 0303 	adc.w	r3, r2, r3
 8009576:	657b      	str	r3, [r7, #84]	@ 0x54
 8009578:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800957c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009580:	f7f7 fb82 	bl	8000c88 <__aeabi_uldivmod>
 8009584:	4602      	mov	r2, r0
 8009586:	460b      	mov	r3, r1
 8009588:	4b61      	ldr	r3, [pc, #388]	@ (8009710 <UART_SetConfig+0x2d4>)
 800958a:	fba3 2302 	umull	r2, r3, r3, r2
 800958e:	095b      	lsrs	r3, r3, #5
 8009590:	011c      	lsls	r4, r3, #4
 8009592:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009596:	2200      	movs	r2, #0
 8009598:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800959c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80095a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80095a4:	4642      	mov	r2, r8
 80095a6:	464b      	mov	r3, r9
 80095a8:	1891      	adds	r1, r2, r2
 80095aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80095ac:	415b      	adcs	r3, r3
 80095ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80095b4:	4641      	mov	r1, r8
 80095b6:	eb12 0a01 	adds.w	sl, r2, r1
 80095ba:	4649      	mov	r1, r9
 80095bc:	eb43 0b01 	adc.w	fp, r3, r1
 80095c0:	f04f 0200 	mov.w	r2, #0
 80095c4:	f04f 0300 	mov.w	r3, #0
 80095c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80095cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80095d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80095d4:	4692      	mov	sl, r2
 80095d6:	469b      	mov	fp, r3
 80095d8:	4643      	mov	r3, r8
 80095da:	eb1a 0303 	adds.w	r3, sl, r3
 80095de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80095e2:	464b      	mov	r3, r9
 80095e4:	eb4b 0303 	adc.w	r3, fp, r3
 80095e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80095ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	2200      	movs	r2, #0
 80095f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80095f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80095fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009600:	460b      	mov	r3, r1
 8009602:	18db      	adds	r3, r3, r3
 8009604:	643b      	str	r3, [r7, #64]	@ 0x40
 8009606:	4613      	mov	r3, r2
 8009608:	eb42 0303 	adc.w	r3, r2, r3
 800960c:	647b      	str	r3, [r7, #68]	@ 0x44
 800960e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009612:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009616:	f7f7 fb37 	bl	8000c88 <__aeabi_uldivmod>
 800961a:	4602      	mov	r2, r0
 800961c:	460b      	mov	r3, r1
 800961e:	4611      	mov	r1, r2
 8009620:	4b3b      	ldr	r3, [pc, #236]	@ (8009710 <UART_SetConfig+0x2d4>)
 8009622:	fba3 2301 	umull	r2, r3, r3, r1
 8009626:	095b      	lsrs	r3, r3, #5
 8009628:	2264      	movs	r2, #100	@ 0x64
 800962a:	fb02 f303 	mul.w	r3, r2, r3
 800962e:	1acb      	subs	r3, r1, r3
 8009630:	00db      	lsls	r3, r3, #3
 8009632:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009636:	4b36      	ldr	r3, [pc, #216]	@ (8009710 <UART_SetConfig+0x2d4>)
 8009638:	fba3 2302 	umull	r2, r3, r3, r2
 800963c:	095b      	lsrs	r3, r3, #5
 800963e:	005b      	lsls	r3, r3, #1
 8009640:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009644:	441c      	add	r4, r3
 8009646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800964a:	2200      	movs	r2, #0
 800964c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009650:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009654:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009658:	4642      	mov	r2, r8
 800965a:	464b      	mov	r3, r9
 800965c:	1891      	adds	r1, r2, r2
 800965e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009660:	415b      	adcs	r3, r3
 8009662:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009664:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009668:	4641      	mov	r1, r8
 800966a:	1851      	adds	r1, r2, r1
 800966c:	6339      	str	r1, [r7, #48]	@ 0x30
 800966e:	4649      	mov	r1, r9
 8009670:	414b      	adcs	r3, r1
 8009672:	637b      	str	r3, [r7, #52]	@ 0x34
 8009674:	f04f 0200 	mov.w	r2, #0
 8009678:	f04f 0300 	mov.w	r3, #0
 800967c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009680:	4659      	mov	r1, fp
 8009682:	00cb      	lsls	r3, r1, #3
 8009684:	4651      	mov	r1, sl
 8009686:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800968a:	4651      	mov	r1, sl
 800968c:	00ca      	lsls	r2, r1, #3
 800968e:	4610      	mov	r0, r2
 8009690:	4619      	mov	r1, r3
 8009692:	4603      	mov	r3, r0
 8009694:	4642      	mov	r2, r8
 8009696:	189b      	adds	r3, r3, r2
 8009698:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800969c:	464b      	mov	r3, r9
 800969e:	460a      	mov	r2, r1
 80096a0:	eb42 0303 	adc.w	r3, r2, r3
 80096a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80096a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80096b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80096b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80096bc:	460b      	mov	r3, r1
 80096be:	18db      	adds	r3, r3, r3
 80096c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80096c2:	4613      	mov	r3, r2
 80096c4:	eb42 0303 	adc.w	r3, r2, r3
 80096c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80096ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80096ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80096d2:	f7f7 fad9 	bl	8000c88 <__aeabi_uldivmod>
 80096d6:	4602      	mov	r2, r0
 80096d8:	460b      	mov	r3, r1
 80096da:	4b0d      	ldr	r3, [pc, #52]	@ (8009710 <UART_SetConfig+0x2d4>)
 80096dc:	fba3 1302 	umull	r1, r3, r3, r2
 80096e0:	095b      	lsrs	r3, r3, #5
 80096e2:	2164      	movs	r1, #100	@ 0x64
 80096e4:	fb01 f303 	mul.w	r3, r1, r3
 80096e8:	1ad3      	subs	r3, r2, r3
 80096ea:	00db      	lsls	r3, r3, #3
 80096ec:	3332      	adds	r3, #50	@ 0x32
 80096ee:	4a08      	ldr	r2, [pc, #32]	@ (8009710 <UART_SetConfig+0x2d4>)
 80096f0:	fba2 2303 	umull	r2, r3, r2, r3
 80096f4:	095b      	lsrs	r3, r3, #5
 80096f6:	f003 0207 	and.w	r2, r3, #7
 80096fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4422      	add	r2, r4
 8009702:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009704:	e106      	b.n	8009914 <UART_SetConfig+0x4d8>
 8009706:	bf00      	nop
 8009708:	40011000 	.word	0x40011000
 800970c:	40011400 	.word	0x40011400
 8009710:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009714:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009718:	2200      	movs	r2, #0
 800971a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800971e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009722:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009726:	4642      	mov	r2, r8
 8009728:	464b      	mov	r3, r9
 800972a:	1891      	adds	r1, r2, r2
 800972c:	6239      	str	r1, [r7, #32]
 800972e:	415b      	adcs	r3, r3
 8009730:	627b      	str	r3, [r7, #36]	@ 0x24
 8009732:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009736:	4641      	mov	r1, r8
 8009738:	1854      	adds	r4, r2, r1
 800973a:	4649      	mov	r1, r9
 800973c:	eb43 0501 	adc.w	r5, r3, r1
 8009740:	f04f 0200 	mov.w	r2, #0
 8009744:	f04f 0300 	mov.w	r3, #0
 8009748:	00eb      	lsls	r3, r5, #3
 800974a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800974e:	00e2      	lsls	r2, r4, #3
 8009750:	4614      	mov	r4, r2
 8009752:	461d      	mov	r5, r3
 8009754:	4643      	mov	r3, r8
 8009756:	18e3      	adds	r3, r4, r3
 8009758:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800975c:	464b      	mov	r3, r9
 800975e:	eb45 0303 	adc.w	r3, r5, r3
 8009762:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009772:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009776:	f04f 0200 	mov.w	r2, #0
 800977a:	f04f 0300 	mov.w	r3, #0
 800977e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009782:	4629      	mov	r1, r5
 8009784:	008b      	lsls	r3, r1, #2
 8009786:	4621      	mov	r1, r4
 8009788:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800978c:	4621      	mov	r1, r4
 800978e:	008a      	lsls	r2, r1, #2
 8009790:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009794:	f7f7 fa78 	bl	8000c88 <__aeabi_uldivmod>
 8009798:	4602      	mov	r2, r0
 800979a:	460b      	mov	r3, r1
 800979c:	4b60      	ldr	r3, [pc, #384]	@ (8009920 <UART_SetConfig+0x4e4>)
 800979e:	fba3 2302 	umull	r2, r3, r3, r2
 80097a2:	095b      	lsrs	r3, r3, #5
 80097a4:	011c      	lsls	r4, r3, #4
 80097a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80097aa:	2200      	movs	r2, #0
 80097ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80097b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80097b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80097b8:	4642      	mov	r2, r8
 80097ba:	464b      	mov	r3, r9
 80097bc:	1891      	adds	r1, r2, r2
 80097be:	61b9      	str	r1, [r7, #24]
 80097c0:	415b      	adcs	r3, r3
 80097c2:	61fb      	str	r3, [r7, #28]
 80097c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80097c8:	4641      	mov	r1, r8
 80097ca:	1851      	adds	r1, r2, r1
 80097cc:	6139      	str	r1, [r7, #16]
 80097ce:	4649      	mov	r1, r9
 80097d0:	414b      	adcs	r3, r1
 80097d2:	617b      	str	r3, [r7, #20]
 80097d4:	f04f 0200 	mov.w	r2, #0
 80097d8:	f04f 0300 	mov.w	r3, #0
 80097dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80097e0:	4659      	mov	r1, fp
 80097e2:	00cb      	lsls	r3, r1, #3
 80097e4:	4651      	mov	r1, sl
 80097e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80097ea:	4651      	mov	r1, sl
 80097ec:	00ca      	lsls	r2, r1, #3
 80097ee:	4610      	mov	r0, r2
 80097f0:	4619      	mov	r1, r3
 80097f2:	4603      	mov	r3, r0
 80097f4:	4642      	mov	r2, r8
 80097f6:	189b      	adds	r3, r3, r2
 80097f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80097fc:	464b      	mov	r3, r9
 80097fe:	460a      	mov	r2, r1
 8009800:	eb42 0303 	adc.w	r3, r2, r3
 8009804:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009812:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009814:	f04f 0200 	mov.w	r2, #0
 8009818:	f04f 0300 	mov.w	r3, #0
 800981c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009820:	4649      	mov	r1, r9
 8009822:	008b      	lsls	r3, r1, #2
 8009824:	4641      	mov	r1, r8
 8009826:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800982a:	4641      	mov	r1, r8
 800982c:	008a      	lsls	r2, r1, #2
 800982e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009832:	f7f7 fa29 	bl	8000c88 <__aeabi_uldivmod>
 8009836:	4602      	mov	r2, r0
 8009838:	460b      	mov	r3, r1
 800983a:	4611      	mov	r1, r2
 800983c:	4b38      	ldr	r3, [pc, #224]	@ (8009920 <UART_SetConfig+0x4e4>)
 800983e:	fba3 2301 	umull	r2, r3, r3, r1
 8009842:	095b      	lsrs	r3, r3, #5
 8009844:	2264      	movs	r2, #100	@ 0x64
 8009846:	fb02 f303 	mul.w	r3, r2, r3
 800984a:	1acb      	subs	r3, r1, r3
 800984c:	011b      	lsls	r3, r3, #4
 800984e:	3332      	adds	r3, #50	@ 0x32
 8009850:	4a33      	ldr	r2, [pc, #204]	@ (8009920 <UART_SetConfig+0x4e4>)
 8009852:	fba2 2303 	umull	r2, r3, r2, r3
 8009856:	095b      	lsrs	r3, r3, #5
 8009858:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800985c:	441c      	add	r4, r3
 800985e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009862:	2200      	movs	r2, #0
 8009864:	673b      	str	r3, [r7, #112]	@ 0x70
 8009866:	677a      	str	r2, [r7, #116]	@ 0x74
 8009868:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800986c:	4642      	mov	r2, r8
 800986e:	464b      	mov	r3, r9
 8009870:	1891      	adds	r1, r2, r2
 8009872:	60b9      	str	r1, [r7, #8]
 8009874:	415b      	adcs	r3, r3
 8009876:	60fb      	str	r3, [r7, #12]
 8009878:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800987c:	4641      	mov	r1, r8
 800987e:	1851      	adds	r1, r2, r1
 8009880:	6039      	str	r1, [r7, #0]
 8009882:	4649      	mov	r1, r9
 8009884:	414b      	adcs	r3, r1
 8009886:	607b      	str	r3, [r7, #4]
 8009888:	f04f 0200 	mov.w	r2, #0
 800988c:	f04f 0300 	mov.w	r3, #0
 8009890:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009894:	4659      	mov	r1, fp
 8009896:	00cb      	lsls	r3, r1, #3
 8009898:	4651      	mov	r1, sl
 800989a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800989e:	4651      	mov	r1, sl
 80098a0:	00ca      	lsls	r2, r1, #3
 80098a2:	4610      	mov	r0, r2
 80098a4:	4619      	mov	r1, r3
 80098a6:	4603      	mov	r3, r0
 80098a8:	4642      	mov	r2, r8
 80098aa:	189b      	adds	r3, r3, r2
 80098ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80098ae:	464b      	mov	r3, r9
 80098b0:	460a      	mov	r2, r1
 80098b2:	eb42 0303 	adc.w	r3, r2, r3
 80098b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80098b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098bc:	685b      	ldr	r3, [r3, #4]
 80098be:	2200      	movs	r2, #0
 80098c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80098c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80098c4:	f04f 0200 	mov.w	r2, #0
 80098c8:	f04f 0300 	mov.w	r3, #0
 80098cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80098d0:	4649      	mov	r1, r9
 80098d2:	008b      	lsls	r3, r1, #2
 80098d4:	4641      	mov	r1, r8
 80098d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80098da:	4641      	mov	r1, r8
 80098dc:	008a      	lsls	r2, r1, #2
 80098de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80098e2:	f7f7 f9d1 	bl	8000c88 <__aeabi_uldivmod>
 80098e6:	4602      	mov	r2, r0
 80098e8:	460b      	mov	r3, r1
 80098ea:	4b0d      	ldr	r3, [pc, #52]	@ (8009920 <UART_SetConfig+0x4e4>)
 80098ec:	fba3 1302 	umull	r1, r3, r3, r2
 80098f0:	095b      	lsrs	r3, r3, #5
 80098f2:	2164      	movs	r1, #100	@ 0x64
 80098f4:	fb01 f303 	mul.w	r3, r1, r3
 80098f8:	1ad3      	subs	r3, r2, r3
 80098fa:	011b      	lsls	r3, r3, #4
 80098fc:	3332      	adds	r3, #50	@ 0x32
 80098fe:	4a08      	ldr	r2, [pc, #32]	@ (8009920 <UART_SetConfig+0x4e4>)
 8009900:	fba2 2303 	umull	r2, r3, r2, r3
 8009904:	095b      	lsrs	r3, r3, #5
 8009906:	f003 020f 	and.w	r2, r3, #15
 800990a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4422      	add	r2, r4
 8009912:	609a      	str	r2, [r3, #8]
}
 8009914:	bf00      	nop
 8009916:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800991a:	46bd      	mov	sp, r7
 800991c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009920:	51eb851f 	.word	0x51eb851f

08009924 <__cvt>:
 8009924:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009928:	ec57 6b10 	vmov	r6, r7, d0
 800992c:	2f00      	cmp	r7, #0
 800992e:	460c      	mov	r4, r1
 8009930:	4619      	mov	r1, r3
 8009932:	463b      	mov	r3, r7
 8009934:	bfbb      	ittet	lt
 8009936:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800993a:	461f      	movlt	r7, r3
 800993c:	2300      	movge	r3, #0
 800993e:	232d      	movlt	r3, #45	@ 0x2d
 8009940:	700b      	strb	r3, [r1, #0]
 8009942:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009944:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009948:	4691      	mov	r9, r2
 800994a:	f023 0820 	bic.w	r8, r3, #32
 800994e:	bfbc      	itt	lt
 8009950:	4632      	movlt	r2, r6
 8009952:	4616      	movlt	r6, r2
 8009954:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009958:	d005      	beq.n	8009966 <__cvt+0x42>
 800995a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800995e:	d100      	bne.n	8009962 <__cvt+0x3e>
 8009960:	3401      	adds	r4, #1
 8009962:	2102      	movs	r1, #2
 8009964:	e000      	b.n	8009968 <__cvt+0x44>
 8009966:	2103      	movs	r1, #3
 8009968:	ab03      	add	r3, sp, #12
 800996a:	9301      	str	r3, [sp, #4]
 800996c:	ab02      	add	r3, sp, #8
 800996e:	9300      	str	r3, [sp, #0]
 8009970:	ec47 6b10 	vmov	d0, r6, r7
 8009974:	4653      	mov	r3, sl
 8009976:	4622      	mov	r2, r4
 8009978:	f001 f8ba 	bl	800aaf0 <_dtoa_r>
 800997c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009980:	4605      	mov	r5, r0
 8009982:	d119      	bne.n	80099b8 <__cvt+0x94>
 8009984:	f019 0f01 	tst.w	r9, #1
 8009988:	d00e      	beq.n	80099a8 <__cvt+0x84>
 800998a:	eb00 0904 	add.w	r9, r0, r4
 800998e:	2200      	movs	r2, #0
 8009990:	2300      	movs	r3, #0
 8009992:	4630      	mov	r0, r6
 8009994:	4639      	mov	r1, r7
 8009996:	f7f7 f897 	bl	8000ac8 <__aeabi_dcmpeq>
 800999a:	b108      	cbz	r0, 80099a0 <__cvt+0x7c>
 800999c:	f8cd 900c 	str.w	r9, [sp, #12]
 80099a0:	2230      	movs	r2, #48	@ 0x30
 80099a2:	9b03      	ldr	r3, [sp, #12]
 80099a4:	454b      	cmp	r3, r9
 80099a6:	d31e      	bcc.n	80099e6 <__cvt+0xc2>
 80099a8:	9b03      	ldr	r3, [sp, #12]
 80099aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80099ac:	1b5b      	subs	r3, r3, r5
 80099ae:	4628      	mov	r0, r5
 80099b0:	6013      	str	r3, [r2, #0]
 80099b2:	b004      	add	sp, #16
 80099b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80099bc:	eb00 0904 	add.w	r9, r0, r4
 80099c0:	d1e5      	bne.n	800998e <__cvt+0x6a>
 80099c2:	7803      	ldrb	r3, [r0, #0]
 80099c4:	2b30      	cmp	r3, #48	@ 0x30
 80099c6:	d10a      	bne.n	80099de <__cvt+0xba>
 80099c8:	2200      	movs	r2, #0
 80099ca:	2300      	movs	r3, #0
 80099cc:	4630      	mov	r0, r6
 80099ce:	4639      	mov	r1, r7
 80099d0:	f7f7 f87a 	bl	8000ac8 <__aeabi_dcmpeq>
 80099d4:	b918      	cbnz	r0, 80099de <__cvt+0xba>
 80099d6:	f1c4 0401 	rsb	r4, r4, #1
 80099da:	f8ca 4000 	str.w	r4, [sl]
 80099de:	f8da 3000 	ldr.w	r3, [sl]
 80099e2:	4499      	add	r9, r3
 80099e4:	e7d3      	b.n	800998e <__cvt+0x6a>
 80099e6:	1c59      	adds	r1, r3, #1
 80099e8:	9103      	str	r1, [sp, #12]
 80099ea:	701a      	strb	r2, [r3, #0]
 80099ec:	e7d9      	b.n	80099a2 <__cvt+0x7e>

080099ee <__exponent>:
 80099ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099f0:	2900      	cmp	r1, #0
 80099f2:	bfba      	itte	lt
 80099f4:	4249      	neglt	r1, r1
 80099f6:	232d      	movlt	r3, #45	@ 0x2d
 80099f8:	232b      	movge	r3, #43	@ 0x2b
 80099fa:	2909      	cmp	r1, #9
 80099fc:	7002      	strb	r2, [r0, #0]
 80099fe:	7043      	strb	r3, [r0, #1]
 8009a00:	dd29      	ble.n	8009a56 <__exponent+0x68>
 8009a02:	f10d 0307 	add.w	r3, sp, #7
 8009a06:	461d      	mov	r5, r3
 8009a08:	270a      	movs	r7, #10
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	fbb1 f6f7 	udiv	r6, r1, r7
 8009a10:	fb07 1416 	mls	r4, r7, r6, r1
 8009a14:	3430      	adds	r4, #48	@ 0x30
 8009a16:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009a1a:	460c      	mov	r4, r1
 8009a1c:	2c63      	cmp	r4, #99	@ 0x63
 8009a1e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009a22:	4631      	mov	r1, r6
 8009a24:	dcf1      	bgt.n	8009a0a <__exponent+0x1c>
 8009a26:	3130      	adds	r1, #48	@ 0x30
 8009a28:	1e94      	subs	r4, r2, #2
 8009a2a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009a2e:	1c41      	adds	r1, r0, #1
 8009a30:	4623      	mov	r3, r4
 8009a32:	42ab      	cmp	r3, r5
 8009a34:	d30a      	bcc.n	8009a4c <__exponent+0x5e>
 8009a36:	f10d 0309 	add.w	r3, sp, #9
 8009a3a:	1a9b      	subs	r3, r3, r2
 8009a3c:	42ac      	cmp	r4, r5
 8009a3e:	bf88      	it	hi
 8009a40:	2300      	movhi	r3, #0
 8009a42:	3302      	adds	r3, #2
 8009a44:	4403      	add	r3, r0
 8009a46:	1a18      	subs	r0, r3, r0
 8009a48:	b003      	add	sp, #12
 8009a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a4c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009a50:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009a54:	e7ed      	b.n	8009a32 <__exponent+0x44>
 8009a56:	2330      	movs	r3, #48	@ 0x30
 8009a58:	3130      	adds	r1, #48	@ 0x30
 8009a5a:	7083      	strb	r3, [r0, #2]
 8009a5c:	70c1      	strb	r1, [r0, #3]
 8009a5e:	1d03      	adds	r3, r0, #4
 8009a60:	e7f1      	b.n	8009a46 <__exponent+0x58>
	...

08009a64 <_printf_float>:
 8009a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a68:	b08d      	sub	sp, #52	@ 0x34
 8009a6a:	460c      	mov	r4, r1
 8009a6c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009a70:	4616      	mov	r6, r2
 8009a72:	461f      	mov	r7, r3
 8009a74:	4605      	mov	r5, r0
 8009a76:	f000 ff2d 	bl	800a8d4 <_localeconv_r>
 8009a7a:	6803      	ldr	r3, [r0, #0]
 8009a7c:	9304      	str	r3, [sp, #16]
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f7f6 fbf6 	bl	8000270 <strlen>
 8009a84:	2300      	movs	r3, #0
 8009a86:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a88:	f8d8 3000 	ldr.w	r3, [r8]
 8009a8c:	9005      	str	r0, [sp, #20]
 8009a8e:	3307      	adds	r3, #7
 8009a90:	f023 0307 	bic.w	r3, r3, #7
 8009a94:	f103 0208 	add.w	r2, r3, #8
 8009a98:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009a9c:	f8d4 b000 	ldr.w	fp, [r4]
 8009aa0:	f8c8 2000 	str.w	r2, [r8]
 8009aa4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009aa8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009aac:	9307      	str	r3, [sp, #28]
 8009aae:	f8cd 8018 	str.w	r8, [sp, #24]
 8009ab2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009ab6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009aba:	4b9c      	ldr	r3, [pc, #624]	@ (8009d2c <_printf_float+0x2c8>)
 8009abc:	f04f 32ff 	mov.w	r2, #4294967295
 8009ac0:	f7f7 f834 	bl	8000b2c <__aeabi_dcmpun>
 8009ac4:	bb70      	cbnz	r0, 8009b24 <_printf_float+0xc0>
 8009ac6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009aca:	4b98      	ldr	r3, [pc, #608]	@ (8009d2c <_printf_float+0x2c8>)
 8009acc:	f04f 32ff 	mov.w	r2, #4294967295
 8009ad0:	f7f7 f80e 	bl	8000af0 <__aeabi_dcmple>
 8009ad4:	bb30      	cbnz	r0, 8009b24 <_printf_float+0xc0>
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	2300      	movs	r3, #0
 8009ada:	4640      	mov	r0, r8
 8009adc:	4649      	mov	r1, r9
 8009ade:	f7f6 fffd 	bl	8000adc <__aeabi_dcmplt>
 8009ae2:	b110      	cbz	r0, 8009aea <_printf_float+0x86>
 8009ae4:	232d      	movs	r3, #45	@ 0x2d
 8009ae6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009aea:	4a91      	ldr	r2, [pc, #580]	@ (8009d30 <_printf_float+0x2cc>)
 8009aec:	4b91      	ldr	r3, [pc, #580]	@ (8009d34 <_printf_float+0x2d0>)
 8009aee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009af2:	bf94      	ite	ls
 8009af4:	4690      	movls	r8, r2
 8009af6:	4698      	movhi	r8, r3
 8009af8:	2303      	movs	r3, #3
 8009afa:	6123      	str	r3, [r4, #16]
 8009afc:	f02b 0304 	bic.w	r3, fp, #4
 8009b00:	6023      	str	r3, [r4, #0]
 8009b02:	f04f 0900 	mov.w	r9, #0
 8009b06:	9700      	str	r7, [sp, #0]
 8009b08:	4633      	mov	r3, r6
 8009b0a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009b0c:	4621      	mov	r1, r4
 8009b0e:	4628      	mov	r0, r5
 8009b10:	f000 f9d2 	bl	8009eb8 <_printf_common>
 8009b14:	3001      	adds	r0, #1
 8009b16:	f040 808d 	bne.w	8009c34 <_printf_float+0x1d0>
 8009b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b1e:	b00d      	add	sp, #52	@ 0x34
 8009b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b24:	4642      	mov	r2, r8
 8009b26:	464b      	mov	r3, r9
 8009b28:	4640      	mov	r0, r8
 8009b2a:	4649      	mov	r1, r9
 8009b2c:	f7f6 fffe 	bl	8000b2c <__aeabi_dcmpun>
 8009b30:	b140      	cbz	r0, 8009b44 <_printf_float+0xe0>
 8009b32:	464b      	mov	r3, r9
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	bfbc      	itt	lt
 8009b38:	232d      	movlt	r3, #45	@ 0x2d
 8009b3a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009b3e:	4a7e      	ldr	r2, [pc, #504]	@ (8009d38 <_printf_float+0x2d4>)
 8009b40:	4b7e      	ldr	r3, [pc, #504]	@ (8009d3c <_printf_float+0x2d8>)
 8009b42:	e7d4      	b.n	8009aee <_printf_float+0x8a>
 8009b44:	6863      	ldr	r3, [r4, #4]
 8009b46:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009b4a:	9206      	str	r2, [sp, #24]
 8009b4c:	1c5a      	adds	r2, r3, #1
 8009b4e:	d13b      	bne.n	8009bc8 <_printf_float+0x164>
 8009b50:	2306      	movs	r3, #6
 8009b52:	6063      	str	r3, [r4, #4]
 8009b54:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009b58:	2300      	movs	r3, #0
 8009b5a:	6022      	str	r2, [r4, #0]
 8009b5c:	9303      	str	r3, [sp, #12]
 8009b5e:	ab0a      	add	r3, sp, #40	@ 0x28
 8009b60:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009b64:	ab09      	add	r3, sp, #36	@ 0x24
 8009b66:	9300      	str	r3, [sp, #0]
 8009b68:	6861      	ldr	r1, [r4, #4]
 8009b6a:	ec49 8b10 	vmov	d0, r8, r9
 8009b6e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009b72:	4628      	mov	r0, r5
 8009b74:	f7ff fed6 	bl	8009924 <__cvt>
 8009b78:	9b06      	ldr	r3, [sp, #24]
 8009b7a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009b7c:	2b47      	cmp	r3, #71	@ 0x47
 8009b7e:	4680      	mov	r8, r0
 8009b80:	d129      	bne.n	8009bd6 <_printf_float+0x172>
 8009b82:	1cc8      	adds	r0, r1, #3
 8009b84:	db02      	blt.n	8009b8c <_printf_float+0x128>
 8009b86:	6863      	ldr	r3, [r4, #4]
 8009b88:	4299      	cmp	r1, r3
 8009b8a:	dd41      	ble.n	8009c10 <_printf_float+0x1ac>
 8009b8c:	f1aa 0a02 	sub.w	sl, sl, #2
 8009b90:	fa5f fa8a 	uxtb.w	sl, sl
 8009b94:	3901      	subs	r1, #1
 8009b96:	4652      	mov	r2, sl
 8009b98:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009b9c:	9109      	str	r1, [sp, #36]	@ 0x24
 8009b9e:	f7ff ff26 	bl	80099ee <__exponent>
 8009ba2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009ba4:	1813      	adds	r3, r2, r0
 8009ba6:	2a01      	cmp	r2, #1
 8009ba8:	4681      	mov	r9, r0
 8009baa:	6123      	str	r3, [r4, #16]
 8009bac:	dc02      	bgt.n	8009bb4 <_printf_float+0x150>
 8009bae:	6822      	ldr	r2, [r4, #0]
 8009bb0:	07d2      	lsls	r2, r2, #31
 8009bb2:	d501      	bpl.n	8009bb8 <_printf_float+0x154>
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	6123      	str	r3, [r4, #16]
 8009bb8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d0a2      	beq.n	8009b06 <_printf_float+0xa2>
 8009bc0:	232d      	movs	r3, #45	@ 0x2d
 8009bc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009bc6:	e79e      	b.n	8009b06 <_printf_float+0xa2>
 8009bc8:	9a06      	ldr	r2, [sp, #24]
 8009bca:	2a47      	cmp	r2, #71	@ 0x47
 8009bcc:	d1c2      	bne.n	8009b54 <_printf_float+0xf0>
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d1c0      	bne.n	8009b54 <_printf_float+0xf0>
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	e7bd      	b.n	8009b52 <_printf_float+0xee>
 8009bd6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009bda:	d9db      	bls.n	8009b94 <_printf_float+0x130>
 8009bdc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009be0:	d118      	bne.n	8009c14 <_printf_float+0x1b0>
 8009be2:	2900      	cmp	r1, #0
 8009be4:	6863      	ldr	r3, [r4, #4]
 8009be6:	dd0b      	ble.n	8009c00 <_printf_float+0x19c>
 8009be8:	6121      	str	r1, [r4, #16]
 8009bea:	b913      	cbnz	r3, 8009bf2 <_printf_float+0x18e>
 8009bec:	6822      	ldr	r2, [r4, #0]
 8009bee:	07d0      	lsls	r0, r2, #31
 8009bf0:	d502      	bpl.n	8009bf8 <_printf_float+0x194>
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	440b      	add	r3, r1
 8009bf6:	6123      	str	r3, [r4, #16]
 8009bf8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009bfa:	f04f 0900 	mov.w	r9, #0
 8009bfe:	e7db      	b.n	8009bb8 <_printf_float+0x154>
 8009c00:	b913      	cbnz	r3, 8009c08 <_printf_float+0x1a4>
 8009c02:	6822      	ldr	r2, [r4, #0]
 8009c04:	07d2      	lsls	r2, r2, #31
 8009c06:	d501      	bpl.n	8009c0c <_printf_float+0x1a8>
 8009c08:	3302      	adds	r3, #2
 8009c0a:	e7f4      	b.n	8009bf6 <_printf_float+0x192>
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	e7f2      	b.n	8009bf6 <_printf_float+0x192>
 8009c10:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009c14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c16:	4299      	cmp	r1, r3
 8009c18:	db05      	blt.n	8009c26 <_printf_float+0x1c2>
 8009c1a:	6823      	ldr	r3, [r4, #0]
 8009c1c:	6121      	str	r1, [r4, #16]
 8009c1e:	07d8      	lsls	r0, r3, #31
 8009c20:	d5ea      	bpl.n	8009bf8 <_printf_float+0x194>
 8009c22:	1c4b      	adds	r3, r1, #1
 8009c24:	e7e7      	b.n	8009bf6 <_printf_float+0x192>
 8009c26:	2900      	cmp	r1, #0
 8009c28:	bfd4      	ite	le
 8009c2a:	f1c1 0202 	rsble	r2, r1, #2
 8009c2e:	2201      	movgt	r2, #1
 8009c30:	4413      	add	r3, r2
 8009c32:	e7e0      	b.n	8009bf6 <_printf_float+0x192>
 8009c34:	6823      	ldr	r3, [r4, #0]
 8009c36:	055a      	lsls	r2, r3, #21
 8009c38:	d407      	bmi.n	8009c4a <_printf_float+0x1e6>
 8009c3a:	6923      	ldr	r3, [r4, #16]
 8009c3c:	4642      	mov	r2, r8
 8009c3e:	4631      	mov	r1, r6
 8009c40:	4628      	mov	r0, r5
 8009c42:	47b8      	blx	r7
 8009c44:	3001      	adds	r0, #1
 8009c46:	d12b      	bne.n	8009ca0 <_printf_float+0x23c>
 8009c48:	e767      	b.n	8009b1a <_printf_float+0xb6>
 8009c4a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009c4e:	f240 80dd 	bls.w	8009e0c <_printf_float+0x3a8>
 8009c52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009c56:	2200      	movs	r2, #0
 8009c58:	2300      	movs	r3, #0
 8009c5a:	f7f6 ff35 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c5e:	2800      	cmp	r0, #0
 8009c60:	d033      	beq.n	8009cca <_printf_float+0x266>
 8009c62:	4a37      	ldr	r2, [pc, #220]	@ (8009d40 <_printf_float+0x2dc>)
 8009c64:	2301      	movs	r3, #1
 8009c66:	4631      	mov	r1, r6
 8009c68:	4628      	mov	r0, r5
 8009c6a:	47b8      	blx	r7
 8009c6c:	3001      	adds	r0, #1
 8009c6e:	f43f af54 	beq.w	8009b1a <_printf_float+0xb6>
 8009c72:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009c76:	4543      	cmp	r3, r8
 8009c78:	db02      	blt.n	8009c80 <_printf_float+0x21c>
 8009c7a:	6823      	ldr	r3, [r4, #0]
 8009c7c:	07d8      	lsls	r0, r3, #31
 8009c7e:	d50f      	bpl.n	8009ca0 <_printf_float+0x23c>
 8009c80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c84:	4631      	mov	r1, r6
 8009c86:	4628      	mov	r0, r5
 8009c88:	47b8      	blx	r7
 8009c8a:	3001      	adds	r0, #1
 8009c8c:	f43f af45 	beq.w	8009b1a <_printf_float+0xb6>
 8009c90:	f04f 0900 	mov.w	r9, #0
 8009c94:	f108 38ff 	add.w	r8, r8, #4294967295
 8009c98:	f104 0a1a 	add.w	sl, r4, #26
 8009c9c:	45c8      	cmp	r8, r9
 8009c9e:	dc09      	bgt.n	8009cb4 <_printf_float+0x250>
 8009ca0:	6823      	ldr	r3, [r4, #0]
 8009ca2:	079b      	lsls	r3, r3, #30
 8009ca4:	f100 8103 	bmi.w	8009eae <_printf_float+0x44a>
 8009ca8:	68e0      	ldr	r0, [r4, #12]
 8009caa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009cac:	4298      	cmp	r0, r3
 8009cae:	bfb8      	it	lt
 8009cb0:	4618      	movlt	r0, r3
 8009cb2:	e734      	b.n	8009b1e <_printf_float+0xba>
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	4652      	mov	r2, sl
 8009cb8:	4631      	mov	r1, r6
 8009cba:	4628      	mov	r0, r5
 8009cbc:	47b8      	blx	r7
 8009cbe:	3001      	adds	r0, #1
 8009cc0:	f43f af2b 	beq.w	8009b1a <_printf_float+0xb6>
 8009cc4:	f109 0901 	add.w	r9, r9, #1
 8009cc8:	e7e8      	b.n	8009c9c <_printf_float+0x238>
 8009cca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	dc39      	bgt.n	8009d44 <_printf_float+0x2e0>
 8009cd0:	4a1b      	ldr	r2, [pc, #108]	@ (8009d40 <_printf_float+0x2dc>)
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	4631      	mov	r1, r6
 8009cd6:	4628      	mov	r0, r5
 8009cd8:	47b8      	blx	r7
 8009cda:	3001      	adds	r0, #1
 8009cdc:	f43f af1d 	beq.w	8009b1a <_printf_float+0xb6>
 8009ce0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009ce4:	ea59 0303 	orrs.w	r3, r9, r3
 8009ce8:	d102      	bne.n	8009cf0 <_printf_float+0x28c>
 8009cea:	6823      	ldr	r3, [r4, #0]
 8009cec:	07d9      	lsls	r1, r3, #31
 8009cee:	d5d7      	bpl.n	8009ca0 <_printf_float+0x23c>
 8009cf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cf4:	4631      	mov	r1, r6
 8009cf6:	4628      	mov	r0, r5
 8009cf8:	47b8      	blx	r7
 8009cfa:	3001      	adds	r0, #1
 8009cfc:	f43f af0d 	beq.w	8009b1a <_printf_float+0xb6>
 8009d00:	f04f 0a00 	mov.w	sl, #0
 8009d04:	f104 0b1a 	add.w	fp, r4, #26
 8009d08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d0a:	425b      	negs	r3, r3
 8009d0c:	4553      	cmp	r3, sl
 8009d0e:	dc01      	bgt.n	8009d14 <_printf_float+0x2b0>
 8009d10:	464b      	mov	r3, r9
 8009d12:	e793      	b.n	8009c3c <_printf_float+0x1d8>
 8009d14:	2301      	movs	r3, #1
 8009d16:	465a      	mov	r2, fp
 8009d18:	4631      	mov	r1, r6
 8009d1a:	4628      	mov	r0, r5
 8009d1c:	47b8      	blx	r7
 8009d1e:	3001      	adds	r0, #1
 8009d20:	f43f aefb 	beq.w	8009b1a <_printf_float+0xb6>
 8009d24:	f10a 0a01 	add.w	sl, sl, #1
 8009d28:	e7ee      	b.n	8009d08 <_printf_float+0x2a4>
 8009d2a:	bf00      	nop
 8009d2c:	7fefffff 	.word	0x7fefffff
 8009d30:	0800eef0 	.word	0x0800eef0
 8009d34:	0800eef4 	.word	0x0800eef4
 8009d38:	0800eef8 	.word	0x0800eef8
 8009d3c:	0800eefc 	.word	0x0800eefc
 8009d40:	0800f290 	.word	0x0800f290
 8009d44:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009d46:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009d4a:	4553      	cmp	r3, sl
 8009d4c:	bfa8      	it	ge
 8009d4e:	4653      	movge	r3, sl
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	4699      	mov	r9, r3
 8009d54:	dc36      	bgt.n	8009dc4 <_printf_float+0x360>
 8009d56:	f04f 0b00 	mov.w	fp, #0
 8009d5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d5e:	f104 021a 	add.w	r2, r4, #26
 8009d62:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009d64:	9306      	str	r3, [sp, #24]
 8009d66:	eba3 0309 	sub.w	r3, r3, r9
 8009d6a:	455b      	cmp	r3, fp
 8009d6c:	dc31      	bgt.n	8009dd2 <_printf_float+0x36e>
 8009d6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d70:	459a      	cmp	sl, r3
 8009d72:	dc3a      	bgt.n	8009dea <_printf_float+0x386>
 8009d74:	6823      	ldr	r3, [r4, #0]
 8009d76:	07da      	lsls	r2, r3, #31
 8009d78:	d437      	bmi.n	8009dea <_printf_float+0x386>
 8009d7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d7c:	ebaa 0903 	sub.w	r9, sl, r3
 8009d80:	9b06      	ldr	r3, [sp, #24]
 8009d82:	ebaa 0303 	sub.w	r3, sl, r3
 8009d86:	4599      	cmp	r9, r3
 8009d88:	bfa8      	it	ge
 8009d8a:	4699      	movge	r9, r3
 8009d8c:	f1b9 0f00 	cmp.w	r9, #0
 8009d90:	dc33      	bgt.n	8009dfa <_printf_float+0x396>
 8009d92:	f04f 0800 	mov.w	r8, #0
 8009d96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d9a:	f104 0b1a 	add.w	fp, r4, #26
 8009d9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009da0:	ebaa 0303 	sub.w	r3, sl, r3
 8009da4:	eba3 0309 	sub.w	r3, r3, r9
 8009da8:	4543      	cmp	r3, r8
 8009daa:	f77f af79 	ble.w	8009ca0 <_printf_float+0x23c>
 8009dae:	2301      	movs	r3, #1
 8009db0:	465a      	mov	r2, fp
 8009db2:	4631      	mov	r1, r6
 8009db4:	4628      	mov	r0, r5
 8009db6:	47b8      	blx	r7
 8009db8:	3001      	adds	r0, #1
 8009dba:	f43f aeae 	beq.w	8009b1a <_printf_float+0xb6>
 8009dbe:	f108 0801 	add.w	r8, r8, #1
 8009dc2:	e7ec      	b.n	8009d9e <_printf_float+0x33a>
 8009dc4:	4642      	mov	r2, r8
 8009dc6:	4631      	mov	r1, r6
 8009dc8:	4628      	mov	r0, r5
 8009dca:	47b8      	blx	r7
 8009dcc:	3001      	adds	r0, #1
 8009dce:	d1c2      	bne.n	8009d56 <_printf_float+0x2f2>
 8009dd0:	e6a3      	b.n	8009b1a <_printf_float+0xb6>
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	4631      	mov	r1, r6
 8009dd6:	4628      	mov	r0, r5
 8009dd8:	9206      	str	r2, [sp, #24]
 8009dda:	47b8      	blx	r7
 8009ddc:	3001      	adds	r0, #1
 8009dde:	f43f ae9c 	beq.w	8009b1a <_printf_float+0xb6>
 8009de2:	9a06      	ldr	r2, [sp, #24]
 8009de4:	f10b 0b01 	add.w	fp, fp, #1
 8009de8:	e7bb      	b.n	8009d62 <_printf_float+0x2fe>
 8009dea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009dee:	4631      	mov	r1, r6
 8009df0:	4628      	mov	r0, r5
 8009df2:	47b8      	blx	r7
 8009df4:	3001      	adds	r0, #1
 8009df6:	d1c0      	bne.n	8009d7a <_printf_float+0x316>
 8009df8:	e68f      	b.n	8009b1a <_printf_float+0xb6>
 8009dfa:	9a06      	ldr	r2, [sp, #24]
 8009dfc:	464b      	mov	r3, r9
 8009dfe:	4442      	add	r2, r8
 8009e00:	4631      	mov	r1, r6
 8009e02:	4628      	mov	r0, r5
 8009e04:	47b8      	blx	r7
 8009e06:	3001      	adds	r0, #1
 8009e08:	d1c3      	bne.n	8009d92 <_printf_float+0x32e>
 8009e0a:	e686      	b.n	8009b1a <_printf_float+0xb6>
 8009e0c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009e10:	f1ba 0f01 	cmp.w	sl, #1
 8009e14:	dc01      	bgt.n	8009e1a <_printf_float+0x3b6>
 8009e16:	07db      	lsls	r3, r3, #31
 8009e18:	d536      	bpl.n	8009e88 <_printf_float+0x424>
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	4642      	mov	r2, r8
 8009e1e:	4631      	mov	r1, r6
 8009e20:	4628      	mov	r0, r5
 8009e22:	47b8      	blx	r7
 8009e24:	3001      	adds	r0, #1
 8009e26:	f43f ae78 	beq.w	8009b1a <_printf_float+0xb6>
 8009e2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e2e:	4631      	mov	r1, r6
 8009e30:	4628      	mov	r0, r5
 8009e32:	47b8      	blx	r7
 8009e34:	3001      	adds	r0, #1
 8009e36:	f43f ae70 	beq.w	8009b1a <_printf_float+0xb6>
 8009e3a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009e3e:	2200      	movs	r2, #0
 8009e40:	2300      	movs	r3, #0
 8009e42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e46:	f7f6 fe3f 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e4a:	b9c0      	cbnz	r0, 8009e7e <_printf_float+0x41a>
 8009e4c:	4653      	mov	r3, sl
 8009e4e:	f108 0201 	add.w	r2, r8, #1
 8009e52:	4631      	mov	r1, r6
 8009e54:	4628      	mov	r0, r5
 8009e56:	47b8      	blx	r7
 8009e58:	3001      	adds	r0, #1
 8009e5a:	d10c      	bne.n	8009e76 <_printf_float+0x412>
 8009e5c:	e65d      	b.n	8009b1a <_printf_float+0xb6>
 8009e5e:	2301      	movs	r3, #1
 8009e60:	465a      	mov	r2, fp
 8009e62:	4631      	mov	r1, r6
 8009e64:	4628      	mov	r0, r5
 8009e66:	47b8      	blx	r7
 8009e68:	3001      	adds	r0, #1
 8009e6a:	f43f ae56 	beq.w	8009b1a <_printf_float+0xb6>
 8009e6e:	f108 0801 	add.w	r8, r8, #1
 8009e72:	45d0      	cmp	r8, sl
 8009e74:	dbf3      	blt.n	8009e5e <_printf_float+0x3fa>
 8009e76:	464b      	mov	r3, r9
 8009e78:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009e7c:	e6df      	b.n	8009c3e <_printf_float+0x1da>
 8009e7e:	f04f 0800 	mov.w	r8, #0
 8009e82:	f104 0b1a 	add.w	fp, r4, #26
 8009e86:	e7f4      	b.n	8009e72 <_printf_float+0x40e>
 8009e88:	2301      	movs	r3, #1
 8009e8a:	4642      	mov	r2, r8
 8009e8c:	e7e1      	b.n	8009e52 <_printf_float+0x3ee>
 8009e8e:	2301      	movs	r3, #1
 8009e90:	464a      	mov	r2, r9
 8009e92:	4631      	mov	r1, r6
 8009e94:	4628      	mov	r0, r5
 8009e96:	47b8      	blx	r7
 8009e98:	3001      	adds	r0, #1
 8009e9a:	f43f ae3e 	beq.w	8009b1a <_printf_float+0xb6>
 8009e9e:	f108 0801 	add.w	r8, r8, #1
 8009ea2:	68e3      	ldr	r3, [r4, #12]
 8009ea4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009ea6:	1a5b      	subs	r3, r3, r1
 8009ea8:	4543      	cmp	r3, r8
 8009eaa:	dcf0      	bgt.n	8009e8e <_printf_float+0x42a>
 8009eac:	e6fc      	b.n	8009ca8 <_printf_float+0x244>
 8009eae:	f04f 0800 	mov.w	r8, #0
 8009eb2:	f104 0919 	add.w	r9, r4, #25
 8009eb6:	e7f4      	b.n	8009ea2 <_printf_float+0x43e>

08009eb8 <_printf_common>:
 8009eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ebc:	4616      	mov	r6, r2
 8009ebe:	4698      	mov	r8, r3
 8009ec0:	688a      	ldr	r2, [r1, #8]
 8009ec2:	690b      	ldr	r3, [r1, #16]
 8009ec4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	bfb8      	it	lt
 8009ecc:	4613      	movlt	r3, r2
 8009ece:	6033      	str	r3, [r6, #0]
 8009ed0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009ed4:	4607      	mov	r7, r0
 8009ed6:	460c      	mov	r4, r1
 8009ed8:	b10a      	cbz	r2, 8009ede <_printf_common+0x26>
 8009eda:	3301      	adds	r3, #1
 8009edc:	6033      	str	r3, [r6, #0]
 8009ede:	6823      	ldr	r3, [r4, #0]
 8009ee0:	0699      	lsls	r1, r3, #26
 8009ee2:	bf42      	ittt	mi
 8009ee4:	6833      	ldrmi	r3, [r6, #0]
 8009ee6:	3302      	addmi	r3, #2
 8009ee8:	6033      	strmi	r3, [r6, #0]
 8009eea:	6825      	ldr	r5, [r4, #0]
 8009eec:	f015 0506 	ands.w	r5, r5, #6
 8009ef0:	d106      	bne.n	8009f00 <_printf_common+0x48>
 8009ef2:	f104 0a19 	add.w	sl, r4, #25
 8009ef6:	68e3      	ldr	r3, [r4, #12]
 8009ef8:	6832      	ldr	r2, [r6, #0]
 8009efa:	1a9b      	subs	r3, r3, r2
 8009efc:	42ab      	cmp	r3, r5
 8009efe:	dc26      	bgt.n	8009f4e <_printf_common+0x96>
 8009f00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009f04:	6822      	ldr	r2, [r4, #0]
 8009f06:	3b00      	subs	r3, #0
 8009f08:	bf18      	it	ne
 8009f0a:	2301      	movne	r3, #1
 8009f0c:	0692      	lsls	r2, r2, #26
 8009f0e:	d42b      	bmi.n	8009f68 <_printf_common+0xb0>
 8009f10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009f14:	4641      	mov	r1, r8
 8009f16:	4638      	mov	r0, r7
 8009f18:	47c8      	blx	r9
 8009f1a:	3001      	adds	r0, #1
 8009f1c:	d01e      	beq.n	8009f5c <_printf_common+0xa4>
 8009f1e:	6823      	ldr	r3, [r4, #0]
 8009f20:	6922      	ldr	r2, [r4, #16]
 8009f22:	f003 0306 	and.w	r3, r3, #6
 8009f26:	2b04      	cmp	r3, #4
 8009f28:	bf02      	ittt	eq
 8009f2a:	68e5      	ldreq	r5, [r4, #12]
 8009f2c:	6833      	ldreq	r3, [r6, #0]
 8009f2e:	1aed      	subeq	r5, r5, r3
 8009f30:	68a3      	ldr	r3, [r4, #8]
 8009f32:	bf0c      	ite	eq
 8009f34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f38:	2500      	movne	r5, #0
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	bfc4      	itt	gt
 8009f3e:	1a9b      	subgt	r3, r3, r2
 8009f40:	18ed      	addgt	r5, r5, r3
 8009f42:	2600      	movs	r6, #0
 8009f44:	341a      	adds	r4, #26
 8009f46:	42b5      	cmp	r5, r6
 8009f48:	d11a      	bne.n	8009f80 <_printf_common+0xc8>
 8009f4a:	2000      	movs	r0, #0
 8009f4c:	e008      	b.n	8009f60 <_printf_common+0xa8>
 8009f4e:	2301      	movs	r3, #1
 8009f50:	4652      	mov	r2, sl
 8009f52:	4641      	mov	r1, r8
 8009f54:	4638      	mov	r0, r7
 8009f56:	47c8      	blx	r9
 8009f58:	3001      	adds	r0, #1
 8009f5a:	d103      	bne.n	8009f64 <_printf_common+0xac>
 8009f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f64:	3501      	adds	r5, #1
 8009f66:	e7c6      	b.n	8009ef6 <_printf_common+0x3e>
 8009f68:	18e1      	adds	r1, r4, r3
 8009f6a:	1c5a      	adds	r2, r3, #1
 8009f6c:	2030      	movs	r0, #48	@ 0x30
 8009f6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009f72:	4422      	add	r2, r4
 8009f74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009f78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009f7c:	3302      	adds	r3, #2
 8009f7e:	e7c7      	b.n	8009f10 <_printf_common+0x58>
 8009f80:	2301      	movs	r3, #1
 8009f82:	4622      	mov	r2, r4
 8009f84:	4641      	mov	r1, r8
 8009f86:	4638      	mov	r0, r7
 8009f88:	47c8      	blx	r9
 8009f8a:	3001      	adds	r0, #1
 8009f8c:	d0e6      	beq.n	8009f5c <_printf_common+0xa4>
 8009f8e:	3601      	adds	r6, #1
 8009f90:	e7d9      	b.n	8009f46 <_printf_common+0x8e>
	...

08009f94 <_printf_i>:
 8009f94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f98:	7e0f      	ldrb	r7, [r1, #24]
 8009f9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009f9c:	2f78      	cmp	r7, #120	@ 0x78
 8009f9e:	4691      	mov	r9, r2
 8009fa0:	4680      	mov	r8, r0
 8009fa2:	460c      	mov	r4, r1
 8009fa4:	469a      	mov	sl, r3
 8009fa6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009faa:	d807      	bhi.n	8009fbc <_printf_i+0x28>
 8009fac:	2f62      	cmp	r7, #98	@ 0x62
 8009fae:	d80a      	bhi.n	8009fc6 <_printf_i+0x32>
 8009fb0:	2f00      	cmp	r7, #0
 8009fb2:	f000 80d2 	beq.w	800a15a <_printf_i+0x1c6>
 8009fb6:	2f58      	cmp	r7, #88	@ 0x58
 8009fb8:	f000 80b9 	beq.w	800a12e <_printf_i+0x19a>
 8009fbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009fc0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009fc4:	e03a      	b.n	800a03c <_printf_i+0xa8>
 8009fc6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009fca:	2b15      	cmp	r3, #21
 8009fcc:	d8f6      	bhi.n	8009fbc <_printf_i+0x28>
 8009fce:	a101      	add	r1, pc, #4	@ (adr r1, 8009fd4 <_printf_i+0x40>)
 8009fd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009fd4:	0800a02d 	.word	0x0800a02d
 8009fd8:	0800a041 	.word	0x0800a041
 8009fdc:	08009fbd 	.word	0x08009fbd
 8009fe0:	08009fbd 	.word	0x08009fbd
 8009fe4:	08009fbd 	.word	0x08009fbd
 8009fe8:	08009fbd 	.word	0x08009fbd
 8009fec:	0800a041 	.word	0x0800a041
 8009ff0:	08009fbd 	.word	0x08009fbd
 8009ff4:	08009fbd 	.word	0x08009fbd
 8009ff8:	08009fbd 	.word	0x08009fbd
 8009ffc:	08009fbd 	.word	0x08009fbd
 800a000:	0800a141 	.word	0x0800a141
 800a004:	0800a06b 	.word	0x0800a06b
 800a008:	0800a0fb 	.word	0x0800a0fb
 800a00c:	08009fbd 	.word	0x08009fbd
 800a010:	08009fbd 	.word	0x08009fbd
 800a014:	0800a163 	.word	0x0800a163
 800a018:	08009fbd 	.word	0x08009fbd
 800a01c:	0800a06b 	.word	0x0800a06b
 800a020:	08009fbd 	.word	0x08009fbd
 800a024:	08009fbd 	.word	0x08009fbd
 800a028:	0800a103 	.word	0x0800a103
 800a02c:	6833      	ldr	r3, [r6, #0]
 800a02e:	1d1a      	adds	r2, r3, #4
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	6032      	str	r2, [r6, #0]
 800a034:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a038:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a03c:	2301      	movs	r3, #1
 800a03e:	e09d      	b.n	800a17c <_printf_i+0x1e8>
 800a040:	6833      	ldr	r3, [r6, #0]
 800a042:	6820      	ldr	r0, [r4, #0]
 800a044:	1d19      	adds	r1, r3, #4
 800a046:	6031      	str	r1, [r6, #0]
 800a048:	0606      	lsls	r6, r0, #24
 800a04a:	d501      	bpl.n	800a050 <_printf_i+0xbc>
 800a04c:	681d      	ldr	r5, [r3, #0]
 800a04e:	e003      	b.n	800a058 <_printf_i+0xc4>
 800a050:	0645      	lsls	r5, r0, #25
 800a052:	d5fb      	bpl.n	800a04c <_printf_i+0xb8>
 800a054:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a058:	2d00      	cmp	r5, #0
 800a05a:	da03      	bge.n	800a064 <_printf_i+0xd0>
 800a05c:	232d      	movs	r3, #45	@ 0x2d
 800a05e:	426d      	negs	r5, r5
 800a060:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a064:	4859      	ldr	r0, [pc, #356]	@ (800a1cc <_printf_i+0x238>)
 800a066:	230a      	movs	r3, #10
 800a068:	e011      	b.n	800a08e <_printf_i+0xfa>
 800a06a:	6821      	ldr	r1, [r4, #0]
 800a06c:	6833      	ldr	r3, [r6, #0]
 800a06e:	0608      	lsls	r0, r1, #24
 800a070:	f853 5b04 	ldr.w	r5, [r3], #4
 800a074:	d402      	bmi.n	800a07c <_printf_i+0xe8>
 800a076:	0649      	lsls	r1, r1, #25
 800a078:	bf48      	it	mi
 800a07a:	b2ad      	uxthmi	r5, r5
 800a07c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a07e:	4853      	ldr	r0, [pc, #332]	@ (800a1cc <_printf_i+0x238>)
 800a080:	6033      	str	r3, [r6, #0]
 800a082:	bf14      	ite	ne
 800a084:	230a      	movne	r3, #10
 800a086:	2308      	moveq	r3, #8
 800a088:	2100      	movs	r1, #0
 800a08a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a08e:	6866      	ldr	r6, [r4, #4]
 800a090:	60a6      	str	r6, [r4, #8]
 800a092:	2e00      	cmp	r6, #0
 800a094:	bfa2      	ittt	ge
 800a096:	6821      	ldrge	r1, [r4, #0]
 800a098:	f021 0104 	bicge.w	r1, r1, #4
 800a09c:	6021      	strge	r1, [r4, #0]
 800a09e:	b90d      	cbnz	r5, 800a0a4 <_printf_i+0x110>
 800a0a0:	2e00      	cmp	r6, #0
 800a0a2:	d04b      	beq.n	800a13c <_printf_i+0x1a8>
 800a0a4:	4616      	mov	r6, r2
 800a0a6:	fbb5 f1f3 	udiv	r1, r5, r3
 800a0aa:	fb03 5711 	mls	r7, r3, r1, r5
 800a0ae:	5dc7      	ldrb	r7, [r0, r7]
 800a0b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a0b4:	462f      	mov	r7, r5
 800a0b6:	42bb      	cmp	r3, r7
 800a0b8:	460d      	mov	r5, r1
 800a0ba:	d9f4      	bls.n	800a0a6 <_printf_i+0x112>
 800a0bc:	2b08      	cmp	r3, #8
 800a0be:	d10b      	bne.n	800a0d8 <_printf_i+0x144>
 800a0c0:	6823      	ldr	r3, [r4, #0]
 800a0c2:	07df      	lsls	r7, r3, #31
 800a0c4:	d508      	bpl.n	800a0d8 <_printf_i+0x144>
 800a0c6:	6923      	ldr	r3, [r4, #16]
 800a0c8:	6861      	ldr	r1, [r4, #4]
 800a0ca:	4299      	cmp	r1, r3
 800a0cc:	bfde      	ittt	le
 800a0ce:	2330      	movle	r3, #48	@ 0x30
 800a0d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a0d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a0d8:	1b92      	subs	r2, r2, r6
 800a0da:	6122      	str	r2, [r4, #16]
 800a0dc:	f8cd a000 	str.w	sl, [sp]
 800a0e0:	464b      	mov	r3, r9
 800a0e2:	aa03      	add	r2, sp, #12
 800a0e4:	4621      	mov	r1, r4
 800a0e6:	4640      	mov	r0, r8
 800a0e8:	f7ff fee6 	bl	8009eb8 <_printf_common>
 800a0ec:	3001      	adds	r0, #1
 800a0ee:	d14a      	bne.n	800a186 <_printf_i+0x1f2>
 800a0f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0f4:	b004      	add	sp, #16
 800a0f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0fa:	6823      	ldr	r3, [r4, #0]
 800a0fc:	f043 0320 	orr.w	r3, r3, #32
 800a100:	6023      	str	r3, [r4, #0]
 800a102:	4833      	ldr	r0, [pc, #204]	@ (800a1d0 <_printf_i+0x23c>)
 800a104:	2778      	movs	r7, #120	@ 0x78
 800a106:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a10a:	6823      	ldr	r3, [r4, #0]
 800a10c:	6831      	ldr	r1, [r6, #0]
 800a10e:	061f      	lsls	r7, r3, #24
 800a110:	f851 5b04 	ldr.w	r5, [r1], #4
 800a114:	d402      	bmi.n	800a11c <_printf_i+0x188>
 800a116:	065f      	lsls	r7, r3, #25
 800a118:	bf48      	it	mi
 800a11a:	b2ad      	uxthmi	r5, r5
 800a11c:	6031      	str	r1, [r6, #0]
 800a11e:	07d9      	lsls	r1, r3, #31
 800a120:	bf44      	itt	mi
 800a122:	f043 0320 	orrmi.w	r3, r3, #32
 800a126:	6023      	strmi	r3, [r4, #0]
 800a128:	b11d      	cbz	r5, 800a132 <_printf_i+0x19e>
 800a12a:	2310      	movs	r3, #16
 800a12c:	e7ac      	b.n	800a088 <_printf_i+0xf4>
 800a12e:	4827      	ldr	r0, [pc, #156]	@ (800a1cc <_printf_i+0x238>)
 800a130:	e7e9      	b.n	800a106 <_printf_i+0x172>
 800a132:	6823      	ldr	r3, [r4, #0]
 800a134:	f023 0320 	bic.w	r3, r3, #32
 800a138:	6023      	str	r3, [r4, #0]
 800a13a:	e7f6      	b.n	800a12a <_printf_i+0x196>
 800a13c:	4616      	mov	r6, r2
 800a13e:	e7bd      	b.n	800a0bc <_printf_i+0x128>
 800a140:	6833      	ldr	r3, [r6, #0]
 800a142:	6825      	ldr	r5, [r4, #0]
 800a144:	6961      	ldr	r1, [r4, #20]
 800a146:	1d18      	adds	r0, r3, #4
 800a148:	6030      	str	r0, [r6, #0]
 800a14a:	062e      	lsls	r6, r5, #24
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	d501      	bpl.n	800a154 <_printf_i+0x1c0>
 800a150:	6019      	str	r1, [r3, #0]
 800a152:	e002      	b.n	800a15a <_printf_i+0x1c6>
 800a154:	0668      	lsls	r0, r5, #25
 800a156:	d5fb      	bpl.n	800a150 <_printf_i+0x1bc>
 800a158:	8019      	strh	r1, [r3, #0]
 800a15a:	2300      	movs	r3, #0
 800a15c:	6123      	str	r3, [r4, #16]
 800a15e:	4616      	mov	r6, r2
 800a160:	e7bc      	b.n	800a0dc <_printf_i+0x148>
 800a162:	6833      	ldr	r3, [r6, #0]
 800a164:	1d1a      	adds	r2, r3, #4
 800a166:	6032      	str	r2, [r6, #0]
 800a168:	681e      	ldr	r6, [r3, #0]
 800a16a:	6862      	ldr	r2, [r4, #4]
 800a16c:	2100      	movs	r1, #0
 800a16e:	4630      	mov	r0, r6
 800a170:	f7f6 f82e 	bl	80001d0 <memchr>
 800a174:	b108      	cbz	r0, 800a17a <_printf_i+0x1e6>
 800a176:	1b80      	subs	r0, r0, r6
 800a178:	6060      	str	r0, [r4, #4]
 800a17a:	6863      	ldr	r3, [r4, #4]
 800a17c:	6123      	str	r3, [r4, #16]
 800a17e:	2300      	movs	r3, #0
 800a180:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a184:	e7aa      	b.n	800a0dc <_printf_i+0x148>
 800a186:	6923      	ldr	r3, [r4, #16]
 800a188:	4632      	mov	r2, r6
 800a18a:	4649      	mov	r1, r9
 800a18c:	4640      	mov	r0, r8
 800a18e:	47d0      	blx	sl
 800a190:	3001      	adds	r0, #1
 800a192:	d0ad      	beq.n	800a0f0 <_printf_i+0x15c>
 800a194:	6823      	ldr	r3, [r4, #0]
 800a196:	079b      	lsls	r3, r3, #30
 800a198:	d413      	bmi.n	800a1c2 <_printf_i+0x22e>
 800a19a:	68e0      	ldr	r0, [r4, #12]
 800a19c:	9b03      	ldr	r3, [sp, #12]
 800a19e:	4298      	cmp	r0, r3
 800a1a0:	bfb8      	it	lt
 800a1a2:	4618      	movlt	r0, r3
 800a1a4:	e7a6      	b.n	800a0f4 <_printf_i+0x160>
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	4632      	mov	r2, r6
 800a1aa:	4649      	mov	r1, r9
 800a1ac:	4640      	mov	r0, r8
 800a1ae:	47d0      	blx	sl
 800a1b0:	3001      	adds	r0, #1
 800a1b2:	d09d      	beq.n	800a0f0 <_printf_i+0x15c>
 800a1b4:	3501      	adds	r5, #1
 800a1b6:	68e3      	ldr	r3, [r4, #12]
 800a1b8:	9903      	ldr	r1, [sp, #12]
 800a1ba:	1a5b      	subs	r3, r3, r1
 800a1bc:	42ab      	cmp	r3, r5
 800a1be:	dcf2      	bgt.n	800a1a6 <_printf_i+0x212>
 800a1c0:	e7eb      	b.n	800a19a <_printf_i+0x206>
 800a1c2:	2500      	movs	r5, #0
 800a1c4:	f104 0619 	add.w	r6, r4, #25
 800a1c8:	e7f5      	b.n	800a1b6 <_printf_i+0x222>
 800a1ca:	bf00      	nop
 800a1cc:	0800ef00 	.word	0x0800ef00
 800a1d0:	0800ef11 	.word	0x0800ef11

0800a1d4 <_scanf_float>:
 800a1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1d8:	b087      	sub	sp, #28
 800a1da:	4617      	mov	r7, r2
 800a1dc:	9303      	str	r3, [sp, #12]
 800a1de:	688b      	ldr	r3, [r1, #8]
 800a1e0:	1e5a      	subs	r2, r3, #1
 800a1e2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a1e6:	bf81      	itttt	hi
 800a1e8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a1ec:	eb03 0b05 	addhi.w	fp, r3, r5
 800a1f0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a1f4:	608b      	strhi	r3, [r1, #8]
 800a1f6:	680b      	ldr	r3, [r1, #0]
 800a1f8:	460a      	mov	r2, r1
 800a1fa:	f04f 0500 	mov.w	r5, #0
 800a1fe:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a202:	f842 3b1c 	str.w	r3, [r2], #28
 800a206:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a20a:	4680      	mov	r8, r0
 800a20c:	460c      	mov	r4, r1
 800a20e:	bf98      	it	ls
 800a210:	f04f 0b00 	movls.w	fp, #0
 800a214:	9201      	str	r2, [sp, #4]
 800a216:	4616      	mov	r6, r2
 800a218:	46aa      	mov	sl, r5
 800a21a:	46a9      	mov	r9, r5
 800a21c:	9502      	str	r5, [sp, #8]
 800a21e:	68a2      	ldr	r2, [r4, #8]
 800a220:	b152      	cbz	r2, 800a238 <_scanf_float+0x64>
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	781b      	ldrb	r3, [r3, #0]
 800a226:	2b4e      	cmp	r3, #78	@ 0x4e
 800a228:	d864      	bhi.n	800a2f4 <_scanf_float+0x120>
 800a22a:	2b40      	cmp	r3, #64	@ 0x40
 800a22c:	d83c      	bhi.n	800a2a8 <_scanf_float+0xd4>
 800a22e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a232:	b2c8      	uxtb	r0, r1
 800a234:	280e      	cmp	r0, #14
 800a236:	d93a      	bls.n	800a2ae <_scanf_float+0xda>
 800a238:	f1b9 0f00 	cmp.w	r9, #0
 800a23c:	d003      	beq.n	800a246 <_scanf_float+0x72>
 800a23e:	6823      	ldr	r3, [r4, #0]
 800a240:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a244:	6023      	str	r3, [r4, #0]
 800a246:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a24a:	f1ba 0f01 	cmp.w	sl, #1
 800a24e:	f200 8117 	bhi.w	800a480 <_scanf_float+0x2ac>
 800a252:	9b01      	ldr	r3, [sp, #4]
 800a254:	429e      	cmp	r6, r3
 800a256:	f200 8108 	bhi.w	800a46a <_scanf_float+0x296>
 800a25a:	2001      	movs	r0, #1
 800a25c:	b007      	add	sp, #28
 800a25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a262:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a266:	2a0d      	cmp	r2, #13
 800a268:	d8e6      	bhi.n	800a238 <_scanf_float+0x64>
 800a26a:	a101      	add	r1, pc, #4	@ (adr r1, 800a270 <_scanf_float+0x9c>)
 800a26c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a270:	0800a3b7 	.word	0x0800a3b7
 800a274:	0800a239 	.word	0x0800a239
 800a278:	0800a239 	.word	0x0800a239
 800a27c:	0800a239 	.word	0x0800a239
 800a280:	0800a417 	.word	0x0800a417
 800a284:	0800a3ef 	.word	0x0800a3ef
 800a288:	0800a239 	.word	0x0800a239
 800a28c:	0800a239 	.word	0x0800a239
 800a290:	0800a3c5 	.word	0x0800a3c5
 800a294:	0800a239 	.word	0x0800a239
 800a298:	0800a239 	.word	0x0800a239
 800a29c:	0800a239 	.word	0x0800a239
 800a2a0:	0800a239 	.word	0x0800a239
 800a2a4:	0800a37d 	.word	0x0800a37d
 800a2a8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a2ac:	e7db      	b.n	800a266 <_scanf_float+0x92>
 800a2ae:	290e      	cmp	r1, #14
 800a2b0:	d8c2      	bhi.n	800a238 <_scanf_float+0x64>
 800a2b2:	a001      	add	r0, pc, #4	@ (adr r0, 800a2b8 <_scanf_float+0xe4>)
 800a2b4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a2b8:	0800a36d 	.word	0x0800a36d
 800a2bc:	0800a239 	.word	0x0800a239
 800a2c0:	0800a36d 	.word	0x0800a36d
 800a2c4:	0800a403 	.word	0x0800a403
 800a2c8:	0800a239 	.word	0x0800a239
 800a2cc:	0800a315 	.word	0x0800a315
 800a2d0:	0800a353 	.word	0x0800a353
 800a2d4:	0800a353 	.word	0x0800a353
 800a2d8:	0800a353 	.word	0x0800a353
 800a2dc:	0800a353 	.word	0x0800a353
 800a2e0:	0800a353 	.word	0x0800a353
 800a2e4:	0800a353 	.word	0x0800a353
 800a2e8:	0800a353 	.word	0x0800a353
 800a2ec:	0800a353 	.word	0x0800a353
 800a2f0:	0800a353 	.word	0x0800a353
 800a2f4:	2b6e      	cmp	r3, #110	@ 0x6e
 800a2f6:	d809      	bhi.n	800a30c <_scanf_float+0x138>
 800a2f8:	2b60      	cmp	r3, #96	@ 0x60
 800a2fa:	d8b2      	bhi.n	800a262 <_scanf_float+0x8e>
 800a2fc:	2b54      	cmp	r3, #84	@ 0x54
 800a2fe:	d07b      	beq.n	800a3f8 <_scanf_float+0x224>
 800a300:	2b59      	cmp	r3, #89	@ 0x59
 800a302:	d199      	bne.n	800a238 <_scanf_float+0x64>
 800a304:	2d07      	cmp	r5, #7
 800a306:	d197      	bne.n	800a238 <_scanf_float+0x64>
 800a308:	2508      	movs	r5, #8
 800a30a:	e02c      	b.n	800a366 <_scanf_float+0x192>
 800a30c:	2b74      	cmp	r3, #116	@ 0x74
 800a30e:	d073      	beq.n	800a3f8 <_scanf_float+0x224>
 800a310:	2b79      	cmp	r3, #121	@ 0x79
 800a312:	e7f6      	b.n	800a302 <_scanf_float+0x12e>
 800a314:	6821      	ldr	r1, [r4, #0]
 800a316:	05c8      	lsls	r0, r1, #23
 800a318:	d51b      	bpl.n	800a352 <_scanf_float+0x17e>
 800a31a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a31e:	6021      	str	r1, [r4, #0]
 800a320:	f109 0901 	add.w	r9, r9, #1
 800a324:	f1bb 0f00 	cmp.w	fp, #0
 800a328:	d003      	beq.n	800a332 <_scanf_float+0x15e>
 800a32a:	3201      	adds	r2, #1
 800a32c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a330:	60a2      	str	r2, [r4, #8]
 800a332:	68a3      	ldr	r3, [r4, #8]
 800a334:	3b01      	subs	r3, #1
 800a336:	60a3      	str	r3, [r4, #8]
 800a338:	6923      	ldr	r3, [r4, #16]
 800a33a:	3301      	adds	r3, #1
 800a33c:	6123      	str	r3, [r4, #16]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	3b01      	subs	r3, #1
 800a342:	2b00      	cmp	r3, #0
 800a344:	607b      	str	r3, [r7, #4]
 800a346:	f340 8087 	ble.w	800a458 <_scanf_float+0x284>
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	3301      	adds	r3, #1
 800a34e:	603b      	str	r3, [r7, #0]
 800a350:	e765      	b.n	800a21e <_scanf_float+0x4a>
 800a352:	eb1a 0105 	adds.w	r1, sl, r5
 800a356:	f47f af6f 	bne.w	800a238 <_scanf_float+0x64>
 800a35a:	6822      	ldr	r2, [r4, #0]
 800a35c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a360:	6022      	str	r2, [r4, #0]
 800a362:	460d      	mov	r5, r1
 800a364:	468a      	mov	sl, r1
 800a366:	f806 3b01 	strb.w	r3, [r6], #1
 800a36a:	e7e2      	b.n	800a332 <_scanf_float+0x15e>
 800a36c:	6822      	ldr	r2, [r4, #0]
 800a36e:	0610      	lsls	r0, r2, #24
 800a370:	f57f af62 	bpl.w	800a238 <_scanf_float+0x64>
 800a374:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a378:	6022      	str	r2, [r4, #0]
 800a37a:	e7f4      	b.n	800a366 <_scanf_float+0x192>
 800a37c:	f1ba 0f00 	cmp.w	sl, #0
 800a380:	d10e      	bne.n	800a3a0 <_scanf_float+0x1cc>
 800a382:	f1b9 0f00 	cmp.w	r9, #0
 800a386:	d10e      	bne.n	800a3a6 <_scanf_float+0x1d2>
 800a388:	6822      	ldr	r2, [r4, #0]
 800a38a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a38e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a392:	d108      	bne.n	800a3a6 <_scanf_float+0x1d2>
 800a394:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a398:	6022      	str	r2, [r4, #0]
 800a39a:	f04f 0a01 	mov.w	sl, #1
 800a39e:	e7e2      	b.n	800a366 <_scanf_float+0x192>
 800a3a0:	f1ba 0f02 	cmp.w	sl, #2
 800a3a4:	d055      	beq.n	800a452 <_scanf_float+0x27e>
 800a3a6:	2d01      	cmp	r5, #1
 800a3a8:	d002      	beq.n	800a3b0 <_scanf_float+0x1dc>
 800a3aa:	2d04      	cmp	r5, #4
 800a3ac:	f47f af44 	bne.w	800a238 <_scanf_float+0x64>
 800a3b0:	3501      	adds	r5, #1
 800a3b2:	b2ed      	uxtb	r5, r5
 800a3b4:	e7d7      	b.n	800a366 <_scanf_float+0x192>
 800a3b6:	f1ba 0f01 	cmp.w	sl, #1
 800a3ba:	f47f af3d 	bne.w	800a238 <_scanf_float+0x64>
 800a3be:	f04f 0a02 	mov.w	sl, #2
 800a3c2:	e7d0      	b.n	800a366 <_scanf_float+0x192>
 800a3c4:	b97d      	cbnz	r5, 800a3e6 <_scanf_float+0x212>
 800a3c6:	f1b9 0f00 	cmp.w	r9, #0
 800a3ca:	f47f af38 	bne.w	800a23e <_scanf_float+0x6a>
 800a3ce:	6822      	ldr	r2, [r4, #0]
 800a3d0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a3d4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a3d8:	f040 8108 	bne.w	800a5ec <_scanf_float+0x418>
 800a3dc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a3e0:	6022      	str	r2, [r4, #0]
 800a3e2:	2501      	movs	r5, #1
 800a3e4:	e7bf      	b.n	800a366 <_scanf_float+0x192>
 800a3e6:	2d03      	cmp	r5, #3
 800a3e8:	d0e2      	beq.n	800a3b0 <_scanf_float+0x1dc>
 800a3ea:	2d05      	cmp	r5, #5
 800a3ec:	e7de      	b.n	800a3ac <_scanf_float+0x1d8>
 800a3ee:	2d02      	cmp	r5, #2
 800a3f0:	f47f af22 	bne.w	800a238 <_scanf_float+0x64>
 800a3f4:	2503      	movs	r5, #3
 800a3f6:	e7b6      	b.n	800a366 <_scanf_float+0x192>
 800a3f8:	2d06      	cmp	r5, #6
 800a3fa:	f47f af1d 	bne.w	800a238 <_scanf_float+0x64>
 800a3fe:	2507      	movs	r5, #7
 800a400:	e7b1      	b.n	800a366 <_scanf_float+0x192>
 800a402:	6822      	ldr	r2, [r4, #0]
 800a404:	0591      	lsls	r1, r2, #22
 800a406:	f57f af17 	bpl.w	800a238 <_scanf_float+0x64>
 800a40a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a40e:	6022      	str	r2, [r4, #0]
 800a410:	f8cd 9008 	str.w	r9, [sp, #8]
 800a414:	e7a7      	b.n	800a366 <_scanf_float+0x192>
 800a416:	6822      	ldr	r2, [r4, #0]
 800a418:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a41c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a420:	d006      	beq.n	800a430 <_scanf_float+0x25c>
 800a422:	0550      	lsls	r0, r2, #21
 800a424:	f57f af08 	bpl.w	800a238 <_scanf_float+0x64>
 800a428:	f1b9 0f00 	cmp.w	r9, #0
 800a42c:	f000 80de 	beq.w	800a5ec <_scanf_float+0x418>
 800a430:	0591      	lsls	r1, r2, #22
 800a432:	bf58      	it	pl
 800a434:	9902      	ldrpl	r1, [sp, #8]
 800a436:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a43a:	bf58      	it	pl
 800a43c:	eba9 0101 	subpl.w	r1, r9, r1
 800a440:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a444:	bf58      	it	pl
 800a446:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a44a:	6022      	str	r2, [r4, #0]
 800a44c:	f04f 0900 	mov.w	r9, #0
 800a450:	e789      	b.n	800a366 <_scanf_float+0x192>
 800a452:	f04f 0a03 	mov.w	sl, #3
 800a456:	e786      	b.n	800a366 <_scanf_float+0x192>
 800a458:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a45c:	4639      	mov	r1, r7
 800a45e:	4640      	mov	r0, r8
 800a460:	4798      	blx	r3
 800a462:	2800      	cmp	r0, #0
 800a464:	f43f aedb 	beq.w	800a21e <_scanf_float+0x4a>
 800a468:	e6e6      	b.n	800a238 <_scanf_float+0x64>
 800a46a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a46e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a472:	463a      	mov	r2, r7
 800a474:	4640      	mov	r0, r8
 800a476:	4798      	blx	r3
 800a478:	6923      	ldr	r3, [r4, #16]
 800a47a:	3b01      	subs	r3, #1
 800a47c:	6123      	str	r3, [r4, #16]
 800a47e:	e6e8      	b.n	800a252 <_scanf_float+0x7e>
 800a480:	1e6b      	subs	r3, r5, #1
 800a482:	2b06      	cmp	r3, #6
 800a484:	d824      	bhi.n	800a4d0 <_scanf_float+0x2fc>
 800a486:	2d02      	cmp	r5, #2
 800a488:	d836      	bhi.n	800a4f8 <_scanf_float+0x324>
 800a48a:	9b01      	ldr	r3, [sp, #4]
 800a48c:	429e      	cmp	r6, r3
 800a48e:	f67f aee4 	bls.w	800a25a <_scanf_float+0x86>
 800a492:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a496:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a49a:	463a      	mov	r2, r7
 800a49c:	4640      	mov	r0, r8
 800a49e:	4798      	blx	r3
 800a4a0:	6923      	ldr	r3, [r4, #16]
 800a4a2:	3b01      	subs	r3, #1
 800a4a4:	6123      	str	r3, [r4, #16]
 800a4a6:	e7f0      	b.n	800a48a <_scanf_float+0x2b6>
 800a4a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a4ac:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a4b0:	463a      	mov	r2, r7
 800a4b2:	4640      	mov	r0, r8
 800a4b4:	4798      	blx	r3
 800a4b6:	6923      	ldr	r3, [r4, #16]
 800a4b8:	3b01      	subs	r3, #1
 800a4ba:	6123      	str	r3, [r4, #16]
 800a4bc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a4c0:	fa5f fa8a 	uxtb.w	sl, sl
 800a4c4:	f1ba 0f02 	cmp.w	sl, #2
 800a4c8:	d1ee      	bne.n	800a4a8 <_scanf_float+0x2d4>
 800a4ca:	3d03      	subs	r5, #3
 800a4cc:	b2ed      	uxtb	r5, r5
 800a4ce:	1b76      	subs	r6, r6, r5
 800a4d0:	6823      	ldr	r3, [r4, #0]
 800a4d2:	05da      	lsls	r2, r3, #23
 800a4d4:	d530      	bpl.n	800a538 <_scanf_float+0x364>
 800a4d6:	055b      	lsls	r3, r3, #21
 800a4d8:	d511      	bpl.n	800a4fe <_scanf_float+0x32a>
 800a4da:	9b01      	ldr	r3, [sp, #4]
 800a4dc:	429e      	cmp	r6, r3
 800a4de:	f67f aebc 	bls.w	800a25a <_scanf_float+0x86>
 800a4e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a4e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a4ea:	463a      	mov	r2, r7
 800a4ec:	4640      	mov	r0, r8
 800a4ee:	4798      	blx	r3
 800a4f0:	6923      	ldr	r3, [r4, #16]
 800a4f2:	3b01      	subs	r3, #1
 800a4f4:	6123      	str	r3, [r4, #16]
 800a4f6:	e7f0      	b.n	800a4da <_scanf_float+0x306>
 800a4f8:	46aa      	mov	sl, r5
 800a4fa:	46b3      	mov	fp, r6
 800a4fc:	e7de      	b.n	800a4bc <_scanf_float+0x2e8>
 800a4fe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a502:	6923      	ldr	r3, [r4, #16]
 800a504:	2965      	cmp	r1, #101	@ 0x65
 800a506:	f103 33ff 	add.w	r3, r3, #4294967295
 800a50a:	f106 35ff 	add.w	r5, r6, #4294967295
 800a50e:	6123      	str	r3, [r4, #16]
 800a510:	d00c      	beq.n	800a52c <_scanf_float+0x358>
 800a512:	2945      	cmp	r1, #69	@ 0x45
 800a514:	d00a      	beq.n	800a52c <_scanf_float+0x358>
 800a516:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a51a:	463a      	mov	r2, r7
 800a51c:	4640      	mov	r0, r8
 800a51e:	4798      	blx	r3
 800a520:	6923      	ldr	r3, [r4, #16]
 800a522:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a526:	3b01      	subs	r3, #1
 800a528:	1eb5      	subs	r5, r6, #2
 800a52a:	6123      	str	r3, [r4, #16]
 800a52c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a530:	463a      	mov	r2, r7
 800a532:	4640      	mov	r0, r8
 800a534:	4798      	blx	r3
 800a536:	462e      	mov	r6, r5
 800a538:	6822      	ldr	r2, [r4, #0]
 800a53a:	f012 0210 	ands.w	r2, r2, #16
 800a53e:	d001      	beq.n	800a544 <_scanf_float+0x370>
 800a540:	2000      	movs	r0, #0
 800a542:	e68b      	b.n	800a25c <_scanf_float+0x88>
 800a544:	7032      	strb	r2, [r6, #0]
 800a546:	6823      	ldr	r3, [r4, #0]
 800a548:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a54c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a550:	d11c      	bne.n	800a58c <_scanf_float+0x3b8>
 800a552:	9b02      	ldr	r3, [sp, #8]
 800a554:	454b      	cmp	r3, r9
 800a556:	eba3 0209 	sub.w	r2, r3, r9
 800a55a:	d123      	bne.n	800a5a4 <_scanf_float+0x3d0>
 800a55c:	9901      	ldr	r1, [sp, #4]
 800a55e:	2200      	movs	r2, #0
 800a560:	4640      	mov	r0, r8
 800a562:	f002 fc3d 	bl	800cde0 <_strtod_r>
 800a566:	9b03      	ldr	r3, [sp, #12]
 800a568:	6821      	ldr	r1, [r4, #0]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f011 0f02 	tst.w	r1, #2
 800a570:	ec57 6b10 	vmov	r6, r7, d0
 800a574:	f103 0204 	add.w	r2, r3, #4
 800a578:	d01f      	beq.n	800a5ba <_scanf_float+0x3e6>
 800a57a:	9903      	ldr	r1, [sp, #12]
 800a57c:	600a      	str	r2, [r1, #0]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	e9c3 6700 	strd	r6, r7, [r3]
 800a584:	68e3      	ldr	r3, [r4, #12]
 800a586:	3301      	adds	r3, #1
 800a588:	60e3      	str	r3, [r4, #12]
 800a58a:	e7d9      	b.n	800a540 <_scanf_float+0x36c>
 800a58c:	9b04      	ldr	r3, [sp, #16]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d0e4      	beq.n	800a55c <_scanf_float+0x388>
 800a592:	9905      	ldr	r1, [sp, #20]
 800a594:	230a      	movs	r3, #10
 800a596:	3101      	adds	r1, #1
 800a598:	4640      	mov	r0, r8
 800a59a:	f002 fca1 	bl	800cee0 <_strtol_r>
 800a59e:	9b04      	ldr	r3, [sp, #16]
 800a5a0:	9e05      	ldr	r6, [sp, #20]
 800a5a2:	1ac2      	subs	r2, r0, r3
 800a5a4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a5a8:	429e      	cmp	r6, r3
 800a5aa:	bf28      	it	cs
 800a5ac:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a5b0:	4910      	ldr	r1, [pc, #64]	@ (800a5f4 <_scanf_float+0x420>)
 800a5b2:	4630      	mov	r0, r6
 800a5b4:	f000 f8e4 	bl	800a780 <siprintf>
 800a5b8:	e7d0      	b.n	800a55c <_scanf_float+0x388>
 800a5ba:	f011 0f04 	tst.w	r1, #4
 800a5be:	9903      	ldr	r1, [sp, #12]
 800a5c0:	600a      	str	r2, [r1, #0]
 800a5c2:	d1dc      	bne.n	800a57e <_scanf_float+0x3aa>
 800a5c4:	681d      	ldr	r5, [r3, #0]
 800a5c6:	4632      	mov	r2, r6
 800a5c8:	463b      	mov	r3, r7
 800a5ca:	4630      	mov	r0, r6
 800a5cc:	4639      	mov	r1, r7
 800a5ce:	f7f6 faad 	bl	8000b2c <__aeabi_dcmpun>
 800a5d2:	b128      	cbz	r0, 800a5e0 <_scanf_float+0x40c>
 800a5d4:	4808      	ldr	r0, [pc, #32]	@ (800a5f8 <_scanf_float+0x424>)
 800a5d6:	f000 f9fd 	bl	800a9d4 <nanf>
 800a5da:	ed85 0a00 	vstr	s0, [r5]
 800a5de:	e7d1      	b.n	800a584 <_scanf_float+0x3b0>
 800a5e0:	4630      	mov	r0, r6
 800a5e2:	4639      	mov	r1, r7
 800a5e4:	f7f6 fb00 	bl	8000be8 <__aeabi_d2f>
 800a5e8:	6028      	str	r0, [r5, #0]
 800a5ea:	e7cb      	b.n	800a584 <_scanf_float+0x3b0>
 800a5ec:	f04f 0900 	mov.w	r9, #0
 800a5f0:	e629      	b.n	800a246 <_scanf_float+0x72>
 800a5f2:	bf00      	nop
 800a5f4:	0800ef22 	.word	0x0800ef22
 800a5f8:	0800f2d8 	.word	0x0800f2d8

0800a5fc <std>:
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	b510      	push	{r4, lr}
 800a600:	4604      	mov	r4, r0
 800a602:	e9c0 3300 	strd	r3, r3, [r0]
 800a606:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a60a:	6083      	str	r3, [r0, #8]
 800a60c:	8181      	strh	r1, [r0, #12]
 800a60e:	6643      	str	r3, [r0, #100]	@ 0x64
 800a610:	81c2      	strh	r2, [r0, #14]
 800a612:	6183      	str	r3, [r0, #24]
 800a614:	4619      	mov	r1, r3
 800a616:	2208      	movs	r2, #8
 800a618:	305c      	adds	r0, #92	@ 0x5c
 800a61a:	f000 f940 	bl	800a89e <memset>
 800a61e:	4b0d      	ldr	r3, [pc, #52]	@ (800a654 <std+0x58>)
 800a620:	6263      	str	r3, [r4, #36]	@ 0x24
 800a622:	4b0d      	ldr	r3, [pc, #52]	@ (800a658 <std+0x5c>)
 800a624:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a626:	4b0d      	ldr	r3, [pc, #52]	@ (800a65c <std+0x60>)
 800a628:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a62a:	4b0d      	ldr	r3, [pc, #52]	@ (800a660 <std+0x64>)
 800a62c:	6323      	str	r3, [r4, #48]	@ 0x30
 800a62e:	4b0d      	ldr	r3, [pc, #52]	@ (800a664 <std+0x68>)
 800a630:	6224      	str	r4, [r4, #32]
 800a632:	429c      	cmp	r4, r3
 800a634:	d006      	beq.n	800a644 <std+0x48>
 800a636:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a63a:	4294      	cmp	r4, r2
 800a63c:	d002      	beq.n	800a644 <std+0x48>
 800a63e:	33d0      	adds	r3, #208	@ 0xd0
 800a640:	429c      	cmp	r4, r3
 800a642:	d105      	bne.n	800a650 <std+0x54>
 800a644:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a64c:	f000 b9b6 	b.w	800a9bc <__retarget_lock_init_recursive>
 800a650:	bd10      	pop	{r4, pc}
 800a652:	bf00      	nop
 800a654:	0800a815 	.word	0x0800a815
 800a658:	0800a83b 	.word	0x0800a83b
 800a65c:	0800a873 	.word	0x0800a873
 800a660:	0800a897 	.word	0x0800a897
 800a664:	20000e04 	.word	0x20000e04

0800a668 <stdio_exit_handler>:
 800a668:	4a02      	ldr	r2, [pc, #8]	@ (800a674 <stdio_exit_handler+0xc>)
 800a66a:	4903      	ldr	r1, [pc, #12]	@ (800a678 <stdio_exit_handler+0x10>)
 800a66c:	4803      	ldr	r0, [pc, #12]	@ (800a67c <stdio_exit_handler+0x14>)
 800a66e:	f000 b869 	b.w	800a744 <_fwalk_sglue>
 800a672:	bf00      	nop
 800a674:	20000040 	.word	0x20000040
 800a678:	0800d8d1 	.word	0x0800d8d1
 800a67c:	20000050 	.word	0x20000050

0800a680 <cleanup_stdio>:
 800a680:	6841      	ldr	r1, [r0, #4]
 800a682:	4b0c      	ldr	r3, [pc, #48]	@ (800a6b4 <cleanup_stdio+0x34>)
 800a684:	4299      	cmp	r1, r3
 800a686:	b510      	push	{r4, lr}
 800a688:	4604      	mov	r4, r0
 800a68a:	d001      	beq.n	800a690 <cleanup_stdio+0x10>
 800a68c:	f003 f920 	bl	800d8d0 <_fflush_r>
 800a690:	68a1      	ldr	r1, [r4, #8]
 800a692:	4b09      	ldr	r3, [pc, #36]	@ (800a6b8 <cleanup_stdio+0x38>)
 800a694:	4299      	cmp	r1, r3
 800a696:	d002      	beq.n	800a69e <cleanup_stdio+0x1e>
 800a698:	4620      	mov	r0, r4
 800a69a:	f003 f919 	bl	800d8d0 <_fflush_r>
 800a69e:	68e1      	ldr	r1, [r4, #12]
 800a6a0:	4b06      	ldr	r3, [pc, #24]	@ (800a6bc <cleanup_stdio+0x3c>)
 800a6a2:	4299      	cmp	r1, r3
 800a6a4:	d004      	beq.n	800a6b0 <cleanup_stdio+0x30>
 800a6a6:	4620      	mov	r0, r4
 800a6a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6ac:	f003 b910 	b.w	800d8d0 <_fflush_r>
 800a6b0:	bd10      	pop	{r4, pc}
 800a6b2:	bf00      	nop
 800a6b4:	20000e04 	.word	0x20000e04
 800a6b8:	20000e6c 	.word	0x20000e6c
 800a6bc:	20000ed4 	.word	0x20000ed4

0800a6c0 <global_stdio_init.part.0>:
 800a6c0:	b510      	push	{r4, lr}
 800a6c2:	4b0b      	ldr	r3, [pc, #44]	@ (800a6f0 <global_stdio_init.part.0+0x30>)
 800a6c4:	4c0b      	ldr	r4, [pc, #44]	@ (800a6f4 <global_stdio_init.part.0+0x34>)
 800a6c6:	4a0c      	ldr	r2, [pc, #48]	@ (800a6f8 <global_stdio_init.part.0+0x38>)
 800a6c8:	601a      	str	r2, [r3, #0]
 800a6ca:	4620      	mov	r0, r4
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	2104      	movs	r1, #4
 800a6d0:	f7ff ff94 	bl	800a5fc <std>
 800a6d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a6d8:	2201      	movs	r2, #1
 800a6da:	2109      	movs	r1, #9
 800a6dc:	f7ff ff8e 	bl	800a5fc <std>
 800a6e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a6e4:	2202      	movs	r2, #2
 800a6e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6ea:	2112      	movs	r1, #18
 800a6ec:	f7ff bf86 	b.w	800a5fc <std>
 800a6f0:	20000f3c 	.word	0x20000f3c
 800a6f4:	20000e04 	.word	0x20000e04
 800a6f8:	0800a669 	.word	0x0800a669

0800a6fc <__sfp_lock_acquire>:
 800a6fc:	4801      	ldr	r0, [pc, #4]	@ (800a704 <__sfp_lock_acquire+0x8>)
 800a6fe:	f000 b95e 	b.w	800a9be <__retarget_lock_acquire_recursive>
 800a702:	bf00      	nop
 800a704:	20000f45 	.word	0x20000f45

0800a708 <__sfp_lock_release>:
 800a708:	4801      	ldr	r0, [pc, #4]	@ (800a710 <__sfp_lock_release+0x8>)
 800a70a:	f000 b959 	b.w	800a9c0 <__retarget_lock_release_recursive>
 800a70e:	bf00      	nop
 800a710:	20000f45 	.word	0x20000f45

0800a714 <__sinit>:
 800a714:	b510      	push	{r4, lr}
 800a716:	4604      	mov	r4, r0
 800a718:	f7ff fff0 	bl	800a6fc <__sfp_lock_acquire>
 800a71c:	6a23      	ldr	r3, [r4, #32]
 800a71e:	b11b      	cbz	r3, 800a728 <__sinit+0x14>
 800a720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a724:	f7ff bff0 	b.w	800a708 <__sfp_lock_release>
 800a728:	4b04      	ldr	r3, [pc, #16]	@ (800a73c <__sinit+0x28>)
 800a72a:	6223      	str	r3, [r4, #32]
 800a72c:	4b04      	ldr	r3, [pc, #16]	@ (800a740 <__sinit+0x2c>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d1f5      	bne.n	800a720 <__sinit+0xc>
 800a734:	f7ff ffc4 	bl	800a6c0 <global_stdio_init.part.0>
 800a738:	e7f2      	b.n	800a720 <__sinit+0xc>
 800a73a:	bf00      	nop
 800a73c:	0800a681 	.word	0x0800a681
 800a740:	20000f3c 	.word	0x20000f3c

0800a744 <_fwalk_sglue>:
 800a744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a748:	4607      	mov	r7, r0
 800a74a:	4688      	mov	r8, r1
 800a74c:	4614      	mov	r4, r2
 800a74e:	2600      	movs	r6, #0
 800a750:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a754:	f1b9 0901 	subs.w	r9, r9, #1
 800a758:	d505      	bpl.n	800a766 <_fwalk_sglue+0x22>
 800a75a:	6824      	ldr	r4, [r4, #0]
 800a75c:	2c00      	cmp	r4, #0
 800a75e:	d1f7      	bne.n	800a750 <_fwalk_sglue+0xc>
 800a760:	4630      	mov	r0, r6
 800a762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a766:	89ab      	ldrh	r3, [r5, #12]
 800a768:	2b01      	cmp	r3, #1
 800a76a:	d907      	bls.n	800a77c <_fwalk_sglue+0x38>
 800a76c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a770:	3301      	adds	r3, #1
 800a772:	d003      	beq.n	800a77c <_fwalk_sglue+0x38>
 800a774:	4629      	mov	r1, r5
 800a776:	4638      	mov	r0, r7
 800a778:	47c0      	blx	r8
 800a77a:	4306      	orrs	r6, r0
 800a77c:	3568      	adds	r5, #104	@ 0x68
 800a77e:	e7e9      	b.n	800a754 <_fwalk_sglue+0x10>

0800a780 <siprintf>:
 800a780:	b40e      	push	{r1, r2, r3}
 800a782:	b500      	push	{lr}
 800a784:	b09c      	sub	sp, #112	@ 0x70
 800a786:	ab1d      	add	r3, sp, #116	@ 0x74
 800a788:	9002      	str	r0, [sp, #8]
 800a78a:	9006      	str	r0, [sp, #24]
 800a78c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a790:	4809      	ldr	r0, [pc, #36]	@ (800a7b8 <siprintf+0x38>)
 800a792:	9107      	str	r1, [sp, #28]
 800a794:	9104      	str	r1, [sp, #16]
 800a796:	4909      	ldr	r1, [pc, #36]	@ (800a7bc <siprintf+0x3c>)
 800a798:	f853 2b04 	ldr.w	r2, [r3], #4
 800a79c:	9105      	str	r1, [sp, #20]
 800a79e:	6800      	ldr	r0, [r0, #0]
 800a7a0:	9301      	str	r3, [sp, #4]
 800a7a2:	a902      	add	r1, sp, #8
 800a7a4:	f002 fbfa 	bl	800cf9c <_svfiprintf_r>
 800a7a8:	9b02      	ldr	r3, [sp, #8]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	701a      	strb	r2, [r3, #0]
 800a7ae:	b01c      	add	sp, #112	@ 0x70
 800a7b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7b4:	b003      	add	sp, #12
 800a7b6:	4770      	bx	lr
 800a7b8:	2000004c 	.word	0x2000004c
 800a7bc:	ffff0208 	.word	0xffff0208

0800a7c0 <siscanf>:
 800a7c0:	b40e      	push	{r1, r2, r3}
 800a7c2:	b530      	push	{r4, r5, lr}
 800a7c4:	b09c      	sub	sp, #112	@ 0x70
 800a7c6:	ac1f      	add	r4, sp, #124	@ 0x7c
 800a7c8:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800a7cc:	f854 5b04 	ldr.w	r5, [r4], #4
 800a7d0:	f8ad 2014 	strh.w	r2, [sp, #20]
 800a7d4:	9002      	str	r0, [sp, #8]
 800a7d6:	9006      	str	r0, [sp, #24]
 800a7d8:	f7f5 fd4a 	bl	8000270 <strlen>
 800a7dc:	4b0b      	ldr	r3, [pc, #44]	@ (800a80c <siscanf+0x4c>)
 800a7de:	9003      	str	r0, [sp, #12]
 800a7e0:	9007      	str	r0, [sp, #28]
 800a7e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a7e4:	480a      	ldr	r0, [pc, #40]	@ (800a810 <siscanf+0x50>)
 800a7e6:	9401      	str	r4, [sp, #4]
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a7ec:	9314      	str	r3, [sp, #80]	@ 0x50
 800a7ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a7f2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a7f6:	462a      	mov	r2, r5
 800a7f8:	4623      	mov	r3, r4
 800a7fa:	a902      	add	r1, sp, #8
 800a7fc:	6800      	ldr	r0, [r0, #0]
 800a7fe:	f002 fd21 	bl	800d244 <__ssvfiscanf_r>
 800a802:	b01c      	add	sp, #112	@ 0x70
 800a804:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a808:	b003      	add	sp, #12
 800a80a:	4770      	bx	lr
 800a80c:	0800a837 	.word	0x0800a837
 800a810:	2000004c 	.word	0x2000004c

0800a814 <__sread>:
 800a814:	b510      	push	{r4, lr}
 800a816:	460c      	mov	r4, r1
 800a818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a81c:	f000 f880 	bl	800a920 <_read_r>
 800a820:	2800      	cmp	r0, #0
 800a822:	bfab      	itete	ge
 800a824:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a826:	89a3      	ldrhlt	r3, [r4, #12]
 800a828:	181b      	addge	r3, r3, r0
 800a82a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a82e:	bfac      	ite	ge
 800a830:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a832:	81a3      	strhlt	r3, [r4, #12]
 800a834:	bd10      	pop	{r4, pc}

0800a836 <__seofread>:
 800a836:	2000      	movs	r0, #0
 800a838:	4770      	bx	lr

0800a83a <__swrite>:
 800a83a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a83e:	461f      	mov	r7, r3
 800a840:	898b      	ldrh	r3, [r1, #12]
 800a842:	05db      	lsls	r3, r3, #23
 800a844:	4605      	mov	r5, r0
 800a846:	460c      	mov	r4, r1
 800a848:	4616      	mov	r6, r2
 800a84a:	d505      	bpl.n	800a858 <__swrite+0x1e>
 800a84c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a850:	2302      	movs	r3, #2
 800a852:	2200      	movs	r2, #0
 800a854:	f000 f852 	bl	800a8fc <_lseek_r>
 800a858:	89a3      	ldrh	r3, [r4, #12]
 800a85a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a85e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a862:	81a3      	strh	r3, [r4, #12]
 800a864:	4632      	mov	r2, r6
 800a866:	463b      	mov	r3, r7
 800a868:	4628      	mov	r0, r5
 800a86a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a86e:	f000 b869 	b.w	800a944 <_write_r>

0800a872 <__sseek>:
 800a872:	b510      	push	{r4, lr}
 800a874:	460c      	mov	r4, r1
 800a876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a87a:	f000 f83f 	bl	800a8fc <_lseek_r>
 800a87e:	1c43      	adds	r3, r0, #1
 800a880:	89a3      	ldrh	r3, [r4, #12]
 800a882:	bf15      	itete	ne
 800a884:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a886:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a88a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a88e:	81a3      	strheq	r3, [r4, #12]
 800a890:	bf18      	it	ne
 800a892:	81a3      	strhne	r3, [r4, #12]
 800a894:	bd10      	pop	{r4, pc}

0800a896 <__sclose>:
 800a896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a89a:	f000 b81f 	b.w	800a8dc <_close_r>

0800a89e <memset>:
 800a89e:	4402      	add	r2, r0
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d100      	bne.n	800a8a8 <memset+0xa>
 800a8a6:	4770      	bx	lr
 800a8a8:	f803 1b01 	strb.w	r1, [r3], #1
 800a8ac:	e7f9      	b.n	800a8a2 <memset+0x4>

0800a8ae <strncmp>:
 800a8ae:	b510      	push	{r4, lr}
 800a8b0:	b16a      	cbz	r2, 800a8ce <strncmp+0x20>
 800a8b2:	3901      	subs	r1, #1
 800a8b4:	1884      	adds	r4, r0, r2
 800a8b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8ba:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d103      	bne.n	800a8ca <strncmp+0x1c>
 800a8c2:	42a0      	cmp	r0, r4
 800a8c4:	d001      	beq.n	800a8ca <strncmp+0x1c>
 800a8c6:	2a00      	cmp	r2, #0
 800a8c8:	d1f5      	bne.n	800a8b6 <strncmp+0x8>
 800a8ca:	1ad0      	subs	r0, r2, r3
 800a8cc:	bd10      	pop	{r4, pc}
 800a8ce:	4610      	mov	r0, r2
 800a8d0:	e7fc      	b.n	800a8cc <strncmp+0x1e>
	...

0800a8d4 <_localeconv_r>:
 800a8d4:	4800      	ldr	r0, [pc, #0]	@ (800a8d8 <_localeconv_r+0x4>)
 800a8d6:	4770      	bx	lr
 800a8d8:	2000018c 	.word	0x2000018c

0800a8dc <_close_r>:
 800a8dc:	b538      	push	{r3, r4, r5, lr}
 800a8de:	4d06      	ldr	r5, [pc, #24]	@ (800a8f8 <_close_r+0x1c>)
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	4604      	mov	r4, r0
 800a8e4:	4608      	mov	r0, r1
 800a8e6:	602b      	str	r3, [r5, #0]
 800a8e8:	f7f7 fdaa 	bl	8002440 <_close>
 800a8ec:	1c43      	adds	r3, r0, #1
 800a8ee:	d102      	bne.n	800a8f6 <_close_r+0x1a>
 800a8f0:	682b      	ldr	r3, [r5, #0]
 800a8f2:	b103      	cbz	r3, 800a8f6 <_close_r+0x1a>
 800a8f4:	6023      	str	r3, [r4, #0]
 800a8f6:	bd38      	pop	{r3, r4, r5, pc}
 800a8f8:	20000f40 	.word	0x20000f40

0800a8fc <_lseek_r>:
 800a8fc:	b538      	push	{r3, r4, r5, lr}
 800a8fe:	4d07      	ldr	r5, [pc, #28]	@ (800a91c <_lseek_r+0x20>)
 800a900:	4604      	mov	r4, r0
 800a902:	4608      	mov	r0, r1
 800a904:	4611      	mov	r1, r2
 800a906:	2200      	movs	r2, #0
 800a908:	602a      	str	r2, [r5, #0]
 800a90a:	461a      	mov	r2, r3
 800a90c:	f7f7 fdbf 	bl	800248e <_lseek>
 800a910:	1c43      	adds	r3, r0, #1
 800a912:	d102      	bne.n	800a91a <_lseek_r+0x1e>
 800a914:	682b      	ldr	r3, [r5, #0]
 800a916:	b103      	cbz	r3, 800a91a <_lseek_r+0x1e>
 800a918:	6023      	str	r3, [r4, #0]
 800a91a:	bd38      	pop	{r3, r4, r5, pc}
 800a91c:	20000f40 	.word	0x20000f40

0800a920 <_read_r>:
 800a920:	b538      	push	{r3, r4, r5, lr}
 800a922:	4d07      	ldr	r5, [pc, #28]	@ (800a940 <_read_r+0x20>)
 800a924:	4604      	mov	r4, r0
 800a926:	4608      	mov	r0, r1
 800a928:	4611      	mov	r1, r2
 800a92a:	2200      	movs	r2, #0
 800a92c:	602a      	str	r2, [r5, #0]
 800a92e:	461a      	mov	r2, r3
 800a930:	f7f7 fd4d 	bl	80023ce <_read>
 800a934:	1c43      	adds	r3, r0, #1
 800a936:	d102      	bne.n	800a93e <_read_r+0x1e>
 800a938:	682b      	ldr	r3, [r5, #0]
 800a93a:	b103      	cbz	r3, 800a93e <_read_r+0x1e>
 800a93c:	6023      	str	r3, [r4, #0]
 800a93e:	bd38      	pop	{r3, r4, r5, pc}
 800a940:	20000f40 	.word	0x20000f40

0800a944 <_write_r>:
 800a944:	b538      	push	{r3, r4, r5, lr}
 800a946:	4d07      	ldr	r5, [pc, #28]	@ (800a964 <_write_r+0x20>)
 800a948:	4604      	mov	r4, r0
 800a94a:	4608      	mov	r0, r1
 800a94c:	4611      	mov	r1, r2
 800a94e:	2200      	movs	r2, #0
 800a950:	602a      	str	r2, [r5, #0]
 800a952:	461a      	mov	r2, r3
 800a954:	f7f7 fd58 	bl	8002408 <_write>
 800a958:	1c43      	adds	r3, r0, #1
 800a95a:	d102      	bne.n	800a962 <_write_r+0x1e>
 800a95c:	682b      	ldr	r3, [r5, #0]
 800a95e:	b103      	cbz	r3, 800a962 <_write_r+0x1e>
 800a960:	6023      	str	r3, [r4, #0]
 800a962:	bd38      	pop	{r3, r4, r5, pc}
 800a964:	20000f40 	.word	0x20000f40

0800a968 <__errno>:
 800a968:	4b01      	ldr	r3, [pc, #4]	@ (800a970 <__errno+0x8>)
 800a96a:	6818      	ldr	r0, [r3, #0]
 800a96c:	4770      	bx	lr
 800a96e:	bf00      	nop
 800a970:	2000004c 	.word	0x2000004c

0800a974 <__libc_init_array>:
 800a974:	b570      	push	{r4, r5, r6, lr}
 800a976:	4d0d      	ldr	r5, [pc, #52]	@ (800a9ac <__libc_init_array+0x38>)
 800a978:	4c0d      	ldr	r4, [pc, #52]	@ (800a9b0 <__libc_init_array+0x3c>)
 800a97a:	1b64      	subs	r4, r4, r5
 800a97c:	10a4      	asrs	r4, r4, #2
 800a97e:	2600      	movs	r6, #0
 800a980:	42a6      	cmp	r6, r4
 800a982:	d109      	bne.n	800a998 <__libc_init_array+0x24>
 800a984:	4d0b      	ldr	r5, [pc, #44]	@ (800a9b4 <__libc_init_array+0x40>)
 800a986:	4c0c      	ldr	r4, [pc, #48]	@ (800a9b8 <__libc_init_array+0x44>)
 800a988:	f003 ffac 	bl	800e8e4 <_init>
 800a98c:	1b64      	subs	r4, r4, r5
 800a98e:	10a4      	asrs	r4, r4, #2
 800a990:	2600      	movs	r6, #0
 800a992:	42a6      	cmp	r6, r4
 800a994:	d105      	bne.n	800a9a2 <__libc_init_array+0x2e>
 800a996:	bd70      	pop	{r4, r5, r6, pc}
 800a998:	f855 3b04 	ldr.w	r3, [r5], #4
 800a99c:	4798      	blx	r3
 800a99e:	3601      	adds	r6, #1
 800a9a0:	e7ee      	b.n	800a980 <__libc_init_array+0xc>
 800a9a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9a6:	4798      	blx	r3
 800a9a8:	3601      	adds	r6, #1
 800a9aa:	e7f2      	b.n	800a992 <__libc_init_array+0x1e>
 800a9ac:	0800f344 	.word	0x0800f344
 800a9b0:	0800f344 	.word	0x0800f344
 800a9b4:	0800f344 	.word	0x0800f344
 800a9b8:	0800f348 	.word	0x0800f348

0800a9bc <__retarget_lock_init_recursive>:
 800a9bc:	4770      	bx	lr

0800a9be <__retarget_lock_acquire_recursive>:
 800a9be:	4770      	bx	lr

0800a9c0 <__retarget_lock_release_recursive>:
 800a9c0:	4770      	bx	lr

0800a9c2 <strcpy>:
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9c8:	f803 2b01 	strb.w	r2, [r3], #1
 800a9cc:	2a00      	cmp	r2, #0
 800a9ce:	d1f9      	bne.n	800a9c4 <strcpy+0x2>
 800a9d0:	4770      	bx	lr
	...

0800a9d4 <nanf>:
 800a9d4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a9dc <nanf+0x8>
 800a9d8:	4770      	bx	lr
 800a9da:	bf00      	nop
 800a9dc:	7fc00000 	.word	0x7fc00000

0800a9e0 <quorem>:
 800a9e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e4:	6903      	ldr	r3, [r0, #16]
 800a9e6:	690c      	ldr	r4, [r1, #16]
 800a9e8:	42a3      	cmp	r3, r4
 800a9ea:	4607      	mov	r7, r0
 800a9ec:	db7e      	blt.n	800aaec <quorem+0x10c>
 800a9ee:	3c01      	subs	r4, #1
 800a9f0:	f101 0814 	add.w	r8, r1, #20
 800a9f4:	00a3      	lsls	r3, r4, #2
 800a9f6:	f100 0514 	add.w	r5, r0, #20
 800a9fa:	9300      	str	r3, [sp, #0]
 800a9fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa00:	9301      	str	r3, [sp, #4]
 800aa02:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aa06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aa12:	fbb2 f6f3 	udiv	r6, r2, r3
 800aa16:	d32e      	bcc.n	800aa76 <quorem+0x96>
 800aa18:	f04f 0a00 	mov.w	sl, #0
 800aa1c:	46c4      	mov	ip, r8
 800aa1e:	46ae      	mov	lr, r5
 800aa20:	46d3      	mov	fp, sl
 800aa22:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aa26:	b298      	uxth	r0, r3
 800aa28:	fb06 a000 	mla	r0, r6, r0, sl
 800aa2c:	0c02      	lsrs	r2, r0, #16
 800aa2e:	0c1b      	lsrs	r3, r3, #16
 800aa30:	fb06 2303 	mla	r3, r6, r3, r2
 800aa34:	f8de 2000 	ldr.w	r2, [lr]
 800aa38:	b280      	uxth	r0, r0
 800aa3a:	b292      	uxth	r2, r2
 800aa3c:	1a12      	subs	r2, r2, r0
 800aa3e:	445a      	add	r2, fp
 800aa40:	f8de 0000 	ldr.w	r0, [lr]
 800aa44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa48:	b29b      	uxth	r3, r3
 800aa4a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800aa4e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800aa52:	b292      	uxth	r2, r2
 800aa54:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800aa58:	45e1      	cmp	r9, ip
 800aa5a:	f84e 2b04 	str.w	r2, [lr], #4
 800aa5e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800aa62:	d2de      	bcs.n	800aa22 <quorem+0x42>
 800aa64:	9b00      	ldr	r3, [sp, #0]
 800aa66:	58eb      	ldr	r3, [r5, r3]
 800aa68:	b92b      	cbnz	r3, 800aa76 <quorem+0x96>
 800aa6a:	9b01      	ldr	r3, [sp, #4]
 800aa6c:	3b04      	subs	r3, #4
 800aa6e:	429d      	cmp	r5, r3
 800aa70:	461a      	mov	r2, r3
 800aa72:	d32f      	bcc.n	800aad4 <quorem+0xf4>
 800aa74:	613c      	str	r4, [r7, #16]
 800aa76:	4638      	mov	r0, r7
 800aa78:	f001 f9c2 	bl	800be00 <__mcmp>
 800aa7c:	2800      	cmp	r0, #0
 800aa7e:	db25      	blt.n	800aacc <quorem+0xec>
 800aa80:	4629      	mov	r1, r5
 800aa82:	2000      	movs	r0, #0
 800aa84:	f858 2b04 	ldr.w	r2, [r8], #4
 800aa88:	f8d1 c000 	ldr.w	ip, [r1]
 800aa8c:	fa1f fe82 	uxth.w	lr, r2
 800aa90:	fa1f f38c 	uxth.w	r3, ip
 800aa94:	eba3 030e 	sub.w	r3, r3, lr
 800aa98:	4403      	add	r3, r0
 800aa9a:	0c12      	lsrs	r2, r2, #16
 800aa9c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800aaa0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800aaa4:	b29b      	uxth	r3, r3
 800aaa6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aaaa:	45c1      	cmp	r9, r8
 800aaac:	f841 3b04 	str.w	r3, [r1], #4
 800aab0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800aab4:	d2e6      	bcs.n	800aa84 <quorem+0xa4>
 800aab6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aaba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aabe:	b922      	cbnz	r2, 800aaca <quorem+0xea>
 800aac0:	3b04      	subs	r3, #4
 800aac2:	429d      	cmp	r5, r3
 800aac4:	461a      	mov	r2, r3
 800aac6:	d30b      	bcc.n	800aae0 <quorem+0x100>
 800aac8:	613c      	str	r4, [r7, #16]
 800aaca:	3601      	adds	r6, #1
 800aacc:	4630      	mov	r0, r6
 800aace:	b003      	add	sp, #12
 800aad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aad4:	6812      	ldr	r2, [r2, #0]
 800aad6:	3b04      	subs	r3, #4
 800aad8:	2a00      	cmp	r2, #0
 800aada:	d1cb      	bne.n	800aa74 <quorem+0x94>
 800aadc:	3c01      	subs	r4, #1
 800aade:	e7c6      	b.n	800aa6e <quorem+0x8e>
 800aae0:	6812      	ldr	r2, [r2, #0]
 800aae2:	3b04      	subs	r3, #4
 800aae4:	2a00      	cmp	r2, #0
 800aae6:	d1ef      	bne.n	800aac8 <quorem+0xe8>
 800aae8:	3c01      	subs	r4, #1
 800aaea:	e7ea      	b.n	800aac2 <quorem+0xe2>
 800aaec:	2000      	movs	r0, #0
 800aaee:	e7ee      	b.n	800aace <quorem+0xee>

0800aaf0 <_dtoa_r>:
 800aaf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaf4:	69c7      	ldr	r7, [r0, #28]
 800aaf6:	b099      	sub	sp, #100	@ 0x64
 800aaf8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800aafc:	ec55 4b10 	vmov	r4, r5, d0
 800ab00:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ab02:	9109      	str	r1, [sp, #36]	@ 0x24
 800ab04:	4683      	mov	fp, r0
 800ab06:	920e      	str	r2, [sp, #56]	@ 0x38
 800ab08:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ab0a:	b97f      	cbnz	r7, 800ab2c <_dtoa_r+0x3c>
 800ab0c:	2010      	movs	r0, #16
 800ab0e:	f000 fdfd 	bl	800b70c <malloc>
 800ab12:	4602      	mov	r2, r0
 800ab14:	f8cb 001c 	str.w	r0, [fp, #28]
 800ab18:	b920      	cbnz	r0, 800ab24 <_dtoa_r+0x34>
 800ab1a:	4ba7      	ldr	r3, [pc, #668]	@ (800adb8 <_dtoa_r+0x2c8>)
 800ab1c:	21ef      	movs	r1, #239	@ 0xef
 800ab1e:	48a7      	ldr	r0, [pc, #668]	@ (800adbc <_dtoa_r+0x2cc>)
 800ab20:	f002 ffb2 	bl	800da88 <__assert_func>
 800ab24:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ab28:	6007      	str	r7, [r0, #0]
 800ab2a:	60c7      	str	r7, [r0, #12]
 800ab2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ab30:	6819      	ldr	r1, [r3, #0]
 800ab32:	b159      	cbz	r1, 800ab4c <_dtoa_r+0x5c>
 800ab34:	685a      	ldr	r2, [r3, #4]
 800ab36:	604a      	str	r2, [r1, #4]
 800ab38:	2301      	movs	r3, #1
 800ab3a:	4093      	lsls	r3, r2
 800ab3c:	608b      	str	r3, [r1, #8]
 800ab3e:	4658      	mov	r0, fp
 800ab40:	f000 feda 	bl	800b8f8 <_Bfree>
 800ab44:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	601a      	str	r2, [r3, #0]
 800ab4c:	1e2b      	subs	r3, r5, #0
 800ab4e:	bfb9      	ittee	lt
 800ab50:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ab54:	9303      	strlt	r3, [sp, #12]
 800ab56:	2300      	movge	r3, #0
 800ab58:	6033      	strge	r3, [r6, #0]
 800ab5a:	9f03      	ldr	r7, [sp, #12]
 800ab5c:	4b98      	ldr	r3, [pc, #608]	@ (800adc0 <_dtoa_r+0x2d0>)
 800ab5e:	bfbc      	itt	lt
 800ab60:	2201      	movlt	r2, #1
 800ab62:	6032      	strlt	r2, [r6, #0]
 800ab64:	43bb      	bics	r3, r7
 800ab66:	d112      	bne.n	800ab8e <_dtoa_r+0x9e>
 800ab68:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ab6a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ab6e:	6013      	str	r3, [r2, #0]
 800ab70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ab74:	4323      	orrs	r3, r4
 800ab76:	f000 854d 	beq.w	800b614 <_dtoa_r+0xb24>
 800ab7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ab7c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800add4 <_dtoa_r+0x2e4>
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	f000 854f 	beq.w	800b624 <_dtoa_r+0xb34>
 800ab86:	f10a 0303 	add.w	r3, sl, #3
 800ab8a:	f000 bd49 	b.w	800b620 <_dtoa_r+0xb30>
 800ab8e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ab92:	2200      	movs	r2, #0
 800ab94:	ec51 0b17 	vmov	r0, r1, d7
 800ab98:	2300      	movs	r3, #0
 800ab9a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ab9e:	f7f5 ff93 	bl	8000ac8 <__aeabi_dcmpeq>
 800aba2:	4680      	mov	r8, r0
 800aba4:	b158      	cbz	r0, 800abbe <_dtoa_r+0xce>
 800aba6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800aba8:	2301      	movs	r3, #1
 800abaa:	6013      	str	r3, [r2, #0]
 800abac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800abae:	b113      	cbz	r3, 800abb6 <_dtoa_r+0xc6>
 800abb0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800abb2:	4b84      	ldr	r3, [pc, #528]	@ (800adc4 <_dtoa_r+0x2d4>)
 800abb4:	6013      	str	r3, [r2, #0]
 800abb6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800add8 <_dtoa_r+0x2e8>
 800abba:	f000 bd33 	b.w	800b624 <_dtoa_r+0xb34>
 800abbe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800abc2:	aa16      	add	r2, sp, #88	@ 0x58
 800abc4:	a917      	add	r1, sp, #92	@ 0x5c
 800abc6:	4658      	mov	r0, fp
 800abc8:	f001 fa3a 	bl	800c040 <__d2b>
 800abcc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800abd0:	4681      	mov	r9, r0
 800abd2:	2e00      	cmp	r6, #0
 800abd4:	d077      	beq.n	800acc6 <_dtoa_r+0x1d6>
 800abd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800abd8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800abdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800abe0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800abe4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800abe8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800abec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800abf0:	4619      	mov	r1, r3
 800abf2:	2200      	movs	r2, #0
 800abf4:	4b74      	ldr	r3, [pc, #464]	@ (800adc8 <_dtoa_r+0x2d8>)
 800abf6:	f7f5 fb47 	bl	8000288 <__aeabi_dsub>
 800abfa:	a369      	add	r3, pc, #420	@ (adr r3, 800ada0 <_dtoa_r+0x2b0>)
 800abfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac00:	f7f5 fcfa 	bl	80005f8 <__aeabi_dmul>
 800ac04:	a368      	add	r3, pc, #416	@ (adr r3, 800ada8 <_dtoa_r+0x2b8>)
 800ac06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac0a:	f7f5 fb3f 	bl	800028c <__adddf3>
 800ac0e:	4604      	mov	r4, r0
 800ac10:	4630      	mov	r0, r6
 800ac12:	460d      	mov	r5, r1
 800ac14:	f7f5 fc86 	bl	8000524 <__aeabi_i2d>
 800ac18:	a365      	add	r3, pc, #404	@ (adr r3, 800adb0 <_dtoa_r+0x2c0>)
 800ac1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac1e:	f7f5 fceb 	bl	80005f8 <__aeabi_dmul>
 800ac22:	4602      	mov	r2, r0
 800ac24:	460b      	mov	r3, r1
 800ac26:	4620      	mov	r0, r4
 800ac28:	4629      	mov	r1, r5
 800ac2a:	f7f5 fb2f 	bl	800028c <__adddf3>
 800ac2e:	4604      	mov	r4, r0
 800ac30:	460d      	mov	r5, r1
 800ac32:	f7f5 ff91 	bl	8000b58 <__aeabi_d2iz>
 800ac36:	2200      	movs	r2, #0
 800ac38:	4607      	mov	r7, r0
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	4620      	mov	r0, r4
 800ac3e:	4629      	mov	r1, r5
 800ac40:	f7f5 ff4c 	bl	8000adc <__aeabi_dcmplt>
 800ac44:	b140      	cbz	r0, 800ac58 <_dtoa_r+0x168>
 800ac46:	4638      	mov	r0, r7
 800ac48:	f7f5 fc6c 	bl	8000524 <__aeabi_i2d>
 800ac4c:	4622      	mov	r2, r4
 800ac4e:	462b      	mov	r3, r5
 800ac50:	f7f5 ff3a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac54:	b900      	cbnz	r0, 800ac58 <_dtoa_r+0x168>
 800ac56:	3f01      	subs	r7, #1
 800ac58:	2f16      	cmp	r7, #22
 800ac5a:	d851      	bhi.n	800ad00 <_dtoa_r+0x210>
 800ac5c:	4b5b      	ldr	r3, [pc, #364]	@ (800adcc <_dtoa_r+0x2dc>)
 800ac5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ac62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac6a:	f7f5 ff37 	bl	8000adc <__aeabi_dcmplt>
 800ac6e:	2800      	cmp	r0, #0
 800ac70:	d048      	beq.n	800ad04 <_dtoa_r+0x214>
 800ac72:	3f01      	subs	r7, #1
 800ac74:	2300      	movs	r3, #0
 800ac76:	9312      	str	r3, [sp, #72]	@ 0x48
 800ac78:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ac7a:	1b9b      	subs	r3, r3, r6
 800ac7c:	1e5a      	subs	r2, r3, #1
 800ac7e:	bf44      	itt	mi
 800ac80:	f1c3 0801 	rsbmi	r8, r3, #1
 800ac84:	2300      	movmi	r3, #0
 800ac86:	9208      	str	r2, [sp, #32]
 800ac88:	bf54      	ite	pl
 800ac8a:	f04f 0800 	movpl.w	r8, #0
 800ac8e:	9308      	strmi	r3, [sp, #32]
 800ac90:	2f00      	cmp	r7, #0
 800ac92:	db39      	blt.n	800ad08 <_dtoa_r+0x218>
 800ac94:	9b08      	ldr	r3, [sp, #32]
 800ac96:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ac98:	443b      	add	r3, r7
 800ac9a:	9308      	str	r3, [sp, #32]
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	930a      	str	r3, [sp, #40]	@ 0x28
 800aca0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aca2:	2b09      	cmp	r3, #9
 800aca4:	d864      	bhi.n	800ad70 <_dtoa_r+0x280>
 800aca6:	2b05      	cmp	r3, #5
 800aca8:	bfc4      	itt	gt
 800acaa:	3b04      	subgt	r3, #4
 800acac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800acae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acb0:	f1a3 0302 	sub.w	r3, r3, #2
 800acb4:	bfcc      	ite	gt
 800acb6:	2400      	movgt	r4, #0
 800acb8:	2401      	movle	r4, #1
 800acba:	2b03      	cmp	r3, #3
 800acbc:	d863      	bhi.n	800ad86 <_dtoa_r+0x296>
 800acbe:	e8df f003 	tbb	[pc, r3]
 800acc2:	372a      	.short	0x372a
 800acc4:	5535      	.short	0x5535
 800acc6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800acca:	441e      	add	r6, r3
 800accc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800acd0:	2b20      	cmp	r3, #32
 800acd2:	bfc1      	itttt	gt
 800acd4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800acd8:	409f      	lslgt	r7, r3
 800acda:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800acde:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ace2:	bfd6      	itet	le
 800ace4:	f1c3 0320 	rsble	r3, r3, #32
 800ace8:	ea47 0003 	orrgt.w	r0, r7, r3
 800acec:	fa04 f003 	lslle.w	r0, r4, r3
 800acf0:	f7f5 fc08 	bl	8000504 <__aeabi_ui2d>
 800acf4:	2201      	movs	r2, #1
 800acf6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800acfa:	3e01      	subs	r6, #1
 800acfc:	9214      	str	r2, [sp, #80]	@ 0x50
 800acfe:	e777      	b.n	800abf0 <_dtoa_r+0x100>
 800ad00:	2301      	movs	r3, #1
 800ad02:	e7b8      	b.n	800ac76 <_dtoa_r+0x186>
 800ad04:	9012      	str	r0, [sp, #72]	@ 0x48
 800ad06:	e7b7      	b.n	800ac78 <_dtoa_r+0x188>
 800ad08:	427b      	negs	r3, r7
 800ad0a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	eba8 0807 	sub.w	r8, r8, r7
 800ad12:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ad14:	e7c4      	b.n	800aca0 <_dtoa_r+0x1b0>
 800ad16:	2300      	movs	r3, #0
 800ad18:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	dc35      	bgt.n	800ad8c <_dtoa_r+0x29c>
 800ad20:	2301      	movs	r3, #1
 800ad22:	9300      	str	r3, [sp, #0]
 800ad24:	9307      	str	r3, [sp, #28]
 800ad26:	461a      	mov	r2, r3
 800ad28:	920e      	str	r2, [sp, #56]	@ 0x38
 800ad2a:	e00b      	b.n	800ad44 <_dtoa_r+0x254>
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	e7f3      	b.n	800ad18 <_dtoa_r+0x228>
 800ad30:	2300      	movs	r3, #0
 800ad32:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad36:	18fb      	adds	r3, r7, r3
 800ad38:	9300      	str	r3, [sp, #0]
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	2b01      	cmp	r3, #1
 800ad3e:	9307      	str	r3, [sp, #28]
 800ad40:	bfb8      	it	lt
 800ad42:	2301      	movlt	r3, #1
 800ad44:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ad48:	2100      	movs	r1, #0
 800ad4a:	2204      	movs	r2, #4
 800ad4c:	f102 0514 	add.w	r5, r2, #20
 800ad50:	429d      	cmp	r5, r3
 800ad52:	d91f      	bls.n	800ad94 <_dtoa_r+0x2a4>
 800ad54:	6041      	str	r1, [r0, #4]
 800ad56:	4658      	mov	r0, fp
 800ad58:	f000 fd8e 	bl	800b878 <_Balloc>
 800ad5c:	4682      	mov	sl, r0
 800ad5e:	2800      	cmp	r0, #0
 800ad60:	d13c      	bne.n	800addc <_dtoa_r+0x2ec>
 800ad62:	4b1b      	ldr	r3, [pc, #108]	@ (800add0 <_dtoa_r+0x2e0>)
 800ad64:	4602      	mov	r2, r0
 800ad66:	f240 11af 	movw	r1, #431	@ 0x1af
 800ad6a:	e6d8      	b.n	800ab1e <_dtoa_r+0x2e>
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	e7e0      	b.n	800ad32 <_dtoa_r+0x242>
 800ad70:	2401      	movs	r4, #1
 800ad72:	2300      	movs	r3, #0
 800ad74:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad76:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ad78:	f04f 33ff 	mov.w	r3, #4294967295
 800ad7c:	9300      	str	r3, [sp, #0]
 800ad7e:	9307      	str	r3, [sp, #28]
 800ad80:	2200      	movs	r2, #0
 800ad82:	2312      	movs	r3, #18
 800ad84:	e7d0      	b.n	800ad28 <_dtoa_r+0x238>
 800ad86:	2301      	movs	r3, #1
 800ad88:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad8a:	e7f5      	b.n	800ad78 <_dtoa_r+0x288>
 800ad8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad8e:	9300      	str	r3, [sp, #0]
 800ad90:	9307      	str	r3, [sp, #28]
 800ad92:	e7d7      	b.n	800ad44 <_dtoa_r+0x254>
 800ad94:	3101      	adds	r1, #1
 800ad96:	0052      	lsls	r2, r2, #1
 800ad98:	e7d8      	b.n	800ad4c <_dtoa_r+0x25c>
 800ad9a:	bf00      	nop
 800ad9c:	f3af 8000 	nop.w
 800ada0:	636f4361 	.word	0x636f4361
 800ada4:	3fd287a7 	.word	0x3fd287a7
 800ada8:	8b60c8b3 	.word	0x8b60c8b3
 800adac:	3fc68a28 	.word	0x3fc68a28
 800adb0:	509f79fb 	.word	0x509f79fb
 800adb4:	3fd34413 	.word	0x3fd34413
 800adb8:	0800ef34 	.word	0x0800ef34
 800adbc:	0800ef4b 	.word	0x0800ef4b
 800adc0:	7ff00000 	.word	0x7ff00000
 800adc4:	0800f291 	.word	0x0800f291
 800adc8:	3ff80000 	.word	0x3ff80000
 800adcc:	0800f048 	.word	0x0800f048
 800add0:	0800efa3 	.word	0x0800efa3
 800add4:	0800ef30 	.word	0x0800ef30
 800add8:	0800f290 	.word	0x0800f290
 800addc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ade0:	6018      	str	r0, [r3, #0]
 800ade2:	9b07      	ldr	r3, [sp, #28]
 800ade4:	2b0e      	cmp	r3, #14
 800ade6:	f200 80a4 	bhi.w	800af32 <_dtoa_r+0x442>
 800adea:	2c00      	cmp	r4, #0
 800adec:	f000 80a1 	beq.w	800af32 <_dtoa_r+0x442>
 800adf0:	2f00      	cmp	r7, #0
 800adf2:	dd33      	ble.n	800ae5c <_dtoa_r+0x36c>
 800adf4:	4bad      	ldr	r3, [pc, #692]	@ (800b0ac <_dtoa_r+0x5bc>)
 800adf6:	f007 020f 	and.w	r2, r7, #15
 800adfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800adfe:	ed93 7b00 	vldr	d7, [r3]
 800ae02:	05f8      	lsls	r0, r7, #23
 800ae04:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ae08:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ae0c:	d516      	bpl.n	800ae3c <_dtoa_r+0x34c>
 800ae0e:	4ba8      	ldr	r3, [pc, #672]	@ (800b0b0 <_dtoa_r+0x5c0>)
 800ae10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ae14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ae18:	f7f5 fd18 	bl	800084c <__aeabi_ddiv>
 800ae1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae20:	f004 040f 	and.w	r4, r4, #15
 800ae24:	2603      	movs	r6, #3
 800ae26:	4da2      	ldr	r5, [pc, #648]	@ (800b0b0 <_dtoa_r+0x5c0>)
 800ae28:	b954      	cbnz	r4, 800ae40 <_dtoa_r+0x350>
 800ae2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae32:	f7f5 fd0b 	bl	800084c <__aeabi_ddiv>
 800ae36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae3a:	e028      	b.n	800ae8e <_dtoa_r+0x39e>
 800ae3c:	2602      	movs	r6, #2
 800ae3e:	e7f2      	b.n	800ae26 <_dtoa_r+0x336>
 800ae40:	07e1      	lsls	r1, r4, #31
 800ae42:	d508      	bpl.n	800ae56 <_dtoa_r+0x366>
 800ae44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae48:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ae4c:	f7f5 fbd4 	bl	80005f8 <__aeabi_dmul>
 800ae50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae54:	3601      	adds	r6, #1
 800ae56:	1064      	asrs	r4, r4, #1
 800ae58:	3508      	adds	r5, #8
 800ae5a:	e7e5      	b.n	800ae28 <_dtoa_r+0x338>
 800ae5c:	f000 80d2 	beq.w	800b004 <_dtoa_r+0x514>
 800ae60:	427c      	negs	r4, r7
 800ae62:	4b92      	ldr	r3, [pc, #584]	@ (800b0ac <_dtoa_r+0x5bc>)
 800ae64:	4d92      	ldr	r5, [pc, #584]	@ (800b0b0 <_dtoa_r+0x5c0>)
 800ae66:	f004 020f 	and.w	r2, r4, #15
 800ae6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae72:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ae76:	f7f5 fbbf 	bl	80005f8 <__aeabi_dmul>
 800ae7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae7e:	1124      	asrs	r4, r4, #4
 800ae80:	2300      	movs	r3, #0
 800ae82:	2602      	movs	r6, #2
 800ae84:	2c00      	cmp	r4, #0
 800ae86:	f040 80b2 	bne.w	800afee <_dtoa_r+0x4fe>
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d1d3      	bne.n	800ae36 <_dtoa_r+0x346>
 800ae8e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ae90:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	f000 80b7 	beq.w	800b008 <_dtoa_r+0x518>
 800ae9a:	4b86      	ldr	r3, [pc, #536]	@ (800b0b4 <_dtoa_r+0x5c4>)
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	4620      	mov	r0, r4
 800aea0:	4629      	mov	r1, r5
 800aea2:	f7f5 fe1b 	bl	8000adc <__aeabi_dcmplt>
 800aea6:	2800      	cmp	r0, #0
 800aea8:	f000 80ae 	beq.w	800b008 <_dtoa_r+0x518>
 800aeac:	9b07      	ldr	r3, [sp, #28]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	f000 80aa 	beq.w	800b008 <_dtoa_r+0x518>
 800aeb4:	9b00      	ldr	r3, [sp, #0]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	dd37      	ble.n	800af2a <_dtoa_r+0x43a>
 800aeba:	1e7b      	subs	r3, r7, #1
 800aebc:	9304      	str	r3, [sp, #16]
 800aebe:	4620      	mov	r0, r4
 800aec0:	4b7d      	ldr	r3, [pc, #500]	@ (800b0b8 <_dtoa_r+0x5c8>)
 800aec2:	2200      	movs	r2, #0
 800aec4:	4629      	mov	r1, r5
 800aec6:	f7f5 fb97 	bl	80005f8 <__aeabi_dmul>
 800aeca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aece:	9c00      	ldr	r4, [sp, #0]
 800aed0:	3601      	adds	r6, #1
 800aed2:	4630      	mov	r0, r6
 800aed4:	f7f5 fb26 	bl	8000524 <__aeabi_i2d>
 800aed8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aedc:	f7f5 fb8c 	bl	80005f8 <__aeabi_dmul>
 800aee0:	4b76      	ldr	r3, [pc, #472]	@ (800b0bc <_dtoa_r+0x5cc>)
 800aee2:	2200      	movs	r2, #0
 800aee4:	f7f5 f9d2 	bl	800028c <__adddf3>
 800aee8:	4605      	mov	r5, r0
 800aeea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800aeee:	2c00      	cmp	r4, #0
 800aef0:	f040 808d 	bne.w	800b00e <_dtoa_r+0x51e>
 800aef4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aef8:	4b71      	ldr	r3, [pc, #452]	@ (800b0c0 <_dtoa_r+0x5d0>)
 800aefa:	2200      	movs	r2, #0
 800aefc:	f7f5 f9c4 	bl	8000288 <__aeabi_dsub>
 800af00:	4602      	mov	r2, r0
 800af02:	460b      	mov	r3, r1
 800af04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af08:	462a      	mov	r2, r5
 800af0a:	4633      	mov	r3, r6
 800af0c:	f7f5 fe04 	bl	8000b18 <__aeabi_dcmpgt>
 800af10:	2800      	cmp	r0, #0
 800af12:	f040 828b 	bne.w	800b42c <_dtoa_r+0x93c>
 800af16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af1a:	462a      	mov	r2, r5
 800af1c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800af20:	f7f5 fddc 	bl	8000adc <__aeabi_dcmplt>
 800af24:	2800      	cmp	r0, #0
 800af26:	f040 8128 	bne.w	800b17a <_dtoa_r+0x68a>
 800af2a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800af2e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800af32:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800af34:	2b00      	cmp	r3, #0
 800af36:	f2c0 815a 	blt.w	800b1ee <_dtoa_r+0x6fe>
 800af3a:	2f0e      	cmp	r7, #14
 800af3c:	f300 8157 	bgt.w	800b1ee <_dtoa_r+0x6fe>
 800af40:	4b5a      	ldr	r3, [pc, #360]	@ (800b0ac <_dtoa_r+0x5bc>)
 800af42:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800af46:	ed93 7b00 	vldr	d7, [r3]
 800af4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	ed8d 7b00 	vstr	d7, [sp]
 800af52:	da03      	bge.n	800af5c <_dtoa_r+0x46c>
 800af54:	9b07      	ldr	r3, [sp, #28]
 800af56:	2b00      	cmp	r3, #0
 800af58:	f340 8101 	ble.w	800b15e <_dtoa_r+0x66e>
 800af5c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800af60:	4656      	mov	r6, sl
 800af62:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af66:	4620      	mov	r0, r4
 800af68:	4629      	mov	r1, r5
 800af6a:	f7f5 fc6f 	bl	800084c <__aeabi_ddiv>
 800af6e:	f7f5 fdf3 	bl	8000b58 <__aeabi_d2iz>
 800af72:	4680      	mov	r8, r0
 800af74:	f7f5 fad6 	bl	8000524 <__aeabi_i2d>
 800af78:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af7c:	f7f5 fb3c 	bl	80005f8 <__aeabi_dmul>
 800af80:	4602      	mov	r2, r0
 800af82:	460b      	mov	r3, r1
 800af84:	4620      	mov	r0, r4
 800af86:	4629      	mov	r1, r5
 800af88:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800af8c:	f7f5 f97c 	bl	8000288 <__aeabi_dsub>
 800af90:	f806 4b01 	strb.w	r4, [r6], #1
 800af94:	9d07      	ldr	r5, [sp, #28]
 800af96:	eba6 040a 	sub.w	r4, r6, sl
 800af9a:	42a5      	cmp	r5, r4
 800af9c:	4602      	mov	r2, r0
 800af9e:	460b      	mov	r3, r1
 800afa0:	f040 8117 	bne.w	800b1d2 <_dtoa_r+0x6e2>
 800afa4:	f7f5 f972 	bl	800028c <__adddf3>
 800afa8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800afac:	4604      	mov	r4, r0
 800afae:	460d      	mov	r5, r1
 800afb0:	f7f5 fdb2 	bl	8000b18 <__aeabi_dcmpgt>
 800afb4:	2800      	cmp	r0, #0
 800afb6:	f040 80f9 	bne.w	800b1ac <_dtoa_r+0x6bc>
 800afba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800afbe:	4620      	mov	r0, r4
 800afc0:	4629      	mov	r1, r5
 800afc2:	f7f5 fd81 	bl	8000ac8 <__aeabi_dcmpeq>
 800afc6:	b118      	cbz	r0, 800afd0 <_dtoa_r+0x4e0>
 800afc8:	f018 0f01 	tst.w	r8, #1
 800afcc:	f040 80ee 	bne.w	800b1ac <_dtoa_r+0x6bc>
 800afd0:	4649      	mov	r1, r9
 800afd2:	4658      	mov	r0, fp
 800afd4:	f000 fc90 	bl	800b8f8 <_Bfree>
 800afd8:	2300      	movs	r3, #0
 800afda:	7033      	strb	r3, [r6, #0]
 800afdc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800afde:	3701      	adds	r7, #1
 800afe0:	601f      	str	r7, [r3, #0]
 800afe2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	f000 831d 	beq.w	800b624 <_dtoa_r+0xb34>
 800afea:	601e      	str	r6, [r3, #0]
 800afec:	e31a      	b.n	800b624 <_dtoa_r+0xb34>
 800afee:	07e2      	lsls	r2, r4, #31
 800aff0:	d505      	bpl.n	800affe <_dtoa_r+0x50e>
 800aff2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aff6:	f7f5 faff 	bl	80005f8 <__aeabi_dmul>
 800affa:	3601      	adds	r6, #1
 800affc:	2301      	movs	r3, #1
 800affe:	1064      	asrs	r4, r4, #1
 800b000:	3508      	adds	r5, #8
 800b002:	e73f      	b.n	800ae84 <_dtoa_r+0x394>
 800b004:	2602      	movs	r6, #2
 800b006:	e742      	b.n	800ae8e <_dtoa_r+0x39e>
 800b008:	9c07      	ldr	r4, [sp, #28]
 800b00a:	9704      	str	r7, [sp, #16]
 800b00c:	e761      	b.n	800aed2 <_dtoa_r+0x3e2>
 800b00e:	4b27      	ldr	r3, [pc, #156]	@ (800b0ac <_dtoa_r+0x5bc>)
 800b010:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b012:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b016:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b01a:	4454      	add	r4, sl
 800b01c:	2900      	cmp	r1, #0
 800b01e:	d053      	beq.n	800b0c8 <_dtoa_r+0x5d8>
 800b020:	4928      	ldr	r1, [pc, #160]	@ (800b0c4 <_dtoa_r+0x5d4>)
 800b022:	2000      	movs	r0, #0
 800b024:	f7f5 fc12 	bl	800084c <__aeabi_ddiv>
 800b028:	4633      	mov	r3, r6
 800b02a:	462a      	mov	r2, r5
 800b02c:	f7f5 f92c 	bl	8000288 <__aeabi_dsub>
 800b030:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b034:	4656      	mov	r6, sl
 800b036:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b03a:	f7f5 fd8d 	bl	8000b58 <__aeabi_d2iz>
 800b03e:	4605      	mov	r5, r0
 800b040:	f7f5 fa70 	bl	8000524 <__aeabi_i2d>
 800b044:	4602      	mov	r2, r0
 800b046:	460b      	mov	r3, r1
 800b048:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b04c:	f7f5 f91c 	bl	8000288 <__aeabi_dsub>
 800b050:	3530      	adds	r5, #48	@ 0x30
 800b052:	4602      	mov	r2, r0
 800b054:	460b      	mov	r3, r1
 800b056:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b05a:	f806 5b01 	strb.w	r5, [r6], #1
 800b05e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b062:	f7f5 fd3b 	bl	8000adc <__aeabi_dcmplt>
 800b066:	2800      	cmp	r0, #0
 800b068:	d171      	bne.n	800b14e <_dtoa_r+0x65e>
 800b06a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b06e:	4911      	ldr	r1, [pc, #68]	@ (800b0b4 <_dtoa_r+0x5c4>)
 800b070:	2000      	movs	r0, #0
 800b072:	f7f5 f909 	bl	8000288 <__aeabi_dsub>
 800b076:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b07a:	f7f5 fd2f 	bl	8000adc <__aeabi_dcmplt>
 800b07e:	2800      	cmp	r0, #0
 800b080:	f040 8095 	bne.w	800b1ae <_dtoa_r+0x6be>
 800b084:	42a6      	cmp	r6, r4
 800b086:	f43f af50 	beq.w	800af2a <_dtoa_r+0x43a>
 800b08a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b08e:	4b0a      	ldr	r3, [pc, #40]	@ (800b0b8 <_dtoa_r+0x5c8>)
 800b090:	2200      	movs	r2, #0
 800b092:	f7f5 fab1 	bl	80005f8 <__aeabi_dmul>
 800b096:	4b08      	ldr	r3, [pc, #32]	@ (800b0b8 <_dtoa_r+0x5c8>)
 800b098:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b09c:	2200      	movs	r2, #0
 800b09e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0a2:	f7f5 faa9 	bl	80005f8 <__aeabi_dmul>
 800b0a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0aa:	e7c4      	b.n	800b036 <_dtoa_r+0x546>
 800b0ac:	0800f048 	.word	0x0800f048
 800b0b0:	0800f020 	.word	0x0800f020
 800b0b4:	3ff00000 	.word	0x3ff00000
 800b0b8:	40240000 	.word	0x40240000
 800b0bc:	401c0000 	.word	0x401c0000
 800b0c0:	40140000 	.word	0x40140000
 800b0c4:	3fe00000 	.word	0x3fe00000
 800b0c8:	4631      	mov	r1, r6
 800b0ca:	4628      	mov	r0, r5
 800b0cc:	f7f5 fa94 	bl	80005f8 <__aeabi_dmul>
 800b0d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b0d4:	9415      	str	r4, [sp, #84]	@ 0x54
 800b0d6:	4656      	mov	r6, sl
 800b0d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0dc:	f7f5 fd3c 	bl	8000b58 <__aeabi_d2iz>
 800b0e0:	4605      	mov	r5, r0
 800b0e2:	f7f5 fa1f 	bl	8000524 <__aeabi_i2d>
 800b0e6:	4602      	mov	r2, r0
 800b0e8:	460b      	mov	r3, r1
 800b0ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0ee:	f7f5 f8cb 	bl	8000288 <__aeabi_dsub>
 800b0f2:	3530      	adds	r5, #48	@ 0x30
 800b0f4:	f806 5b01 	strb.w	r5, [r6], #1
 800b0f8:	4602      	mov	r2, r0
 800b0fa:	460b      	mov	r3, r1
 800b0fc:	42a6      	cmp	r6, r4
 800b0fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b102:	f04f 0200 	mov.w	r2, #0
 800b106:	d124      	bne.n	800b152 <_dtoa_r+0x662>
 800b108:	4bac      	ldr	r3, [pc, #688]	@ (800b3bc <_dtoa_r+0x8cc>)
 800b10a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b10e:	f7f5 f8bd 	bl	800028c <__adddf3>
 800b112:	4602      	mov	r2, r0
 800b114:	460b      	mov	r3, r1
 800b116:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b11a:	f7f5 fcfd 	bl	8000b18 <__aeabi_dcmpgt>
 800b11e:	2800      	cmp	r0, #0
 800b120:	d145      	bne.n	800b1ae <_dtoa_r+0x6be>
 800b122:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b126:	49a5      	ldr	r1, [pc, #660]	@ (800b3bc <_dtoa_r+0x8cc>)
 800b128:	2000      	movs	r0, #0
 800b12a:	f7f5 f8ad 	bl	8000288 <__aeabi_dsub>
 800b12e:	4602      	mov	r2, r0
 800b130:	460b      	mov	r3, r1
 800b132:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b136:	f7f5 fcd1 	bl	8000adc <__aeabi_dcmplt>
 800b13a:	2800      	cmp	r0, #0
 800b13c:	f43f aef5 	beq.w	800af2a <_dtoa_r+0x43a>
 800b140:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b142:	1e73      	subs	r3, r6, #1
 800b144:	9315      	str	r3, [sp, #84]	@ 0x54
 800b146:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b14a:	2b30      	cmp	r3, #48	@ 0x30
 800b14c:	d0f8      	beq.n	800b140 <_dtoa_r+0x650>
 800b14e:	9f04      	ldr	r7, [sp, #16]
 800b150:	e73e      	b.n	800afd0 <_dtoa_r+0x4e0>
 800b152:	4b9b      	ldr	r3, [pc, #620]	@ (800b3c0 <_dtoa_r+0x8d0>)
 800b154:	f7f5 fa50 	bl	80005f8 <__aeabi_dmul>
 800b158:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b15c:	e7bc      	b.n	800b0d8 <_dtoa_r+0x5e8>
 800b15e:	d10c      	bne.n	800b17a <_dtoa_r+0x68a>
 800b160:	4b98      	ldr	r3, [pc, #608]	@ (800b3c4 <_dtoa_r+0x8d4>)
 800b162:	2200      	movs	r2, #0
 800b164:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b168:	f7f5 fa46 	bl	80005f8 <__aeabi_dmul>
 800b16c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b170:	f7f5 fcc8 	bl	8000b04 <__aeabi_dcmpge>
 800b174:	2800      	cmp	r0, #0
 800b176:	f000 8157 	beq.w	800b428 <_dtoa_r+0x938>
 800b17a:	2400      	movs	r4, #0
 800b17c:	4625      	mov	r5, r4
 800b17e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b180:	43db      	mvns	r3, r3
 800b182:	9304      	str	r3, [sp, #16]
 800b184:	4656      	mov	r6, sl
 800b186:	2700      	movs	r7, #0
 800b188:	4621      	mov	r1, r4
 800b18a:	4658      	mov	r0, fp
 800b18c:	f000 fbb4 	bl	800b8f8 <_Bfree>
 800b190:	2d00      	cmp	r5, #0
 800b192:	d0dc      	beq.n	800b14e <_dtoa_r+0x65e>
 800b194:	b12f      	cbz	r7, 800b1a2 <_dtoa_r+0x6b2>
 800b196:	42af      	cmp	r7, r5
 800b198:	d003      	beq.n	800b1a2 <_dtoa_r+0x6b2>
 800b19a:	4639      	mov	r1, r7
 800b19c:	4658      	mov	r0, fp
 800b19e:	f000 fbab 	bl	800b8f8 <_Bfree>
 800b1a2:	4629      	mov	r1, r5
 800b1a4:	4658      	mov	r0, fp
 800b1a6:	f000 fba7 	bl	800b8f8 <_Bfree>
 800b1aa:	e7d0      	b.n	800b14e <_dtoa_r+0x65e>
 800b1ac:	9704      	str	r7, [sp, #16]
 800b1ae:	4633      	mov	r3, r6
 800b1b0:	461e      	mov	r6, r3
 800b1b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b1b6:	2a39      	cmp	r2, #57	@ 0x39
 800b1b8:	d107      	bne.n	800b1ca <_dtoa_r+0x6da>
 800b1ba:	459a      	cmp	sl, r3
 800b1bc:	d1f8      	bne.n	800b1b0 <_dtoa_r+0x6c0>
 800b1be:	9a04      	ldr	r2, [sp, #16]
 800b1c0:	3201      	adds	r2, #1
 800b1c2:	9204      	str	r2, [sp, #16]
 800b1c4:	2230      	movs	r2, #48	@ 0x30
 800b1c6:	f88a 2000 	strb.w	r2, [sl]
 800b1ca:	781a      	ldrb	r2, [r3, #0]
 800b1cc:	3201      	adds	r2, #1
 800b1ce:	701a      	strb	r2, [r3, #0]
 800b1d0:	e7bd      	b.n	800b14e <_dtoa_r+0x65e>
 800b1d2:	4b7b      	ldr	r3, [pc, #492]	@ (800b3c0 <_dtoa_r+0x8d0>)
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	f7f5 fa0f 	bl	80005f8 <__aeabi_dmul>
 800b1da:	2200      	movs	r2, #0
 800b1dc:	2300      	movs	r3, #0
 800b1de:	4604      	mov	r4, r0
 800b1e0:	460d      	mov	r5, r1
 800b1e2:	f7f5 fc71 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1e6:	2800      	cmp	r0, #0
 800b1e8:	f43f aebb 	beq.w	800af62 <_dtoa_r+0x472>
 800b1ec:	e6f0      	b.n	800afd0 <_dtoa_r+0x4e0>
 800b1ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b1f0:	2a00      	cmp	r2, #0
 800b1f2:	f000 80db 	beq.w	800b3ac <_dtoa_r+0x8bc>
 800b1f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1f8:	2a01      	cmp	r2, #1
 800b1fa:	f300 80bf 	bgt.w	800b37c <_dtoa_r+0x88c>
 800b1fe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b200:	2a00      	cmp	r2, #0
 800b202:	f000 80b7 	beq.w	800b374 <_dtoa_r+0x884>
 800b206:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b20a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b20c:	4646      	mov	r6, r8
 800b20e:	9a08      	ldr	r2, [sp, #32]
 800b210:	2101      	movs	r1, #1
 800b212:	441a      	add	r2, r3
 800b214:	4658      	mov	r0, fp
 800b216:	4498      	add	r8, r3
 800b218:	9208      	str	r2, [sp, #32]
 800b21a:	f000 fc6b 	bl	800baf4 <__i2b>
 800b21e:	4605      	mov	r5, r0
 800b220:	b15e      	cbz	r6, 800b23a <_dtoa_r+0x74a>
 800b222:	9b08      	ldr	r3, [sp, #32]
 800b224:	2b00      	cmp	r3, #0
 800b226:	dd08      	ble.n	800b23a <_dtoa_r+0x74a>
 800b228:	42b3      	cmp	r3, r6
 800b22a:	9a08      	ldr	r2, [sp, #32]
 800b22c:	bfa8      	it	ge
 800b22e:	4633      	movge	r3, r6
 800b230:	eba8 0803 	sub.w	r8, r8, r3
 800b234:	1af6      	subs	r6, r6, r3
 800b236:	1ad3      	subs	r3, r2, r3
 800b238:	9308      	str	r3, [sp, #32]
 800b23a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b23c:	b1f3      	cbz	r3, 800b27c <_dtoa_r+0x78c>
 800b23e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b240:	2b00      	cmp	r3, #0
 800b242:	f000 80b7 	beq.w	800b3b4 <_dtoa_r+0x8c4>
 800b246:	b18c      	cbz	r4, 800b26c <_dtoa_r+0x77c>
 800b248:	4629      	mov	r1, r5
 800b24a:	4622      	mov	r2, r4
 800b24c:	4658      	mov	r0, fp
 800b24e:	f000 fd11 	bl	800bc74 <__pow5mult>
 800b252:	464a      	mov	r2, r9
 800b254:	4601      	mov	r1, r0
 800b256:	4605      	mov	r5, r0
 800b258:	4658      	mov	r0, fp
 800b25a:	f000 fc61 	bl	800bb20 <__multiply>
 800b25e:	4649      	mov	r1, r9
 800b260:	9004      	str	r0, [sp, #16]
 800b262:	4658      	mov	r0, fp
 800b264:	f000 fb48 	bl	800b8f8 <_Bfree>
 800b268:	9b04      	ldr	r3, [sp, #16]
 800b26a:	4699      	mov	r9, r3
 800b26c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b26e:	1b1a      	subs	r2, r3, r4
 800b270:	d004      	beq.n	800b27c <_dtoa_r+0x78c>
 800b272:	4649      	mov	r1, r9
 800b274:	4658      	mov	r0, fp
 800b276:	f000 fcfd 	bl	800bc74 <__pow5mult>
 800b27a:	4681      	mov	r9, r0
 800b27c:	2101      	movs	r1, #1
 800b27e:	4658      	mov	r0, fp
 800b280:	f000 fc38 	bl	800baf4 <__i2b>
 800b284:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b286:	4604      	mov	r4, r0
 800b288:	2b00      	cmp	r3, #0
 800b28a:	f000 81cf 	beq.w	800b62c <_dtoa_r+0xb3c>
 800b28e:	461a      	mov	r2, r3
 800b290:	4601      	mov	r1, r0
 800b292:	4658      	mov	r0, fp
 800b294:	f000 fcee 	bl	800bc74 <__pow5mult>
 800b298:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b29a:	2b01      	cmp	r3, #1
 800b29c:	4604      	mov	r4, r0
 800b29e:	f300 8095 	bgt.w	800b3cc <_dtoa_r+0x8dc>
 800b2a2:	9b02      	ldr	r3, [sp, #8]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	f040 8087 	bne.w	800b3b8 <_dtoa_r+0x8c8>
 800b2aa:	9b03      	ldr	r3, [sp, #12]
 800b2ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	f040 8089 	bne.w	800b3c8 <_dtoa_r+0x8d8>
 800b2b6:	9b03      	ldr	r3, [sp, #12]
 800b2b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b2bc:	0d1b      	lsrs	r3, r3, #20
 800b2be:	051b      	lsls	r3, r3, #20
 800b2c0:	b12b      	cbz	r3, 800b2ce <_dtoa_r+0x7de>
 800b2c2:	9b08      	ldr	r3, [sp, #32]
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	9308      	str	r3, [sp, #32]
 800b2c8:	f108 0801 	add.w	r8, r8, #1
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	f000 81b0 	beq.w	800b638 <_dtoa_r+0xb48>
 800b2d8:	6923      	ldr	r3, [r4, #16]
 800b2da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b2de:	6918      	ldr	r0, [r3, #16]
 800b2e0:	f000 fbbc 	bl	800ba5c <__hi0bits>
 800b2e4:	f1c0 0020 	rsb	r0, r0, #32
 800b2e8:	9b08      	ldr	r3, [sp, #32]
 800b2ea:	4418      	add	r0, r3
 800b2ec:	f010 001f 	ands.w	r0, r0, #31
 800b2f0:	d077      	beq.n	800b3e2 <_dtoa_r+0x8f2>
 800b2f2:	f1c0 0320 	rsb	r3, r0, #32
 800b2f6:	2b04      	cmp	r3, #4
 800b2f8:	dd6b      	ble.n	800b3d2 <_dtoa_r+0x8e2>
 800b2fa:	9b08      	ldr	r3, [sp, #32]
 800b2fc:	f1c0 001c 	rsb	r0, r0, #28
 800b300:	4403      	add	r3, r0
 800b302:	4480      	add	r8, r0
 800b304:	4406      	add	r6, r0
 800b306:	9308      	str	r3, [sp, #32]
 800b308:	f1b8 0f00 	cmp.w	r8, #0
 800b30c:	dd05      	ble.n	800b31a <_dtoa_r+0x82a>
 800b30e:	4649      	mov	r1, r9
 800b310:	4642      	mov	r2, r8
 800b312:	4658      	mov	r0, fp
 800b314:	f000 fd08 	bl	800bd28 <__lshift>
 800b318:	4681      	mov	r9, r0
 800b31a:	9b08      	ldr	r3, [sp, #32]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	dd05      	ble.n	800b32c <_dtoa_r+0x83c>
 800b320:	4621      	mov	r1, r4
 800b322:	461a      	mov	r2, r3
 800b324:	4658      	mov	r0, fp
 800b326:	f000 fcff 	bl	800bd28 <__lshift>
 800b32a:	4604      	mov	r4, r0
 800b32c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d059      	beq.n	800b3e6 <_dtoa_r+0x8f6>
 800b332:	4621      	mov	r1, r4
 800b334:	4648      	mov	r0, r9
 800b336:	f000 fd63 	bl	800be00 <__mcmp>
 800b33a:	2800      	cmp	r0, #0
 800b33c:	da53      	bge.n	800b3e6 <_dtoa_r+0x8f6>
 800b33e:	1e7b      	subs	r3, r7, #1
 800b340:	9304      	str	r3, [sp, #16]
 800b342:	4649      	mov	r1, r9
 800b344:	2300      	movs	r3, #0
 800b346:	220a      	movs	r2, #10
 800b348:	4658      	mov	r0, fp
 800b34a:	f000 faf7 	bl	800b93c <__multadd>
 800b34e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b350:	4681      	mov	r9, r0
 800b352:	2b00      	cmp	r3, #0
 800b354:	f000 8172 	beq.w	800b63c <_dtoa_r+0xb4c>
 800b358:	2300      	movs	r3, #0
 800b35a:	4629      	mov	r1, r5
 800b35c:	220a      	movs	r2, #10
 800b35e:	4658      	mov	r0, fp
 800b360:	f000 faec 	bl	800b93c <__multadd>
 800b364:	9b00      	ldr	r3, [sp, #0]
 800b366:	2b00      	cmp	r3, #0
 800b368:	4605      	mov	r5, r0
 800b36a:	dc67      	bgt.n	800b43c <_dtoa_r+0x94c>
 800b36c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b36e:	2b02      	cmp	r3, #2
 800b370:	dc41      	bgt.n	800b3f6 <_dtoa_r+0x906>
 800b372:	e063      	b.n	800b43c <_dtoa_r+0x94c>
 800b374:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b376:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b37a:	e746      	b.n	800b20a <_dtoa_r+0x71a>
 800b37c:	9b07      	ldr	r3, [sp, #28]
 800b37e:	1e5c      	subs	r4, r3, #1
 800b380:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b382:	42a3      	cmp	r3, r4
 800b384:	bfbf      	itttt	lt
 800b386:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b388:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b38a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b38c:	1ae3      	sublt	r3, r4, r3
 800b38e:	bfb4      	ite	lt
 800b390:	18d2      	addlt	r2, r2, r3
 800b392:	1b1c      	subge	r4, r3, r4
 800b394:	9b07      	ldr	r3, [sp, #28]
 800b396:	bfbc      	itt	lt
 800b398:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b39a:	2400      	movlt	r4, #0
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	bfb5      	itete	lt
 800b3a0:	eba8 0603 	sublt.w	r6, r8, r3
 800b3a4:	9b07      	ldrge	r3, [sp, #28]
 800b3a6:	2300      	movlt	r3, #0
 800b3a8:	4646      	movge	r6, r8
 800b3aa:	e730      	b.n	800b20e <_dtoa_r+0x71e>
 800b3ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b3ae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b3b0:	4646      	mov	r6, r8
 800b3b2:	e735      	b.n	800b220 <_dtoa_r+0x730>
 800b3b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b3b6:	e75c      	b.n	800b272 <_dtoa_r+0x782>
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	e788      	b.n	800b2ce <_dtoa_r+0x7de>
 800b3bc:	3fe00000 	.word	0x3fe00000
 800b3c0:	40240000 	.word	0x40240000
 800b3c4:	40140000 	.word	0x40140000
 800b3c8:	9b02      	ldr	r3, [sp, #8]
 800b3ca:	e780      	b.n	800b2ce <_dtoa_r+0x7de>
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3d0:	e782      	b.n	800b2d8 <_dtoa_r+0x7e8>
 800b3d2:	d099      	beq.n	800b308 <_dtoa_r+0x818>
 800b3d4:	9a08      	ldr	r2, [sp, #32]
 800b3d6:	331c      	adds	r3, #28
 800b3d8:	441a      	add	r2, r3
 800b3da:	4498      	add	r8, r3
 800b3dc:	441e      	add	r6, r3
 800b3de:	9208      	str	r2, [sp, #32]
 800b3e0:	e792      	b.n	800b308 <_dtoa_r+0x818>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	e7f6      	b.n	800b3d4 <_dtoa_r+0x8e4>
 800b3e6:	9b07      	ldr	r3, [sp, #28]
 800b3e8:	9704      	str	r7, [sp, #16]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	dc20      	bgt.n	800b430 <_dtoa_r+0x940>
 800b3ee:	9300      	str	r3, [sp, #0]
 800b3f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3f2:	2b02      	cmp	r3, #2
 800b3f4:	dd1e      	ble.n	800b434 <_dtoa_r+0x944>
 800b3f6:	9b00      	ldr	r3, [sp, #0]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	f47f aec0 	bne.w	800b17e <_dtoa_r+0x68e>
 800b3fe:	4621      	mov	r1, r4
 800b400:	2205      	movs	r2, #5
 800b402:	4658      	mov	r0, fp
 800b404:	f000 fa9a 	bl	800b93c <__multadd>
 800b408:	4601      	mov	r1, r0
 800b40a:	4604      	mov	r4, r0
 800b40c:	4648      	mov	r0, r9
 800b40e:	f000 fcf7 	bl	800be00 <__mcmp>
 800b412:	2800      	cmp	r0, #0
 800b414:	f77f aeb3 	ble.w	800b17e <_dtoa_r+0x68e>
 800b418:	4656      	mov	r6, sl
 800b41a:	2331      	movs	r3, #49	@ 0x31
 800b41c:	f806 3b01 	strb.w	r3, [r6], #1
 800b420:	9b04      	ldr	r3, [sp, #16]
 800b422:	3301      	adds	r3, #1
 800b424:	9304      	str	r3, [sp, #16]
 800b426:	e6ae      	b.n	800b186 <_dtoa_r+0x696>
 800b428:	9c07      	ldr	r4, [sp, #28]
 800b42a:	9704      	str	r7, [sp, #16]
 800b42c:	4625      	mov	r5, r4
 800b42e:	e7f3      	b.n	800b418 <_dtoa_r+0x928>
 800b430:	9b07      	ldr	r3, [sp, #28]
 800b432:	9300      	str	r3, [sp, #0]
 800b434:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b436:	2b00      	cmp	r3, #0
 800b438:	f000 8104 	beq.w	800b644 <_dtoa_r+0xb54>
 800b43c:	2e00      	cmp	r6, #0
 800b43e:	dd05      	ble.n	800b44c <_dtoa_r+0x95c>
 800b440:	4629      	mov	r1, r5
 800b442:	4632      	mov	r2, r6
 800b444:	4658      	mov	r0, fp
 800b446:	f000 fc6f 	bl	800bd28 <__lshift>
 800b44a:	4605      	mov	r5, r0
 800b44c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d05a      	beq.n	800b508 <_dtoa_r+0xa18>
 800b452:	6869      	ldr	r1, [r5, #4]
 800b454:	4658      	mov	r0, fp
 800b456:	f000 fa0f 	bl	800b878 <_Balloc>
 800b45a:	4606      	mov	r6, r0
 800b45c:	b928      	cbnz	r0, 800b46a <_dtoa_r+0x97a>
 800b45e:	4b84      	ldr	r3, [pc, #528]	@ (800b670 <_dtoa_r+0xb80>)
 800b460:	4602      	mov	r2, r0
 800b462:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b466:	f7ff bb5a 	b.w	800ab1e <_dtoa_r+0x2e>
 800b46a:	692a      	ldr	r2, [r5, #16]
 800b46c:	3202      	adds	r2, #2
 800b46e:	0092      	lsls	r2, r2, #2
 800b470:	f105 010c 	add.w	r1, r5, #12
 800b474:	300c      	adds	r0, #12
 800b476:	f002 faf1 	bl	800da5c <memcpy>
 800b47a:	2201      	movs	r2, #1
 800b47c:	4631      	mov	r1, r6
 800b47e:	4658      	mov	r0, fp
 800b480:	f000 fc52 	bl	800bd28 <__lshift>
 800b484:	f10a 0301 	add.w	r3, sl, #1
 800b488:	9307      	str	r3, [sp, #28]
 800b48a:	9b00      	ldr	r3, [sp, #0]
 800b48c:	4453      	add	r3, sl
 800b48e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b490:	9b02      	ldr	r3, [sp, #8]
 800b492:	f003 0301 	and.w	r3, r3, #1
 800b496:	462f      	mov	r7, r5
 800b498:	930a      	str	r3, [sp, #40]	@ 0x28
 800b49a:	4605      	mov	r5, r0
 800b49c:	9b07      	ldr	r3, [sp, #28]
 800b49e:	4621      	mov	r1, r4
 800b4a0:	3b01      	subs	r3, #1
 800b4a2:	4648      	mov	r0, r9
 800b4a4:	9300      	str	r3, [sp, #0]
 800b4a6:	f7ff fa9b 	bl	800a9e0 <quorem>
 800b4aa:	4639      	mov	r1, r7
 800b4ac:	9002      	str	r0, [sp, #8]
 800b4ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b4b2:	4648      	mov	r0, r9
 800b4b4:	f000 fca4 	bl	800be00 <__mcmp>
 800b4b8:	462a      	mov	r2, r5
 800b4ba:	9008      	str	r0, [sp, #32]
 800b4bc:	4621      	mov	r1, r4
 800b4be:	4658      	mov	r0, fp
 800b4c0:	f000 fcba 	bl	800be38 <__mdiff>
 800b4c4:	68c2      	ldr	r2, [r0, #12]
 800b4c6:	4606      	mov	r6, r0
 800b4c8:	bb02      	cbnz	r2, 800b50c <_dtoa_r+0xa1c>
 800b4ca:	4601      	mov	r1, r0
 800b4cc:	4648      	mov	r0, r9
 800b4ce:	f000 fc97 	bl	800be00 <__mcmp>
 800b4d2:	4602      	mov	r2, r0
 800b4d4:	4631      	mov	r1, r6
 800b4d6:	4658      	mov	r0, fp
 800b4d8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b4da:	f000 fa0d 	bl	800b8f8 <_Bfree>
 800b4de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b4e2:	9e07      	ldr	r6, [sp, #28]
 800b4e4:	ea43 0102 	orr.w	r1, r3, r2
 800b4e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4ea:	4319      	orrs	r1, r3
 800b4ec:	d110      	bne.n	800b510 <_dtoa_r+0xa20>
 800b4ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b4f2:	d029      	beq.n	800b548 <_dtoa_r+0xa58>
 800b4f4:	9b08      	ldr	r3, [sp, #32]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	dd02      	ble.n	800b500 <_dtoa_r+0xa10>
 800b4fa:	9b02      	ldr	r3, [sp, #8]
 800b4fc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b500:	9b00      	ldr	r3, [sp, #0]
 800b502:	f883 8000 	strb.w	r8, [r3]
 800b506:	e63f      	b.n	800b188 <_dtoa_r+0x698>
 800b508:	4628      	mov	r0, r5
 800b50a:	e7bb      	b.n	800b484 <_dtoa_r+0x994>
 800b50c:	2201      	movs	r2, #1
 800b50e:	e7e1      	b.n	800b4d4 <_dtoa_r+0x9e4>
 800b510:	9b08      	ldr	r3, [sp, #32]
 800b512:	2b00      	cmp	r3, #0
 800b514:	db04      	blt.n	800b520 <_dtoa_r+0xa30>
 800b516:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b518:	430b      	orrs	r3, r1
 800b51a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b51c:	430b      	orrs	r3, r1
 800b51e:	d120      	bne.n	800b562 <_dtoa_r+0xa72>
 800b520:	2a00      	cmp	r2, #0
 800b522:	dded      	ble.n	800b500 <_dtoa_r+0xa10>
 800b524:	4649      	mov	r1, r9
 800b526:	2201      	movs	r2, #1
 800b528:	4658      	mov	r0, fp
 800b52a:	f000 fbfd 	bl	800bd28 <__lshift>
 800b52e:	4621      	mov	r1, r4
 800b530:	4681      	mov	r9, r0
 800b532:	f000 fc65 	bl	800be00 <__mcmp>
 800b536:	2800      	cmp	r0, #0
 800b538:	dc03      	bgt.n	800b542 <_dtoa_r+0xa52>
 800b53a:	d1e1      	bne.n	800b500 <_dtoa_r+0xa10>
 800b53c:	f018 0f01 	tst.w	r8, #1
 800b540:	d0de      	beq.n	800b500 <_dtoa_r+0xa10>
 800b542:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b546:	d1d8      	bne.n	800b4fa <_dtoa_r+0xa0a>
 800b548:	9a00      	ldr	r2, [sp, #0]
 800b54a:	2339      	movs	r3, #57	@ 0x39
 800b54c:	7013      	strb	r3, [r2, #0]
 800b54e:	4633      	mov	r3, r6
 800b550:	461e      	mov	r6, r3
 800b552:	3b01      	subs	r3, #1
 800b554:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b558:	2a39      	cmp	r2, #57	@ 0x39
 800b55a:	d052      	beq.n	800b602 <_dtoa_r+0xb12>
 800b55c:	3201      	adds	r2, #1
 800b55e:	701a      	strb	r2, [r3, #0]
 800b560:	e612      	b.n	800b188 <_dtoa_r+0x698>
 800b562:	2a00      	cmp	r2, #0
 800b564:	dd07      	ble.n	800b576 <_dtoa_r+0xa86>
 800b566:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b56a:	d0ed      	beq.n	800b548 <_dtoa_r+0xa58>
 800b56c:	9a00      	ldr	r2, [sp, #0]
 800b56e:	f108 0301 	add.w	r3, r8, #1
 800b572:	7013      	strb	r3, [r2, #0]
 800b574:	e608      	b.n	800b188 <_dtoa_r+0x698>
 800b576:	9b07      	ldr	r3, [sp, #28]
 800b578:	9a07      	ldr	r2, [sp, #28]
 800b57a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b57e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b580:	4293      	cmp	r3, r2
 800b582:	d028      	beq.n	800b5d6 <_dtoa_r+0xae6>
 800b584:	4649      	mov	r1, r9
 800b586:	2300      	movs	r3, #0
 800b588:	220a      	movs	r2, #10
 800b58a:	4658      	mov	r0, fp
 800b58c:	f000 f9d6 	bl	800b93c <__multadd>
 800b590:	42af      	cmp	r7, r5
 800b592:	4681      	mov	r9, r0
 800b594:	f04f 0300 	mov.w	r3, #0
 800b598:	f04f 020a 	mov.w	r2, #10
 800b59c:	4639      	mov	r1, r7
 800b59e:	4658      	mov	r0, fp
 800b5a0:	d107      	bne.n	800b5b2 <_dtoa_r+0xac2>
 800b5a2:	f000 f9cb 	bl	800b93c <__multadd>
 800b5a6:	4607      	mov	r7, r0
 800b5a8:	4605      	mov	r5, r0
 800b5aa:	9b07      	ldr	r3, [sp, #28]
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	9307      	str	r3, [sp, #28]
 800b5b0:	e774      	b.n	800b49c <_dtoa_r+0x9ac>
 800b5b2:	f000 f9c3 	bl	800b93c <__multadd>
 800b5b6:	4629      	mov	r1, r5
 800b5b8:	4607      	mov	r7, r0
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	220a      	movs	r2, #10
 800b5be:	4658      	mov	r0, fp
 800b5c0:	f000 f9bc 	bl	800b93c <__multadd>
 800b5c4:	4605      	mov	r5, r0
 800b5c6:	e7f0      	b.n	800b5aa <_dtoa_r+0xaba>
 800b5c8:	9b00      	ldr	r3, [sp, #0]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	bfcc      	ite	gt
 800b5ce:	461e      	movgt	r6, r3
 800b5d0:	2601      	movle	r6, #1
 800b5d2:	4456      	add	r6, sl
 800b5d4:	2700      	movs	r7, #0
 800b5d6:	4649      	mov	r1, r9
 800b5d8:	2201      	movs	r2, #1
 800b5da:	4658      	mov	r0, fp
 800b5dc:	f000 fba4 	bl	800bd28 <__lshift>
 800b5e0:	4621      	mov	r1, r4
 800b5e2:	4681      	mov	r9, r0
 800b5e4:	f000 fc0c 	bl	800be00 <__mcmp>
 800b5e8:	2800      	cmp	r0, #0
 800b5ea:	dcb0      	bgt.n	800b54e <_dtoa_r+0xa5e>
 800b5ec:	d102      	bne.n	800b5f4 <_dtoa_r+0xb04>
 800b5ee:	f018 0f01 	tst.w	r8, #1
 800b5f2:	d1ac      	bne.n	800b54e <_dtoa_r+0xa5e>
 800b5f4:	4633      	mov	r3, r6
 800b5f6:	461e      	mov	r6, r3
 800b5f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b5fc:	2a30      	cmp	r2, #48	@ 0x30
 800b5fe:	d0fa      	beq.n	800b5f6 <_dtoa_r+0xb06>
 800b600:	e5c2      	b.n	800b188 <_dtoa_r+0x698>
 800b602:	459a      	cmp	sl, r3
 800b604:	d1a4      	bne.n	800b550 <_dtoa_r+0xa60>
 800b606:	9b04      	ldr	r3, [sp, #16]
 800b608:	3301      	adds	r3, #1
 800b60a:	9304      	str	r3, [sp, #16]
 800b60c:	2331      	movs	r3, #49	@ 0x31
 800b60e:	f88a 3000 	strb.w	r3, [sl]
 800b612:	e5b9      	b.n	800b188 <_dtoa_r+0x698>
 800b614:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b616:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b674 <_dtoa_r+0xb84>
 800b61a:	b11b      	cbz	r3, 800b624 <_dtoa_r+0xb34>
 800b61c:	f10a 0308 	add.w	r3, sl, #8
 800b620:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b622:	6013      	str	r3, [r2, #0]
 800b624:	4650      	mov	r0, sl
 800b626:	b019      	add	sp, #100	@ 0x64
 800b628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b62c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b62e:	2b01      	cmp	r3, #1
 800b630:	f77f ae37 	ble.w	800b2a2 <_dtoa_r+0x7b2>
 800b634:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b636:	930a      	str	r3, [sp, #40]	@ 0x28
 800b638:	2001      	movs	r0, #1
 800b63a:	e655      	b.n	800b2e8 <_dtoa_r+0x7f8>
 800b63c:	9b00      	ldr	r3, [sp, #0]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	f77f aed6 	ble.w	800b3f0 <_dtoa_r+0x900>
 800b644:	4656      	mov	r6, sl
 800b646:	4621      	mov	r1, r4
 800b648:	4648      	mov	r0, r9
 800b64a:	f7ff f9c9 	bl	800a9e0 <quorem>
 800b64e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b652:	f806 8b01 	strb.w	r8, [r6], #1
 800b656:	9b00      	ldr	r3, [sp, #0]
 800b658:	eba6 020a 	sub.w	r2, r6, sl
 800b65c:	4293      	cmp	r3, r2
 800b65e:	ddb3      	ble.n	800b5c8 <_dtoa_r+0xad8>
 800b660:	4649      	mov	r1, r9
 800b662:	2300      	movs	r3, #0
 800b664:	220a      	movs	r2, #10
 800b666:	4658      	mov	r0, fp
 800b668:	f000 f968 	bl	800b93c <__multadd>
 800b66c:	4681      	mov	r9, r0
 800b66e:	e7ea      	b.n	800b646 <_dtoa_r+0xb56>
 800b670:	0800efa3 	.word	0x0800efa3
 800b674:	0800ef27 	.word	0x0800ef27

0800b678 <_free_r>:
 800b678:	b538      	push	{r3, r4, r5, lr}
 800b67a:	4605      	mov	r5, r0
 800b67c:	2900      	cmp	r1, #0
 800b67e:	d041      	beq.n	800b704 <_free_r+0x8c>
 800b680:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b684:	1f0c      	subs	r4, r1, #4
 800b686:	2b00      	cmp	r3, #0
 800b688:	bfb8      	it	lt
 800b68a:	18e4      	addlt	r4, r4, r3
 800b68c:	f000 f8e8 	bl	800b860 <__malloc_lock>
 800b690:	4a1d      	ldr	r2, [pc, #116]	@ (800b708 <_free_r+0x90>)
 800b692:	6813      	ldr	r3, [r2, #0]
 800b694:	b933      	cbnz	r3, 800b6a4 <_free_r+0x2c>
 800b696:	6063      	str	r3, [r4, #4]
 800b698:	6014      	str	r4, [r2, #0]
 800b69a:	4628      	mov	r0, r5
 800b69c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6a0:	f000 b8e4 	b.w	800b86c <__malloc_unlock>
 800b6a4:	42a3      	cmp	r3, r4
 800b6a6:	d908      	bls.n	800b6ba <_free_r+0x42>
 800b6a8:	6820      	ldr	r0, [r4, #0]
 800b6aa:	1821      	adds	r1, r4, r0
 800b6ac:	428b      	cmp	r3, r1
 800b6ae:	bf01      	itttt	eq
 800b6b0:	6819      	ldreq	r1, [r3, #0]
 800b6b2:	685b      	ldreq	r3, [r3, #4]
 800b6b4:	1809      	addeq	r1, r1, r0
 800b6b6:	6021      	streq	r1, [r4, #0]
 800b6b8:	e7ed      	b.n	800b696 <_free_r+0x1e>
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	685b      	ldr	r3, [r3, #4]
 800b6be:	b10b      	cbz	r3, 800b6c4 <_free_r+0x4c>
 800b6c0:	42a3      	cmp	r3, r4
 800b6c2:	d9fa      	bls.n	800b6ba <_free_r+0x42>
 800b6c4:	6811      	ldr	r1, [r2, #0]
 800b6c6:	1850      	adds	r0, r2, r1
 800b6c8:	42a0      	cmp	r0, r4
 800b6ca:	d10b      	bne.n	800b6e4 <_free_r+0x6c>
 800b6cc:	6820      	ldr	r0, [r4, #0]
 800b6ce:	4401      	add	r1, r0
 800b6d0:	1850      	adds	r0, r2, r1
 800b6d2:	4283      	cmp	r3, r0
 800b6d4:	6011      	str	r1, [r2, #0]
 800b6d6:	d1e0      	bne.n	800b69a <_free_r+0x22>
 800b6d8:	6818      	ldr	r0, [r3, #0]
 800b6da:	685b      	ldr	r3, [r3, #4]
 800b6dc:	6053      	str	r3, [r2, #4]
 800b6de:	4408      	add	r0, r1
 800b6e0:	6010      	str	r0, [r2, #0]
 800b6e2:	e7da      	b.n	800b69a <_free_r+0x22>
 800b6e4:	d902      	bls.n	800b6ec <_free_r+0x74>
 800b6e6:	230c      	movs	r3, #12
 800b6e8:	602b      	str	r3, [r5, #0]
 800b6ea:	e7d6      	b.n	800b69a <_free_r+0x22>
 800b6ec:	6820      	ldr	r0, [r4, #0]
 800b6ee:	1821      	adds	r1, r4, r0
 800b6f0:	428b      	cmp	r3, r1
 800b6f2:	bf04      	itt	eq
 800b6f4:	6819      	ldreq	r1, [r3, #0]
 800b6f6:	685b      	ldreq	r3, [r3, #4]
 800b6f8:	6063      	str	r3, [r4, #4]
 800b6fa:	bf04      	itt	eq
 800b6fc:	1809      	addeq	r1, r1, r0
 800b6fe:	6021      	streq	r1, [r4, #0]
 800b700:	6054      	str	r4, [r2, #4]
 800b702:	e7ca      	b.n	800b69a <_free_r+0x22>
 800b704:	bd38      	pop	{r3, r4, r5, pc}
 800b706:	bf00      	nop
 800b708:	20000f4c 	.word	0x20000f4c

0800b70c <malloc>:
 800b70c:	4b02      	ldr	r3, [pc, #8]	@ (800b718 <malloc+0xc>)
 800b70e:	4601      	mov	r1, r0
 800b710:	6818      	ldr	r0, [r3, #0]
 800b712:	f000 b825 	b.w	800b760 <_malloc_r>
 800b716:	bf00      	nop
 800b718:	2000004c 	.word	0x2000004c

0800b71c <sbrk_aligned>:
 800b71c:	b570      	push	{r4, r5, r6, lr}
 800b71e:	4e0f      	ldr	r6, [pc, #60]	@ (800b75c <sbrk_aligned+0x40>)
 800b720:	460c      	mov	r4, r1
 800b722:	6831      	ldr	r1, [r6, #0]
 800b724:	4605      	mov	r5, r0
 800b726:	b911      	cbnz	r1, 800b72e <sbrk_aligned+0x12>
 800b728:	f002 f988 	bl	800da3c <_sbrk_r>
 800b72c:	6030      	str	r0, [r6, #0]
 800b72e:	4621      	mov	r1, r4
 800b730:	4628      	mov	r0, r5
 800b732:	f002 f983 	bl	800da3c <_sbrk_r>
 800b736:	1c43      	adds	r3, r0, #1
 800b738:	d103      	bne.n	800b742 <sbrk_aligned+0x26>
 800b73a:	f04f 34ff 	mov.w	r4, #4294967295
 800b73e:	4620      	mov	r0, r4
 800b740:	bd70      	pop	{r4, r5, r6, pc}
 800b742:	1cc4      	adds	r4, r0, #3
 800b744:	f024 0403 	bic.w	r4, r4, #3
 800b748:	42a0      	cmp	r0, r4
 800b74a:	d0f8      	beq.n	800b73e <sbrk_aligned+0x22>
 800b74c:	1a21      	subs	r1, r4, r0
 800b74e:	4628      	mov	r0, r5
 800b750:	f002 f974 	bl	800da3c <_sbrk_r>
 800b754:	3001      	adds	r0, #1
 800b756:	d1f2      	bne.n	800b73e <sbrk_aligned+0x22>
 800b758:	e7ef      	b.n	800b73a <sbrk_aligned+0x1e>
 800b75a:	bf00      	nop
 800b75c:	20000f48 	.word	0x20000f48

0800b760 <_malloc_r>:
 800b760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b764:	1ccd      	adds	r5, r1, #3
 800b766:	f025 0503 	bic.w	r5, r5, #3
 800b76a:	3508      	adds	r5, #8
 800b76c:	2d0c      	cmp	r5, #12
 800b76e:	bf38      	it	cc
 800b770:	250c      	movcc	r5, #12
 800b772:	2d00      	cmp	r5, #0
 800b774:	4606      	mov	r6, r0
 800b776:	db01      	blt.n	800b77c <_malloc_r+0x1c>
 800b778:	42a9      	cmp	r1, r5
 800b77a:	d904      	bls.n	800b786 <_malloc_r+0x26>
 800b77c:	230c      	movs	r3, #12
 800b77e:	6033      	str	r3, [r6, #0]
 800b780:	2000      	movs	r0, #0
 800b782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b786:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b85c <_malloc_r+0xfc>
 800b78a:	f000 f869 	bl	800b860 <__malloc_lock>
 800b78e:	f8d8 3000 	ldr.w	r3, [r8]
 800b792:	461c      	mov	r4, r3
 800b794:	bb44      	cbnz	r4, 800b7e8 <_malloc_r+0x88>
 800b796:	4629      	mov	r1, r5
 800b798:	4630      	mov	r0, r6
 800b79a:	f7ff ffbf 	bl	800b71c <sbrk_aligned>
 800b79e:	1c43      	adds	r3, r0, #1
 800b7a0:	4604      	mov	r4, r0
 800b7a2:	d158      	bne.n	800b856 <_malloc_r+0xf6>
 800b7a4:	f8d8 4000 	ldr.w	r4, [r8]
 800b7a8:	4627      	mov	r7, r4
 800b7aa:	2f00      	cmp	r7, #0
 800b7ac:	d143      	bne.n	800b836 <_malloc_r+0xd6>
 800b7ae:	2c00      	cmp	r4, #0
 800b7b0:	d04b      	beq.n	800b84a <_malloc_r+0xea>
 800b7b2:	6823      	ldr	r3, [r4, #0]
 800b7b4:	4639      	mov	r1, r7
 800b7b6:	4630      	mov	r0, r6
 800b7b8:	eb04 0903 	add.w	r9, r4, r3
 800b7bc:	f002 f93e 	bl	800da3c <_sbrk_r>
 800b7c0:	4581      	cmp	r9, r0
 800b7c2:	d142      	bne.n	800b84a <_malloc_r+0xea>
 800b7c4:	6821      	ldr	r1, [r4, #0]
 800b7c6:	1a6d      	subs	r5, r5, r1
 800b7c8:	4629      	mov	r1, r5
 800b7ca:	4630      	mov	r0, r6
 800b7cc:	f7ff ffa6 	bl	800b71c <sbrk_aligned>
 800b7d0:	3001      	adds	r0, #1
 800b7d2:	d03a      	beq.n	800b84a <_malloc_r+0xea>
 800b7d4:	6823      	ldr	r3, [r4, #0]
 800b7d6:	442b      	add	r3, r5
 800b7d8:	6023      	str	r3, [r4, #0]
 800b7da:	f8d8 3000 	ldr.w	r3, [r8]
 800b7de:	685a      	ldr	r2, [r3, #4]
 800b7e0:	bb62      	cbnz	r2, 800b83c <_malloc_r+0xdc>
 800b7e2:	f8c8 7000 	str.w	r7, [r8]
 800b7e6:	e00f      	b.n	800b808 <_malloc_r+0xa8>
 800b7e8:	6822      	ldr	r2, [r4, #0]
 800b7ea:	1b52      	subs	r2, r2, r5
 800b7ec:	d420      	bmi.n	800b830 <_malloc_r+0xd0>
 800b7ee:	2a0b      	cmp	r2, #11
 800b7f0:	d917      	bls.n	800b822 <_malloc_r+0xc2>
 800b7f2:	1961      	adds	r1, r4, r5
 800b7f4:	42a3      	cmp	r3, r4
 800b7f6:	6025      	str	r5, [r4, #0]
 800b7f8:	bf18      	it	ne
 800b7fa:	6059      	strne	r1, [r3, #4]
 800b7fc:	6863      	ldr	r3, [r4, #4]
 800b7fe:	bf08      	it	eq
 800b800:	f8c8 1000 	streq.w	r1, [r8]
 800b804:	5162      	str	r2, [r4, r5]
 800b806:	604b      	str	r3, [r1, #4]
 800b808:	4630      	mov	r0, r6
 800b80a:	f000 f82f 	bl	800b86c <__malloc_unlock>
 800b80e:	f104 000b 	add.w	r0, r4, #11
 800b812:	1d23      	adds	r3, r4, #4
 800b814:	f020 0007 	bic.w	r0, r0, #7
 800b818:	1ac2      	subs	r2, r0, r3
 800b81a:	bf1c      	itt	ne
 800b81c:	1a1b      	subne	r3, r3, r0
 800b81e:	50a3      	strne	r3, [r4, r2]
 800b820:	e7af      	b.n	800b782 <_malloc_r+0x22>
 800b822:	6862      	ldr	r2, [r4, #4]
 800b824:	42a3      	cmp	r3, r4
 800b826:	bf0c      	ite	eq
 800b828:	f8c8 2000 	streq.w	r2, [r8]
 800b82c:	605a      	strne	r2, [r3, #4]
 800b82e:	e7eb      	b.n	800b808 <_malloc_r+0xa8>
 800b830:	4623      	mov	r3, r4
 800b832:	6864      	ldr	r4, [r4, #4]
 800b834:	e7ae      	b.n	800b794 <_malloc_r+0x34>
 800b836:	463c      	mov	r4, r7
 800b838:	687f      	ldr	r7, [r7, #4]
 800b83a:	e7b6      	b.n	800b7aa <_malloc_r+0x4a>
 800b83c:	461a      	mov	r2, r3
 800b83e:	685b      	ldr	r3, [r3, #4]
 800b840:	42a3      	cmp	r3, r4
 800b842:	d1fb      	bne.n	800b83c <_malloc_r+0xdc>
 800b844:	2300      	movs	r3, #0
 800b846:	6053      	str	r3, [r2, #4]
 800b848:	e7de      	b.n	800b808 <_malloc_r+0xa8>
 800b84a:	230c      	movs	r3, #12
 800b84c:	6033      	str	r3, [r6, #0]
 800b84e:	4630      	mov	r0, r6
 800b850:	f000 f80c 	bl	800b86c <__malloc_unlock>
 800b854:	e794      	b.n	800b780 <_malloc_r+0x20>
 800b856:	6005      	str	r5, [r0, #0]
 800b858:	e7d6      	b.n	800b808 <_malloc_r+0xa8>
 800b85a:	bf00      	nop
 800b85c:	20000f4c 	.word	0x20000f4c

0800b860 <__malloc_lock>:
 800b860:	4801      	ldr	r0, [pc, #4]	@ (800b868 <__malloc_lock+0x8>)
 800b862:	f7ff b8ac 	b.w	800a9be <__retarget_lock_acquire_recursive>
 800b866:	bf00      	nop
 800b868:	20000f44 	.word	0x20000f44

0800b86c <__malloc_unlock>:
 800b86c:	4801      	ldr	r0, [pc, #4]	@ (800b874 <__malloc_unlock+0x8>)
 800b86e:	f7ff b8a7 	b.w	800a9c0 <__retarget_lock_release_recursive>
 800b872:	bf00      	nop
 800b874:	20000f44 	.word	0x20000f44

0800b878 <_Balloc>:
 800b878:	b570      	push	{r4, r5, r6, lr}
 800b87a:	69c6      	ldr	r6, [r0, #28]
 800b87c:	4604      	mov	r4, r0
 800b87e:	460d      	mov	r5, r1
 800b880:	b976      	cbnz	r6, 800b8a0 <_Balloc+0x28>
 800b882:	2010      	movs	r0, #16
 800b884:	f7ff ff42 	bl	800b70c <malloc>
 800b888:	4602      	mov	r2, r0
 800b88a:	61e0      	str	r0, [r4, #28]
 800b88c:	b920      	cbnz	r0, 800b898 <_Balloc+0x20>
 800b88e:	4b18      	ldr	r3, [pc, #96]	@ (800b8f0 <_Balloc+0x78>)
 800b890:	4818      	ldr	r0, [pc, #96]	@ (800b8f4 <_Balloc+0x7c>)
 800b892:	216b      	movs	r1, #107	@ 0x6b
 800b894:	f002 f8f8 	bl	800da88 <__assert_func>
 800b898:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b89c:	6006      	str	r6, [r0, #0]
 800b89e:	60c6      	str	r6, [r0, #12]
 800b8a0:	69e6      	ldr	r6, [r4, #28]
 800b8a2:	68f3      	ldr	r3, [r6, #12]
 800b8a4:	b183      	cbz	r3, 800b8c8 <_Balloc+0x50>
 800b8a6:	69e3      	ldr	r3, [r4, #28]
 800b8a8:	68db      	ldr	r3, [r3, #12]
 800b8aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b8ae:	b9b8      	cbnz	r0, 800b8e0 <_Balloc+0x68>
 800b8b0:	2101      	movs	r1, #1
 800b8b2:	fa01 f605 	lsl.w	r6, r1, r5
 800b8b6:	1d72      	adds	r2, r6, #5
 800b8b8:	0092      	lsls	r2, r2, #2
 800b8ba:	4620      	mov	r0, r4
 800b8bc:	f002 f902 	bl	800dac4 <_calloc_r>
 800b8c0:	b160      	cbz	r0, 800b8dc <_Balloc+0x64>
 800b8c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b8c6:	e00e      	b.n	800b8e6 <_Balloc+0x6e>
 800b8c8:	2221      	movs	r2, #33	@ 0x21
 800b8ca:	2104      	movs	r1, #4
 800b8cc:	4620      	mov	r0, r4
 800b8ce:	f002 f8f9 	bl	800dac4 <_calloc_r>
 800b8d2:	69e3      	ldr	r3, [r4, #28]
 800b8d4:	60f0      	str	r0, [r6, #12]
 800b8d6:	68db      	ldr	r3, [r3, #12]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d1e4      	bne.n	800b8a6 <_Balloc+0x2e>
 800b8dc:	2000      	movs	r0, #0
 800b8de:	bd70      	pop	{r4, r5, r6, pc}
 800b8e0:	6802      	ldr	r2, [r0, #0]
 800b8e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b8ec:	e7f7      	b.n	800b8de <_Balloc+0x66>
 800b8ee:	bf00      	nop
 800b8f0:	0800ef34 	.word	0x0800ef34
 800b8f4:	0800efb4 	.word	0x0800efb4

0800b8f8 <_Bfree>:
 800b8f8:	b570      	push	{r4, r5, r6, lr}
 800b8fa:	69c6      	ldr	r6, [r0, #28]
 800b8fc:	4605      	mov	r5, r0
 800b8fe:	460c      	mov	r4, r1
 800b900:	b976      	cbnz	r6, 800b920 <_Bfree+0x28>
 800b902:	2010      	movs	r0, #16
 800b904:	f7ff ff02 	bl	800b70c <malloc>
 800b908:	4602      	mov	r2, r0
 800b90a:	61e8      	str	r0, [r5, #28]
 800b90c:	b920      	cbnz	r0, 800b918 <_Bfree+0x20>
 800b90e:	4b09      	ldr	r3, [pc, #36]	@ (800b934 <_Bfree+0x3c>)
 800b910:	4809      	ldr	r0, [pc, #36]	@ (800b938 <_Bfree+0x40>)
 800b912:	218f      	movs	r1, #143	@ 0x8f
 800b914:	f002 f8b8 	bl	800da88 <__assert_func>
 800b918:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b91c:	6006      	str	r6, [r0, #0]
 800b91e:	60c6      	str	r6, [r0, #12]
 800b920:	b13c      	cbz	r4, 800b932 <_Bfree+0x3a>
 800b922:	69eb      	ldr	r3, [r5, #28]
 800b924:	6862      	ldr	r2, [r4, #4]
 800b926:	68db      	ldr	r3, [r3, #12]
 800b928:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b92c:	6021      	str	r1, [r4, #0]
 800b92e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b932:	bd70      	pop	{r4, r5, r6, pc}
 800b934:	0800ef34 	.word	0x0800ef34
 800b938:	0800efb4 	.word	0x0800efb4

0800b93c <__multadd>:
 800b93c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b940:	690d      	ldr	r5, [r1, #16]
 800b942:	4607      	mov	r7, r0
 800b944:	460c      	mov	r4, r1
 800b946:	461e      	mov	r6, r3
 800b948:	f101 0c14 	add.w	ip, r1, #20
 800b94c:	2000      	movs	r0, #0
 800b94e:	f8dc 3000 	ldr.w	r3, [ip]
 800b952:	b299      	uxth	r1, r3
 800b954:	fb02 6101 	mla	r1, r2, r1, r6
 800b958:	0c1e      	lsrs	r6, r3, #16
 800b95a:	0c0b      	lsrs	r3, r1, #16
 800b95c:	fb02 3306 	mla	r3, r2, r6, r3
 800b960:	b289      	uxth	r1, r1
 800b962:	3001      	adds	r0, #1
 800b964:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b968:	4285      	cmp	r5, r0
 800b96a:	f84c 1b04 	str.w	r1, [ip], #4
 800b96e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b972:	dcec      	bgt.n	800b94e <__multadd+0x12>
 800b974:	b30e      	cbz	r6, 800b9ba <__multadd+0x7e>
 800b976:	68a3      	ldr	r3, [r4, #8]
 800b978:	42ab      	cmp	r3, r5
 800b97a:	dc19      	bgt.n	800b9b0 <__multadd+0x74>
 800b97c:	6861      	ldr	r1, [r4, #4]
 800b97e:	4638      	mov	r0, r7
 800b980:	3101      	adds	r1, #1
 800b982:	f7ff ff79 	bl	800b878 <_Balloc>
 800b986:	4680      	mov	r8, r0
 800b988:	b928      	cbnz	r0, 800b996 <__multadd+0x5a>
 800b98a:	4602      	mov	r2, r0
 800b98c:	4b0c      	ldr	r3, [pc, #48]	@ (800b9c0 <__multadd+0x84>)
 800b98e:	480d      	ldr	r0, [pc, #52]	@ (800b9c4 <__multadd+0x88>)
 800b990:	21ba      	movs	r1, #186	@ 0xba
 800b992:	f002 f879 	bl	800da88 <__assert_func>
 800b996:	6922      	ldr	r2, [r4, #16]
 800b998:	3202      	adds	r2, #2
 800b99a:	f104 010c 	add.w	r1, r4, #12
 800b99e:	0092      	lsls	r2, r2, #2
 800b9a0:	300c      	adds	r0, #12
 800b9a2:	f002 f85b 	bl	800da5c <memcpy>
 800b9a6:	4621      	mov	r1, r4
 800b9a8:	4638      	mov	r0, r7
 800b9aa:	f7ff ffa5 	bl	800b8f8 <_Bfree>
 800b9ae:	4644      	mov	r4, r8
 800b9b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b9b4:	3501      	adds	r5, #1
 800b9b6:	615e      	str	r6, [r3, #20]
 800b9b8:	6125      	str	r5, [r4, #16]
 800b9ba:	4620      	mov	r0, r4
 800b9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9c0:	0800efa3 	.word	0x0800efa3
 800b9c4:	0800efb4 	.word	0x0800efb4

0800b9c8 <__s2b>:
 800b9c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9cc:	460c      	mov	r4, r1
 800b9ce:	4615      	mov	r5, r2
 800b9d0:	461f      	mov	r7, r3
 800b9d2:	2209      	movs	r2, #9
 800b9d4:	3308      	adds	r3, #8
 800b9d6:	4606      	mov	r6, r0
 800b9d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b9dc:	2100      	movs	r1, #0
 800b9de:	2201      	movs	r2, #1
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	db09      	blt.n	800b9f8 <__s2b+0x30>
 800b9e4:	4630      	mov	r0, r6
 800b9e6:	f7ff ff47 	bl	800b878 <_Balloc>
 800b9ea:	b940      	cbnz	r0, 800b9fe <__s2b+0x36>
 800b9ec:	4602      	mov	r2, r0
 800b9ee:	4b19      	ldr	r3, [pc, #100]	@ (800ba54 <__s2b+0x8c>)
 800b9f0:	4819      	ldr	r0, [pc, #100]	@ (800ba58 <__s2b+0x90>)
 800b9f2:	21d3      	movs	r1, #211	@ 0xd3
 800b9f4:	f002 f848 	bl	800da88 <__assert_func>
 800b9f8:	0052      	lsls	r2, r2, #1
 800b9fa:	3101      	adds	r1, #1
 800b9fc:	e7f0      	b.n	800b9e0 <__s2b+0x18>
 800b9fe:	9b08      	ldr	r3, [sp, #32]
 800ba00:	6143      	str	r3, [r0, #20]
 800ba02:	2d09      	cmp	r5, #9
 800ba04:	f04f 0301 	mov.w	r3, #1
 800ba08:	6103      	str	r3, [r0, #16]
 800ba0a:	dd16      	ble.n	800ba3a <__s2b+0x72>
 800ba0c:	f104 0909 	add.w	r9, r4, #9
 800ba10:	46c8      	mov	r8, r9
 800ba12:	442c      	add	r4, r5
 800ba14:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ba18:	4601      	mov	r1, r0
 800ba1a:	3b30      	subs	r3, #48	@ 0x30
 800ba1c:	220a      	movs	r2, #10
 800ba1e:	4630      	mov	r0, r6
 800ba20:	f7ff ff8c 	bl	800b93c <__multadd>
 800ba24:	45a0      	cmp	r8, r4
 800ba26:	d1f5      	bne.n	800ba14 <__s2b+0x4c>
 800ba28:	f1a5 0408 	sub.w	r4, r5, #8
 800ba2c:	444c      	add	r4, r9
 800ba2e:	1b2d      	subs	r5, r5, r4
 800ba30:	1963      	adds	r3, r4, r5
 800ba32:	42bb      	cmp	r3, r7
 800ba34:	db04      	blt.n	800ba40 <__s2b+0x78>
 800ba36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba3a:	340a      	adds	r4, #10
 800ba3c:	2509      	movs	r5, #9
 800ba3e:	e7f6      	b.n	800ba2e <__s2b+0x66>
 800ba40:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ba44:	4601      	mov	r1, r0
 800ba46:	3b30      	subs	r3, #48	@ 0x30
 800ba48:	220a      	movs	r2, #10
 800ba4a:	4630      	mov	r0, r6
 800ba4c:	f7ff ff76 	bl	800b93c <__multadd>
 800ba50:	e7ee      	b.n	800ba30 <__s2b+0x68>
 800ba52:	bf00      	nop
 800ba54:	0800efa3 	.word	0x0800efa3
 800ba58:	0800efb4 	.word	0x0800efb4

0800ba5c <__hi0bits>:
 800ba5c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ba60:	4603      	mov	r3, r0
 800ba62:	bf36      	itet	cc
 800ba64:	0403      	lslcc	r3, r0, #16
 800ba66:	2000      	movcs	r0, #0
 800ba68:	2010      	movcc	r0, #16
 800ba6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ba6e:	bf3c      	itt	cc
 800ba70:	021b      	lslcc	r3, r3, #8
 800ba72:	3008      	addcc	r0, #8
 800ba74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ba78:	bf3c      	itt	cc
 800ba7a:	011b      	lslcc	r3, r3, #4
 800ba7c:	3004      	addcc	r0, #4
 800ba7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba82:	bf3c      	itt	cc
 800ba84:	009b      	lslcc	r3, r3, #2
 800ba86:	3002      	addcc	r0, #2
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	db05      	blt.n	800ba98 <__hi0bits+0x3c>
 800ba8c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ba90:	f100 0001 	add.w	r0, r0, #1
 800ba94:	bf08      	it	eq
 800ba96:	2020      	moveq	r0, #32
 800ba98:	4770      	bx	lr

0800ba9a <__lo0bits>:
 800ba9a:	6803      	ldr	r3, [r0, #0]
 800ba9c:	4602      	mov	r2, r0
 800ba9e:	f013 0007 	ands.w	r0, r3, #7
 800baa2:	d00b      	beq.n	800babc <__lo0bits+0x22>
 800baa4:	07d9      	lsls	r1, r3, #31
 800baa6:	d421      	bmi.n	800baec <__lo0bits+0x52>
 800baa8:	0798      	lsls	r0, r3, #30
 800baaa:	bf49      	itett	mi
 800baac:	085b      	lsrmi	r3, r3, #1
 800baae:	089b      	lsrpl	r3, r3, #2
 800bab0:	2001      	movmi	r0, #1
 800bab2:	6013      	strmi	r3, [r2, #0]
 800bab4:	bf5c      	itt	pl
 800bab6:	6013      	strpl	r3, [r2, #0]
 800bab8:	2002      	movpl	r0, #2
 800baba:	4770      	bx	lr
 800babc:	b299      	uxth	r1, r3
 800babe:	b909      	cbnz	r1, 800bac4 <__lo0bits+0x2a>
 800bac0:	0c1b      	lsrs	r3, r3, #16
 800bac2:	2010      	movs	r0, #16
 800bac4:	b2d9      	uxtb	r1, r3
 800bac6:	b909      	cbnz	r1, 800bacc <__lo0bits+0x32>
 800bac8:	3008      	adds	r0, #8
 800baca:	0a1b      	lsrs	r3, r3, #8
 800bacc:	0719      	lsls	r1, r3, #28
 800bace:	bf04      	itt	eq
 800bad0:	091b      	lsreq	r3, r3, #4
 800bad2:	3004      	addeq	r0, #4
 800bad4:	0799      	lsls	r1, r3, #30
 800bad6:	bf04      	itt	eq
 800bad8:	089b      	lsreq	r3, r3, #2
 800bada:	3002      	addeq	r0, #2
 800badc:	07d9      	lsls	r1, r3, #31
 800bade:	d403      	bmi.n	800bae8 <__lo0bits+0x4e>
 800bae0:	085b      	lsrs	r3, r3, #1
 800bae2:	f100 0001 	add.w	r0, r0, #1
 800bae6:	d003      	beq.n	800baf0 <__lo0bits+0x56>
 800bae8:	6013      	str	r3, [r2, #0]
 800baea:	4770      	bx	lr
 800baec:	2000      	movs	r0, #0
 800baee:	4770      	bx	lr
 800baf0:	2020      	movs	r0, #32
 800baf2:	4770      	bx	lr

0800baf4 <__i2b>:
 800baf4:	b510      	push	{r4, lr}
 800baf6:	460c      	mov	r4, r1
 800baf8:	2101      	movs	r1, #1
 800bafa:	f7ff febd 	bl	800b878 <_Balloc>
 800bafe:	4602      	mov	r2, r0
 800bb00:	b928      	cbnz	r0, 800bb0e <__i2b+0x1a>
 800bb02:	4b05      	ldr	r3, [pc, #20]	@ (800bb18 <__i2b+0x24>)
 800bb04:	4805      	ldr	r0, [pc, #20]	@ (800bb1c <__i2b+0x28>)
 800bb06:	f240 1145 	movw	r1, #325	@ 0x145
 800bb0a:	f001 ffbd 	bl	800da88 <__assert_func>
 800bb0e:	2301      	movs	r3, #1
 800bb10:	6144      	str	r4, [r0, #20]
 800bb12:	6103      	str	r3, [r0, #16]
 800bb14:	bd10      	pop	{r4, pc}
 800bb16:	bf00      	nop
 800bb18:	0800efa3 	.word	0x0800efa3
 800bb1c:	0800efb4 	.word	0x0800efb4

0800bb20 <__multiply>:
 800bb20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb24:	4614      	mov	r4, r2
 800bb26:	690a      	ldr	r2, [r1, #16]
 800bb28:	6923      	ldr	r3, [r4, #16]
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	bfa8      	it	ge
 800bb2e:	4623      	movge	r3, r4
 800bb30:	460f      	mov	r7, r1
 800bb32:	bfa4      	itt	ge
 800bb34:	460c      	movge	r4, r1
 800bb36:	461f      	movge	r7, r3
 800bb38:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bb3c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bb40:	68a3      	ldr	r3, [r4, #8]
 800bb42:	6861      	ldr	r1, [r4, #4]
 800bb44:	eb0a 0609 	add.w	r6, sl, r9
 800bb48:	42b3      	cmp	r3, r6
 800bb4a:	b085      	sub	sp, #20
 800bb4c:	bfb8      	it	lt
 800bb4e:	3101      	addlt	r1, #1
 800bb50:	f7ff fe92 	bl	800b878 <_Balloc>
 800bb54:	b930      	cbnz	r0, 800bb64 <__multiply+0x44>
 800bb56:	4602      	mov	r2, r0
 800bb58:	4b44      	ldr	r3, [pc, #272]	@ (800bc6c <__multiply+0x14c>)
 800bb5a:	4845      	ldr	r0, [pc, #276]	@ (800bc70 <__multiply+0x150>)
 800bb5c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bb60:	f001 ff92 	bl	800da88 <__assert_func>
 800bb64:	f100 0514 	add.w	r5, r0, #20
 800bb68:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bb6c:	462b      	mov	r3, r5
 800bb6e:	2200      	movs	r2, #0
 800bb70:	4543      	cmp	r3, r8
 800bb72:	d321      	bcc.n	800bbb8 <__multiply+0x98>
 800bb74:	f107 0114 	add.w	r1, r7, #20
 800bb78:	f104 0214 	add.w	r2, r4, #20
 800bb7c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bb80:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bb84:	9302      	str	r3, [sp, #8]
 800bb86:	1b13      	subs	r3, r2, r4
 800bb88:	3b15      	subs	r3, #21
 800bb8a:	f023 0303 	bic.w	r3, r3, #3
 800bb8e:	3304      	adds	r3, #4
 800bb90:	f104 0715 	add.w	r7, r4, #21
 800bb94:	42ba      	cmp	r2, r7
 800bb96:	bf38      	it	cc
 800bb98:	2304      	movcc	r3, #4
 800bb9a:	9301      	str	r3, [sp, #4]
 800bb9c:	9b02      	ldr	r3, [sp, #8]
 800bb9e:	9103      	str	r1, [sp, #12]
 800bba0:	428b      	cmp	r3, r1
 800bba2:	d80c      	bhi.n	800bbbe <__multiply+0x9e>
 800bba4:	2e00      	cmp	r6, #0
 800bba6:	dd03      	ble.n	800bbb0 <__multiply+0x90>
 800bba8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d05b      	beq.n	800bc68 <__multiply+0x148>
 800bbb0:	6106      	str	r6, [r0, #16]
 800bbb2:	b005      	add	sp, #20
 800bbb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbb8:	f843 2b04 	str.w	r2, [r3], #4
 800bbbc:	e7d8      	b.n	800bb70 <__multiply+0x50>
 800bbbe:	f8b1 a000 	ldrh.w	sl, [r1]
 800bbc2:	f1ba 0f00 	cmp.w	sl, #0
 800bbc6:	d024      	beq.n	800bc12 <__multiply+0xf2>
 800bbc8:	f104 0e14 	add.w	lr, r4, #20
 800bbcc:	46a9      	mov	r9, r5
 800bbce:	f04f 0c00 	mov.w	ip, #0
 800bbd2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bbd6:	f8d9 3000 	ldr.w	r3, [r9]
 800bbda:	fa1f fb87 	uxth.w	fp, r7
 800bbde:	b29b      	uxth	r3, r3
 800bbe0:	fb0a 330b 	mla	r3, sl, fp, r3
 800bbe4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bbe8:	f8d9 7000 	ldr.w	r7, [r9]
 800bbec:	4463      	add	r3, ip
 800bbee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bbf2:	fb0a c70b 	mla	r7, sl, fp, ip
 800bbf6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bbfa:	b29b      	uxth	r3, r3
 800bbfc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bc00:	4572      	cmp	r2, lr
 800bc02:	f849 3b04 	str.w	r3, [r9], #4
 800bc06:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bc0a:	d8e2      	bhi.n	800bbd2 <__multiply+0xb2>
 800bc0c:	9b01      	ldr	r3, [sp, #4]
 800bc0e:	f845 c003 	str.w	ip, [r5, r3]
 800bc12:	9b03      	ldr	r3, [sp, #12]
 800bc14:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bc18:	3104      	adds	r1, #4
 800bc1a:	f1b9 0f00 	cmp.w	r9, #0
 800bc1e:	d021      	beq.n	800bc64 <__multiply+0x144>
 800bc20:	682b      	ldr	r3, [r5, #0]
 800bc22:	f104 0c14 	add.w	ip, r4, #20
 800bc26:	46ae      	mov	lr, r5
 800bc28:	f04f 0a00 	mov.w	sl, #0
 800bc2c:	f8bc b000 	ldrh.w	fp, [ip]
 800bc30:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bc34:	fb09 770b 	mla	r7, r9, fp, r7
 800bc38:	4457      	add	r7, sl
 800bc3a:	b29b      	uxth	r3, r3
 800bc3c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bc40:	f84e 3b04 	str.w	r3, [lr], #4
 800bc44:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bc48:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bc4c:	f8be 3000 	ldrh.w	r3, [lr]
 800bc50:	fb09 330a 	mla	r3, r9, sl, r3
 800bc54:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bc58:	4562      	cmp	r2, ip
 800bc5a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bc5e:	d8e5      	bhi.n	800bc2c <__multiply+0x10c>
 800bc60:	9f01      	ldr	r7, [sp, #4]
 800bc62:	51eb      	str	r3, [r5, r7]
 800bc64:	3504      	adds	r5, #4
 800bc66:	e799      	b.n	800bb9c <__multiply+0x7c>
 800bc68:	3e01      	subs	r6, #1
 800bc6a:	e79b      	b.n	800bba4 <__multiply+0x84>
 800bc6c:	0800efa3 	.word	0x0800efa3
 800bc70:	0800efb4 	.word	0x0800efb4

0800bc74 <__pow5mult>:
 800bc74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc78:	4615      	mov	r5, r2
 800bc7a:	f012 0203 	ands.w	r2, r2, #3
 800bc7e:	4607      	mov	r7, r0
 800bc80:	460e      	mov	r6, r1
 800bc82:	d007      	beq.n	800bc94 <__pow5mult+0x20>
 800bc84:	4c25      	ldr	r4, [pc, #148]	@ (800bd1c <__pow5mult+0xa8>)
 800bc86:	3a01      	subs	r2, #1
 800bc88:	2300      	movs	r3, #0
 800bc8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bc8e:	f7ff fe55 	bl	800b93c <__multadd>
 800bc92:	4606      	mov	r6, r0
 800bc94:	10ad      	asrs	r5, r5, #2
 800bc96:	d03d      	beq.n	800bd14 <__pow5mult+0xa0>
 800bc98:	69fc      	ldr	r4, [r7, #28]
 800bc9a:	b97c      	cbnz	r4, 800bcbc <__pow5mult+0x48>
 800bc9c:	2010      	movs	r0, #16
 800bc9e:	f7ff fd35 	bl	800b70c <malloc>
 800bca2:	4602      	mov	r2, r0
 800bca4:	61f8      	str	r0, [r7, #28]
 800bca6:	b928      	cbnz	r0, 800bcb4 <__pow5mult+0x40>
 800bca8:	4b1d      	ldr	r3, [pc, #116]	@ (800bd20 <__pow5mult+0xac>)
 800bcaa:	481e      	ldr	r0, [pc, #120]	@ (800bd24 <__pow5mult+0xb0>)
 800bcac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bcb0:	f001 feea 	bl	800da88 <__assert_func>
 800bcb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bcb8:	6004      	str	r4, [r0, #0]
 800bcba:	60c4      	str	r4, [r0, #12]
 800bcbc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bcc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bcc4:	b94c      	cbnz	r4, 800bcda <__pow5mult+0x66>
 800bcc6:	f240 2171 	movw	r1, #625	@ 0x271
 800bcca:	4638      	mov	r0, r7
 800bccc:	f7ff ff12 	bl	800baf4 <__i2b>
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	f8c8 0008 	str.w	r0, [r8, #8]
 800bcd6:	4604      	mov	r4, r0
 800bcd8:	6003      	str	r3, [r0, #0]
 800bcda:	f04f 0900 	mov.w	r9, #0
 800bcde:	07eb      	lsls	r3, r5, #31
 800bce0:	d50a      	bpl.n	800bcf8 <__pow5mult+0x84>
 800bce2:	4631      	mov	r1, r6
 800bce4:	4622      	mov	r2, r4
 800bce6:	4638      	mov	r0, r7
 800bce8:	f7ff ff1a 	bl	800bb20 <__multiply>
 800bcec:	4631      	mov	r1, r6
 800bcee:	4680      	mov	r8, r0
 800bcf0:	4638      	mov	r0, r7
 800bcf2:	f7ff fe01 	bl	800b8f8 <_Bfree>
 800bcf6:	4646      	mov	r6, r8
 800bcf8:	106d      	asrs	r5, r5, #1
 800bcfa:	d00b      	beq.n	800bd14 <__pow5mult+0xa0>
 800bcfc:	6820      	ldr	r0, [r4, #0]
 800bcfe:	b938      	cbnz	r0, 800bd10 <__pow5mult+0x9c>
 800bd00:	4622      	mov	r2, r4
 800bd02:	4621      	mov	r1, r4
 800bd04:	4638      	mov	r0, r7
 800bd06:	f7ff ff0b 	bl	800bb20 <__multiply>
 800bd0a:	6020      	str	r0, [r4, #0]
 800bd0c:	f8c0 9000 	str.w	r9, [r0]
 800bd10:	4604      	mov	r4, r0
 800bd12:	e7e4      	b.n	800bcde <__pow5mult+0x6a>
 800bd14:	4630      	mov	r0, r6
 800bd16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd1a:	bf00      	nop
 800bd1c:	0800f010 	.word	0x0800f010
 800bd20:	0800ef34 	.word	0x0800ef34
 800bd24:	0800efb4 	.word	0x0800efb4

0800bd28 <__lshift>:
 800bd28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd2c:	460c      	mov	r4, r1
 800bd2e:	6849      	ldr	r1, [r1, #4]
 800bd30:	6923      	ldr	r3, [r4, #16]
 800bd32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bd36:	68a3      	ldr	r3, [r4, #8]
 800bd38:	4607      	mov	r7, r0
 800bd3a:	4691      	mov	r9, r2
 800bd3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bd40:	f108 0601 	add.w	r6, r8, #1
 800bd44:	42b3      	cmp	r3, r6
 800bd46:	db0b      	blt.n	800bd60 <__lshift+0x38>
 800bd48:	4638      	mov	r0, r7
 800bd4a:	f7ff fd95 	bl	800b878 <_Balloc>
 800bd4e:	4605      	mov	r5, r0
 800bd50:	b948      	cbnz	r0, 800bd66 <__lshift+0x3e>
 800bd52:	4602      	mov	r2, r0
 800bd54:	4b28      	ldr	r3, [pc, #160]	@ (800bdf8 <__lshift+0xd0>)
 800bd56:	4829      	ldr	r0, [pc, #164]	@ (800bdfc <__lshift+0xd4>)
 800bd58:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bd5c:	f001 fe94 	bl	800da88 <__assert_func>
 800bd60:	3101      	adds	r1, #1
 800bd62:	005b      	lsls	r3, r3, #1
 800bd64:	e7ee      	b.n	800bd44 <__lshift+0x1c>
 800bd66:	2300      	movs	r3, #0
 800bd68:	f100 0114 	add.w	r1, r0, #20
 800bd6c:	f100 0210 	add.w	r2, r0, #16
 800bd70:	4618      	mov	r0, r3
 800bd72:	4553      	cmp	r3, sl
 800bd74:	db33      	blt.n	800bdde <__lshift+0xb6>
 800bd76:	6920      	ldr	r0, [r4, #16]
 800bd78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bd7c:	f104 0314 	add.w	r3, r4, #20
 800bd80:	f019 091f 	ands.w	r9, r9, #31
 800bd84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bd88:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bd8c:	d02b      	beq.n	800bde6 <__lshift+0xbe>
 800bd8e:	f1c9 0e20 	rsb	lr, r9, #32
 800bd92:	468a      	mov	sl, r1
 800bd94:	2200      	movs	r2, #0
 800bd96:	6818      	ldr	r0, [r3, #0]
 800bd98:	fa00 f009 	lsl.w	r0, r0, r9
 800bd9c:	4310      	orrs	r0, r2
 800bd9e:	f84a 0b04 	str.w	r0, [sl], #4
 800bda2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bda6:	459c      	cmp	ip, r3
 800bda8:	fa22 f20e 	lsr.w	r2, r2, lr
 800bdac:	d8f3      	bhi.n	800bd96 <__lshift+0x6e>
 800bdae:	ebac 0304 	sub.w	r3, ip, r4
 800bdb2:	3b15      	subs	r3, #21
 800bdb4:	f023 0303 	bic.w	r3, r3, #3
 800bdb8:	3304      	adds	r3, #4
 800bdba:	f104 0015 	add.w	r0, r4, #21
 800bdbe:	4584      	cmp	ip, r0
 800bdc0:	bf38      	it	cc
 800bdc2:	2304      	movcc	r3, #4
 800bdc4:	50ca      	str	r2, [r1, r3]
 800bdc6:	b10a      	cbz	r2, 800bdcc <__lshift+0xa4>
 800bdc8:	f108 0602 	add.w	r6, r8, #2
 800bdcc:	3e01      	subs	r6, #1
 800bdce:	4638      	mov	r0, r7
 800bdd0:	612e      	str	r6, [r5, #16]
 800bdd2:	4621      	mov	r1, r4
 800bdd4:	f7ff fd90 	bl	800b8f8 <_Bfree>
 800bdd8:	4628      	mov	r0, r5
 800bdda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdde:	f842 0f04 	str.w	r0, [r2, #4]!
 800bde2:	3301      	adds	r3, #1
 800bde4:	e7c5      	b.n	800bd72 <__lshift+0x4a>
 800bde6:	3904      	subs	r1, #4
 800bde8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdec:	f841 2f04 	str.w	r2, [r1, #4]!
 800bdf0:	459c      	cmp	ip, r3
 800bdf2:	d8f9      	bhi.n	800bde8 <__lshift+0xc0>
 800bdf4:	e7ea      	b.n	800bdcc <__lshift+0xa4>
 800bdf6:	bf00      	nop
 800bdf8:	0800efa3 	.word	0x0800efa3
 800bdfc:	0800efb4 	.word	0x0800efb4

0800be00 <__mcmp>:
 800be00:	690a      	ldr	r2, [r1, #16]
 800be02:	4603      	mov	r3, r0
 800be04:	6900      	ldr	r0, [r0, #16]
 800be06:	1a80      	subs	r0, r0, r2
 800be08:	b530      	push	{r4, r5, lr}
 800be0a:	d10e      	bne.n	800be2a <__mcmp+0x2a>
 800be0c:	3314      	adds	r3, #20
 800be0e:	3114      	adds	r1, #20
 800be10:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800be14:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800be18:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800be1c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800be20:	4295      	cmp	r5, r2
 800be22:	d003      	beq.n	800be2c <__mcmp+0x2c>
 800be24:	d205      	bcs.n	800be32 <__mcmp+0x32>
 800be26:	f04f 30ff 	mov.w	r0, #4294967295
 800be2a:	bd30      	pop	{r4, r5, pc}
 800be2c:	42a3      	cmp	r3, r4
 800be2e:	d3f3      	bcc.n	800be18 <__mcmp+0x18>
 800be30:	e7fb      	b.n	800be2a <__mcmp+0x2a>
 800be32:	2001      	movs	r0, #1
 800be34:	e7f9      	b.n	800be2a <__mcmp+0x2a>
	...

0800be38 <__mdiff>:
 800be38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be3c:	4689      	mov	r9, r1
 800be3e:	4606      	mov	r6, r0
 800be40:	4611      	mov	r1, r2
 800be42:	4648      	mov	r0, r9
 800be44:	4614      	mov	r4, r2
 800be46:	f7ff ffdb 	bl	800be00 <__mcmp>
 800be4a:	1e05      	subs	r5, r0, #0
 800be4c:	d112      	bne.n	800be74 <__mdiff+0x3c>
 800be4e:	4629      	mov	r1, r5
 800be50:	4630      	mov	r0, r6
 800be52:	f7ff fd11 	bl	800b878 <_Balloc>
 800be56:	4602      	mov	r2, r0
 800be58:	b928      	cbnz	r0, 800be66 <__mdiff+0x2e>
 800be5a:	4b3f      	ldr	r3, [pc, #252]	@ (800bf58 <__mdiff+0x120>)
 800be5c:	f240 2137 	movw	r1, #567	@ 0x237
 800be60:	483e      	ldr	r0, [pc, #248]	@ (800bf5c <__mdiff+0x124>)
 800be62:	f001 fe11 	bl	800da88 <__assert_func>
 800be66:	2301      	movs	r3, #1
 800be68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800be6c:	4610      	mov	r0, r2
 800be6e:	b003      	add	sp, #12
 800be70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be74:	bfbc      	itt	lt
 800be76:	464b      	movlt	r3, r9
 800be78:	46a1      	movlt	r9, r4
 800be7a:	4630      	mov	r0, r6
 800be7c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800be80:	bfba      	itte	lt
 800be82:	461c      	movlt	r4, r3
 800be84:	2501      	movlt	r5, #1
 800be86:	2500      	movge	r5, #0
 800be88:	f7ff fcf6 	bl	800b878 <_Balloc>
 800be8c:	4602      	mov	r2, r0
 800be8e:	b918      	cbnz	r0, 800be98 <__mdiff+0x60>
 800be90:	4b31      	ldr	r3, [pc, #196]	@ (800bf58 <__mdiff+0x120>)
 800be92:	f240 2145 	movw	r1, #581	@ 0x245
 800be96:	e7e3      	b.n	800be60 <__mdiff+0x28>
 800be98:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800be9c:	6926      	ldr	r6, [r4, #16]
 800be9e:	60c5      	str	r5, [r0, #12]
 800bea0:	f109 0310 	add.w	r3, r9, #16
 800bea4:	f109 0514 	add.w	r5, r9, #20
 800bea8:	f104 0e14 	add.w	lr, r4, #20
 800beac:	f100 0b14 	add.w	fp, r0, #20
 800beb0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800beb4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800beb8:	9301      	str	r3, [sp, #4]
 800beba:	46d9      	mov	r9, fp
 800bebc:	f04f 0c00 	mov.w	ip, #0
 800bec0:	9b01      	ldr	r3, [sp, #4]
 800bec2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bec6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800beca:	9301      	str	r3, [sp, #4]
 800becc:	fa1f f38a 	uxth.w	r3, sl
 800bed0:	4619      	mov	r1, r3
 800bed2:	b283      	uxth	r3, r0
 800bed4:	1acb      	subs	r3, r1, r3
 800bed6:	0c00      	lsrs	r0, r0, #16
 800bed8:	4463      	add	r3, ip
 800beda:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bede:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bee2:	b29b      	uxth	r3, r3
 800bee4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bee8:	4576      	cmp	r6, lr
 800beea:	f849 3b04 	str.w	r3, [r9], #4
 800beee:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bef2:	d8e5      	bhi.n	800bec0 <__mdiff+0x88>
 800bef4:	1b33      	subs	r3, r6, r4
 800bef6:	3b15      	subs	r3, #21
 800bef8:	f023 0303 	bic.w	r3, r3, #3
 800befc:	3415      	adds	r4, #21
 800befe:	3304      	adds	r3, #4
 800bf00:	42a6      	cmp	r6, r4
 800bf02:	bf38      	it	cc
 800bf04:	2304      	movcc	r3, #4
 800bf06:	441d      	add	r5, r3
 800bf08:	445b      	add	r3, fp
 800bf0a:	461e      	mov	r6, r3
 800bf0c:	462c      	mov	r4, r5
 800bf0e:	4544      	cmp	r4, r8
 800bf10:	d30e      	bcc.n	800bf30 <__mdiff+0xf8>
 800bf12:	f108 0103 	add.w	r1, r8, #3
 800bf16:	1b49      	subs	r1, r1, r5
 800bf18:	f021 0103 	bic.w	r1, r1, #3
 800bf1c:	3d03      	subs	r5, #3
 800bf1e:	45a8      	cmp	r8, r5
 800bf20:	bf38      	it	cc
 800bf22:	2100      	movcc	r1, #0
 800bf24:	440b      	add	r3, r1
 800bf26:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bf2a:	b191      	cbz	r1, 800bf52 <__mdiff+0x11a>
 800bf2c:	6117      	str	r7, [r2, #16]
 800bf2e:	e79d      	b.n	800be6c <__mdiff+0x34>
 800bf30:	f854 1b04 	ldr.w	r1, [r4], #4
 800bf34:	46e6      	mov	lr, ip
 800bf36:	0c08      	lsrs	r0, r1, #16
 800bf38:	fa1c fc81 	uxtah	ip, ip, r1
 800bf3c:	4471      	add	r1, lr
 800bf3e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bf42:	b289      	uxth	r1, r1
 800bf44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bf48:	f846 1b04 	str.w	r1, [r6], #4
 800bf4c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bf50:	e7dd      	b.n	800bf0e <__mdiff+0xd6>
 800bf52:	3f01      	subs	r7, #1
 800bf54:	e7e7      	b.n	800bf26 <__mdiff+0xee>
 800bf56:	bf00      	nop
 800bf58:	0800efa3 	.word	0x0800efa3
 800bf5c:	0800efb4 	.word	0x0800efb4

0800bf60 <__ulp>:
 800bf60:	b082      	sub	sp, #8
 800bf62:	ed8d 0b00 	vstr	d0, [sp]
 800bf66:	9a01      	ldr	r2, [sp, #4]
 800bf68:	4b0f      	ldr	r3, [pc, #60]	@ (800bfa8 <__ulp+0x48>)
 800bf6a:	4013      	ands	r3, r2
 800bf6c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	dc08      	bgt.n	800bf86 <__ulp+0x26>
 800bf74:	425b      	negs	r3, r3
 800bf76:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800bf7a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bf7e:	da04      	bge.n	800bf8a <__ulp+0x2a>
 800bf80:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800bf84:	4113      	asrs	r3, r2
 800bf86:	2200      	movs	r2, #0
 800bf88:	e008      	b.n	800bf9c <__ulp+0x3c>
 800bf8a:	f1a2 0314 	sub.w	r3, r2, #20
 800bf8e:	2b1e      	cmp	r3, #30
 800bf90:	bfda      	itte	le
 800bf92:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800bf96:	40da      	lsrle	r2, r3
 800bf98:	2201      	movgt	r2, #1
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	4610      	mov	r0, r2
 800bfa0:	ec41 0b10 	vmov	d0, r0, r1
 800bfa4:	b002      	add	sp, #8
 800bfa6:	4770      	bx	lr
 800bfa8:	7ff00000 	.word	0x7ff00000

0800bfac <__b2d>:
 800bfac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfb0:	6906      	ldr	r6, [r0, #16]
 800bfb2:	f100 0814 	add.w	r8, r0, #20
 800bfb6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bfba:	1f37      	subs	r7, r6, #4
 800bfbc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bfc0:	4610      	mov	r0, r2
 800bfc2:	f7ff fd4b 	bl	800ba5c <__hi0bits>
 800bfc6:	f1c0 0320 	rsb	r3, r0, #32
 800bfca:	280a      	cmp	r0, #10
 800bfcc:	600b      	str	r3, [r1, #0]
 800bfce:	491b      	ldr	r1, [pc, #108]	@ (800c03c <__b2d+0x90>)
 800bfd0:	dc15      	bgt.n	800bffe <__b2d+0x52>
 800bfd2:	f1c0 0c0b 	rsb	ip, r0, #11
 800bfd6:	fa22 f30c 	lsr.w	r3, r2, ip
 800bfda:	45b8      	cmp	r8, r7
 800bfdc:	ea43 0501 	orr.w	r5, r3, r1
 800bfe0:	bf34      	ite	cc
 800bfe2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bfe6:	2300      	movcs	r3, #0
 800bfe8:	3015      	adds	r0, #21
 800bfea:	fa02 f000 	lsl.w	r0, r2, r0
 800bfee:	fa23 f30c 	lsr.w	r3, r3, ip
 800bff2:	4303      	orrs	r3, r0
 800bff4:	461c      	mov	r4, r3
 800bff6:	ec45 4b10 	vmov	d0, r4, r5
 800bffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bffe:	45b8      	cmp	r8, r7
 800c000:	bf3a      	itte	cc
 800c002:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c006:	f1a6 0708 	subcc.w	r7, r6, #8
 800c00a:	2300      	movcs	r3, #0
 800c00c:	380b      	subs	r0, #11
 800c00e:	d012      	beq.n	800c036 <__b2d+0x8a>
 800c010:	f1c0 0120 	rsb	r1, r0, #32
 800c014:	fa23 f401 	lsr.w	r4, r3, r1
 800c018:	4082      	lsls	r2, r0
 800c01a:	4322      	orrs	r2, r4
 800c01c:	4547      	cmp	r7, r8
 800c01e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c022:	bf8c      	ite	hi
 800c024:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c028:	2200      	movls	r2, #0
 800c02a:	4083      	lsls	r3, r0
 800c02c:	40ca      	lsrs	r2, r1
 800c02e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c032:	4313      	orrs	r3, r2
 800c034:	e7de      	b.n	800bff4 <__b2d+0x48>
 800c036:	ea42 0501 	orr.w	r5, r2, r1
 800c03a:	e7db      	b.n	800bff4 <__b2d+0x48>
 800c03c:	3ff00000 	.word	0x3ff00000

0800c040 <__d2b>:
 800c040:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c044:	460f      	mov	r7, r1
 800c046:	2101      	movs	r1, #1
 800c048:	ec59 8b10 	vmov	r8, r9, d0
 800c04c:	4616      	mov	r6, r2
 800c04e:	f7ff fc13 	bl	800b878 <_Balloc>
 800c052:	4604      	mov	r4, r0
 800c054:	b930      	cbnz	r0, 800c064 <__d2b+0x24>
 800c056:	4602      	mov	r2, r0
 800c058:	4b23      	ldr	r3, [pc, #140]	@ (800c0e8 <__d2b+0xa8>)
 800c05a:	4824      	ldr	r0, [pc, #144]	@ (800c0ec <__d2b+0xac>)
 800c05c:	f240 310f 	movw	r1, #783	@ 0x30f
 800c060:	f001 fd12 	bl	800da88 <__assert_func>
 800c064:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c068:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c06c:	b10d      	cbz	r5, 800c072 <__d2b+0x32>
 800c06e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c072:	9301      	str	r3, [sp, #4]
 800c074:	f1b8 0300 	subs.w	r3, r8, #0
 800c078:	d023      	beq.n	800c0c2 <__d2b+0x82>
 800c07a:	4668      	mov	r0, sp
 800c07c:	9300      	str	r3, [sp, #0]
 800c07e:	f7ff fd0c 	bl	800ba9a <__lo0bits>
 800c082:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c086:	b1d0      	cbz	r0, 800c0be <__d2b+0x7e>
 800c088:	f1c0 0320 	rsb	r3, r0, #32
 800c08c:	fa02 f303 	lsl.w	r3, r2, r3
 800c090:	430b      	orrs	r3, r1
 800c092:	40c2      	lsrs	r2, r0
 800c094:	6163      	str	r3, [r4, #20]
 800c096:	9201      	str	r2, [sp, #4]
 800c098:	9b01      	ldr	r3, [sp, #4]
 800c09a:	61a3      	str	r3, [r4, #24]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	bf0c      	ite	eq
 800c0a0:	2201      	moveq	r2, #1
 800c0a2:	2202      	movne	r2, #2
 800c0a4:	6122      	str	r2, [r4, #16]
 800c0a6:	b1a5      	cbz	r5, 800c0d2 <__d2b+0x92>
 800c0a8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c0ac:	4405      	add	r5, r0
 800c0ae:	603d      	str	r5, [r7, #0]
 800c0b0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c0b4:	6030      	str	r0, [r6, #0]
 800c0b6:	4620      	mov	r0, r4
 800c0b8:	b003      	add	sp, #12
 800c0ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0be:	6161      	str	r1, [r4, #20]
 800c0c0:	e7ea      	b.n	800c098 <__d2b+0x58>
 800c0c2:	a801      	add	r0, sp, #4
 800c0c4:	f7ff fce9 	bl	800ba9a <__lo0bits>
 800c0c8:	9b01      	ldr	r3, [sp, #4]
 800c0ca:	6163      	str	r3, [r4, #20]
 800c0cc:	3020      	adds	r0, #32
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	e7e8      	b.n	800c0a4 <__d2b+0x64>
 800c0d2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c0d6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c0da:	6038      	str	r0, [r7, #0]
 800c0dc:	6918      	ldr	r0, [r3, #16]
 800c0de:	f7ff fcbd 	bl	800ba5c <__hi0bits>
 800c0e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c0e6:	e7e5      	b.n	800c0b4 <__d2b+0x74>
 800c0e8:	0800efa3 	.word	0x0800efa3
 800c0ec:	0800efb4 	.word	0x0800efb4

0800c0f0 <__ratio>:
 800c0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0f4:	b085      	sub	sp, #20
 800c0f6:	e9cd 1000 	strd	r1, r0, [sp]
 800c0fa:	a902      	add	r1, sp, #8
 800c0fc:	f7ff ff56 	bl	800bfac <__b2d>
 800c100:	9800      	ldr	r0, [sp, #0]
 800c102:	a903      	add	r1, sp, #12
 800c104:	ec55 4b10 	vmov	r4, r5, d0
 800c108:	f7ff ff50 	bl	800bfac <__b2d>
 800c10c:	9b01      	ldr	r3, [sp, #4]
 800c10e:	6919      	ldr	r1, [r3, #16]
 800c110:	9b00      	ldr	r3, [sp, #0]
 800c112:	691b      	ldr	r3, [r3, #16]
 800c114:	1ac9      	subs	r1, r1, r3
 800c116:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c11a:	1a9b      	subs	r3, r3, r2
 800c11c:	ec5b ab10 	vmov	sl, fp, d0
 800c120:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c124:	2b00      	cmp	r3, #0
 800c126:	bfce      	itee	gt
 800c128:	462a      	movgt	r2, r5
 800c12a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c12e:	465a      	movle	r2, fp
 800c130:	462f      	mov	r7, r5
 800c132:	46d9      	mov	r9, fp
 800c134:	bfcc      	ite	gt
 800c136:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c13a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c13e:	464b      	mov	r3, r9
 800c140:	4652      	mov	r2, sl
 800c142:	4620      	mov	r0, r4
 800c144:	4639      	mov	r1, r7
 800c146:	f7f4 fb81 	bl	800084c <__aeabi_ddiv>
 800c14a:	ec41 0b10 	vmov	d0, r0, r1
 800c14e:	b005      	add	sp, #20
 800c150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c154 <__copybits>:
 800c154:	3901      	subs	r1, #1
 800c156:	b570      	push	{r4, r5, r6, lr}
 800c158:	1149      	asrs	r1, r1, #5
 800c15a:	6914      	ldr	r4, [r2, #16]
 800c15c:	3101      	adds	r1, #1
 800c15e:	f102 0314 	add.w	r3, r2, #20
 800c162:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c166:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c16a:	1f05      	subs	r5, r0, #4
 800c16c:	42a3      	cmp	r3, r4
 800c16e:	d30c      	bcc.n	800c18a <__copybits+0x36>
 800c170:	1aa3      	subs	r3, r4, r2
 800c172:	3b11      	subs	r3, #17
 800c174:	f023 0303 	bic.w	r3, r3, #3
 800c178:	3211      	adds	r2, #17
 800c17a:	42a2      	cmp	r2, r4
 800c17c:	bf88      	it	hi
 800c17e:	2300      	movhi	r3, #0
 800c180:	4418      	add	r0, r3
 800c182:	2300      	movs	r3, #0
 800c184:	4288      	cmp	r0, r1
 800c186:	d305      	bcc.n	800c194 <__copybits+0x40>
 800c188:	bd70      	pop	{r4, r5, r6, pc}
 800c18a:	f853 6b04 	ldr.w	r6, [r3], #4
 800c18e:	f845 6f04 	str.w	r6, [r5, #4]!
 800c192:	e7eb      	b.n	800c16c <__copybits+0x18>
 800c194:	f840 3b04 	str.w	r3, [r0], #4
 800c198:	e7f4      	b.n	800c184 <__copybits+0x30>

0800c19a <__any_on>:
 800c19a:	f100 0214 	add.w	r2, r0, #20
 800c19e:	6900      	ldr	r0, [r0, #16]
 800c1a0:	114b      	asrs	r3, r1, #5
 800c1a2:	4298      	cmp	r0, r3
 800c1a4:	b510      	push	{r4, lr}
 800c1a6:	db11      	blt.n	800c1cc <__any_on+0x32>
 800c1a8:	dd0a      	ble.n	800c1c0 <__any_on+0x26>
 800c1aa:	f011 011f 	ands.w	r1, r1, #31
 800c1ae:	d007      	beq.n	800c1c0 <__any_on+0x26>
 800c1b0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c1b4:	fa24 f001 	lsr.w	r0, r4, r1
 800c1b8:	fa00 f101 	lsl.w	r1, r0, r1
 800c1bc:	428c      	cmp	r4, r1
 800c1be:	d10b      	bne.n	800c1d8 <__any_on+0x3e>
 800c1c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c1c4:	4293      	cmp	r3, r2
 800c1c6:	d803      	bhi.n	800c1d0 <__any_on+0x36>
 800c1c8:	2000      	movs	r0, #0
 800c1ca:	bd10      	pop	{r4, pc}
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	e7f7      	b.n	800c1c0 <__any_on+0x26>
 800c1d0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c1d4:	2900      	cmp	r1, #0
 800c1d6:	d0f5      	beq.n	800c1c4 <__any_on+0x2a>
 800c1d8:	2001      	movs	r0, #1
 800c1da:	e7f6      	b.n	800c1ca <__any_on+0x30>

0800c1dc <sulp>:
 800c1dc:	b570      	push	{r4, r5, r6, lr}
 800c1de:	4604      	mov	r4, r0
 800c1e0:	460d      	mov	r5, r1
 800c1e2:	ec45 4b10 	vmov	d0, r4, r5
 800c1e6:	4616      	mov	r6, r2
 800c1e8:	f7ff feba 	bl	800bf60 <__ulp>
 800c1ec:	ec51 0b10 	vmov	r0, r1, d0
 800c1f0:	b17e      	cbz	r6, 800c212 <sulp+0x36>
 800c1f2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c1f6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	dd09      	ble.n	800c212 <sulp+0x36>
 800c1fe:	051b      	lsls	r3, r3, #20
 800c200:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c204:	2400      	movs	r4, #0
 800c206:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c20a:	4622      	mov	r2, r4
 800c20c:	462b      	mov	r3, r5
 800c20e:	f7f4 f9f3 	bl	80005f8 <__aeabi_dmul>
 800c212:	ec41 0b10 	vmov	d0, r0, r1
 800c216:	bd70      	pop	{r4, r5, r6, pc}

0800c218 <_strtod_l>:
 800c218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c21c:	b09f      	sub	sp, #124	@ 0x7c
 800c21e:	460c      	mov	r4, r1
 800c220:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c222:	2200      	movs	r2, #0
 800c224:	921a      	str	r2, [sp, #104]	@ 0x68
 800c226:	9005      	str	r0, [sp, #20]
 800c228:	f04f 0a00 	mov.w	sl, #0
 800c22c:	f04f 0b00 	mov.w	fp, #0
 800c230:	460a      	mov	r2, r1
 800c232:	9219      	str	r2, [sp, #100]	@ 0x64
 800c234:	7811      	ldrb	r1, [r2, #0]
 800c236:	292b      	cmp	r1, #43	@ 0x2b
 800c238:	d04a      	beq.n	800c2d0 <_strtod_l+0xb8>
 800c23a:	d838      	bhi.n	800c2ae <_strtod_l+0x96>
 800c23c:	290d      	cmp	r1, #13
 800c23e:	d832      	bhi.n	800c2a6 <_strtod_l+0x8e>
 800c240:	2908      	cmp	r1, #8
 800c242:	d832      	bhi.n	800c2aa <_strtod_l+0x92>
 800c244:	2900      	cmp	r1, #0
 800c246:	d03b      	beq.n	800c2c0 <_strtod_l+0xa8>
 800c248:	2200      	movs	r2, #0
 800c24a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c24c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c24e:	782a      	ldrb	r2, [r5, #0]
 800c250:	2a30      	cmp	r2, #48	@ 0x30
 800c252:	f040 80b3 	bne.w	800c3bc <_strtod_l+0x1a4>
 800c256:	786a      	ldrb	r2, [r5, #1]
 800c258:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c25c:	2a58      	cmp	r2, #88	@ 0x58
 800c25e:	d16e      	bne.n	800c33e <_strtod_l+0x126>
 800c260:	9302      	str	r3, [sp, #8]
 800c262:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c264:	9301      	str	r3, [sp, #4]
 800c266:	ab1a      	add	r3, sp, #104	@ 0x68
 800c268:	9300      	str	r3, [sp, #0]
 800c26a:	4a8e      	ldr	r2, [pc, #568]	@ (800c4a4 <_strtod_l+0x28c>)
 800c26c:	9805      	ldr	r0, [sp, #20]
 800c26e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c270:	a919      	add	r1, sp, #100	@ 0x64
 800c272:	f001 fca3 	bl	800dbbc <__gethex>
 800c276:	f010 060f 	ands.w	r6, r0, #15
 800c27a:	4604      	mov	r4, r0
 800c27c:	d005      	beq.n	800c28a <_strtod_l+0x72>
 800c27e:	2e06      	cmp	r6, #6
 800c280:	d128      	bne.n	800c2d4 <_strtod_l+0xbc>
 800c282:	3501      	adds	r5, #1
 800c284:	2300      	movs	r3, #0
 800c286:	9519      	str	r5, [sp, #100]	@ 0x64
 800c288:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c28a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	f040 858e 	bne.w	800cdae <_strtod_l+0xb96>
 800c292:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c294:	b1cb      	cbz	r3, 800c2ca <_strtod_l+0xb2>
 800c296:	4652      	mov	r2, sl
 800c298:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c29c:	ec43 2b10 	vmov	d0, r2, r3
 800c2a0:	b01f      	add	sp, #124	@ 0x7c
 800c2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2a6:	2920      	cmp	r1, #32
 800c2a8:	d1ce      	bne.n	800c248 <_strtod_l+0x30>
 800c2aa:	3201      	adds	r2, #1
 800c2ac:	e7c1      	b.n	800c232 <_strtod_l+0x1a>
 800c2ae:	292d      	cmp	r1, #45	@ 0x2d
 800c2b0:	d1ca      	bne.n	800c248 <_strtod_l+0x30>
 800c2b2:	2101      	movs	r1, #1
 800c2b4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c2b6:	1c51      	adds	r1, r2, #1
 800c2b8:	9119      	str	r1, [sp, #100]	@ 0x64
 800c2ba:	7852      	ldrb	r2, [r2, #1]
 800c2bc:	2a00      	cmp	r2, #0
 800c2be:	d1c5      	bne.n	800c24c <_strtod_l+0x34>
 800c2c0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c2c2:	9419      	str	r4, [sp, #100]	@ 0x64
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	f040 8570 	bne.w	800cdaa <_strtod_l+0xb92>
 800c2ca:	4652      	mov	r2, sl
 800c2cc:	465b      	mov	r3, fp
 800c2ce:	e7e5      	b.n	800c29c <_strtod_l+0x84>
 800c2d0:	2100      	movs	r1, #0
 800c2d2:	e7ef      	b.n	800c2b4 <_strtod_l+0x9c>
 800c2d4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c2d6:	b13a      	cbz	r2, 800c2e8 <_strtod_l+0xd0>
 800c2d8:	2135      	movs	r1, #53	@ 0x35
 800c2da:	a81c      	add	r0, sp, #112	@ 0x70
 800c2dc:	f7ff ff3a 	bl	800c154 <__copybits>
 800c2e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c2e2:	9805      	ldr	r0, [sp, #20]
 800c2e4:	f7ff fb08 	bl	800b8f8 <_Bfree>
 800c2e8:	3e01      	subs	r6, #1
 800c2ea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c2ec:	2e04      	cmp	r6, #4
 800c2ee:	d806      	bhi.n	800c2fe <_strtod_l+0xe6>
 800c2f0:	e8df f006 	tbb	[pc, r6]
 800c2f4:	201d0314 	.word	0x201d0314
 800c2f8:	14          	.byte	0x14
 800c2f9:	00          	.byte	0x00
 800c2fa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c2fe:	05e1      	lsls	r1, r4, #23
 800c300:	bf48      	it	mi
 800c302:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c306:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c30a:	0d1b      	lsrs	r3, r3, #20
 800c30c:	051b      	lsls	r3, r3, #20
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d1bb      	bne.n	800c28a <_strtod_l+0x72>
 800c312:	f7fe fb29 	bl	800a968 <__errno>
 800c316:	2322      	movs	r3, #34	@ 0x22
 800c318:	6003      	str	r3, [r0, #0]
 800c31a:	e7b6      	b.n	800c28a <_strtod_l+0x72>
 800c31c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c320:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c324:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c328:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c32c:	e7e7      	b.n	800c2fe <_strtod_l+0xe6>
 800c32e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800c4ac <_strtod_l+0x294>
 800c332:	e7e4      	b.n	800c2fe <_strtod_l+0xe6>
 800c334:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c338:	f04f 3aff 	mov.w	sl, #4294967295
 800c33c:	e7df      	b.n	800c2fe <_strtod_l+0xe6>
 800c33e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c340:	1c5a      	adds	r2, r3, #1
 800c342:	9219      	str	r2, [sp, #100]	@ 0x64
 800c344:	785b      	ldrb	r3, [r3, #1]
 800c346:	2b30      	cmp	r3, #48	@ 0x30
 800c348:	d0f9      	beq.n	800c33e <_strtod_l+0x126>
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d09d      	beq.n	800c28a <_strtod_l+0x72>
 800c34e:	2301      	movs	r3, #1
 800c350:	9309      	str	r3, [sp, #36]	@ 0x24
 800c352:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c354:	930c      	str	r3, [sp, #48]	@ 0x30
 800c356:	2300      	movs	r3, #0
 800c358:	9308      	str	r3, [sp, #32]
 800c35a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c35c:	461f      	mov	r7, r3
 800c35e:	220a      	movs	r2, #10
 800c360:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c362:	7805      	ldrb	r5, [r0, #0]
 800c364:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c368:	b2d9      	uxtb	r1, r3
 800c36a:	2909      	cmp	r1, #9
 800c36c:	d928      	bls.n	800c3c0 <_strtod_l+0x1a8>
 800c36e:	494e      	ldr	r1, [pc, #312]	@ (800c4a8 <_strtod_l+0x290>)
 800c370:	2201      	movs	r2, #1
 800c372:	f7fe fa9c 	bl	800a8ae <strncmp>
 800c376:	2800      	cmp	r0, #0
 800c378:	d032      	beq.n	800c3e0 <_strtod_l+0x1c8>
 800c37a:	2000      	movs	r0, #0
 800c37c:	462a      	mov	r2, r5
 800c37e:	4681      	mov	r9, r0
 800c380:	463d      	mov	r5, r7
 800c382:	4603      	mov	r3, r0
 800c384:	2a65      	cmp	r2, #101	@ 0x65
 800c386:	d001      	beq.n	800c38c <_strtod_l+0x174>
 800c388:	2a45      	cmp	r2, #69	@ 0x45
 800c38a:	d114      	bne.n	800c3b6 <_strtod_l+0x19e>
 800c38c:	b91d      	cbnz	r5, 800c396 <_strtod_l+0x17e>
 800c38e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c390:	4302      	orrs	r2, r0
 800c392:	d095      	beq.n	800c2c0 <_strtod_l+0xa8>
 800c394:	2500      	movs	r5, #0
 800c396:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c398:	1c62      	adds	r2, r4, #1
 800c39a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c39c:	7862      	ldrb	r2, [r4, #1]
 800c39e:	2a2b      	cmp	r2, #43	@ 0x2b
 800c3a0:	d077      	beq.n	800c492 <_strtod_l+0x27a>
 800c3a2:	2a2d      	cmp	r2, #45	@ 0x2d
 800c3a4:	d07b      	beq.n	800c49e <_strtod_l+0x286>
 800c3a6:	f04f 0c00 	mov.w	ip, #0
 800c3aa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c3ae:	2909      	cmp	r1, #9
 800c3b0:	f240 8082 	bls.w	800c4b8 <_strtod_l+0x2a0>
 800c3b4:	9419      	str	r4, [sp, #100]	@ 0x64
 800c3b6:	f04f 0800 	mov.w	r8, #0
 800c3ba:	e0a2      	b.n	800c502 <_strtod_l+0x2ea>
 800c3bc:	2300      	movs	r3, #0
 800c3be:	e7c7      	b.n	800c350 <_strtod_l+0x138>
 800c3c0:	2f08      	cmp	r7, #8
 800c3c2:	bfd5      	itete	le
 800c3c4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c3c6:	9908      	ldrgt	r1, [sp, #32]
 800c3c8:	fb02 3301 	mlale	r3, r2, r1, r3
 800c3cc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c3d0:	f100 0001 	add.w	r0, r0, #1
 800c3d4:	bfd4      	ite	le
 800c3d6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c3d8:	9308      	strgt	r3, [sp, #32]
 800c3da:	3701      	adds	r7, #1
 800c3dc:	9019      	str	r0, [sp, #100]	@ 0x64
 800c3de:	e7bf      	b.n	800c360 <_strtod_l+0x148>
 800c3e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c3e2:	1c5a      	adds	r2, r3, #1
 800c3e4:	9219      	str	r2, [sp, #100]	@ 0x64
 800c3e6:	785a      	ldrb	r2, [r3, #1]
 800c3e8:	b37f      	cbz	r7, 800c44a <_strtod_l+0x232>
 800c3ea:	4681      	mov	r9, r0
 800c3ec:	463d      	mov	r5, r7
 800c3ee:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c3f2:	2b09      	cmp	r3, #9
 800c3f4:	d912      	bls.n	800c41c <_strtod_l+0x204>
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	e7c4      	b.n	800c384 <_strtod_l+0x16c>
 800c3fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c3fc:	1c5a      	adds	r2, r3, #1
 800c3fe:	9219      	str	r2, [sp, #100]	@ 0x64
 800c400:	785a      	ldrb	r2, [r3, #1]
 800c402:	3001      	adds	r0, #1
 800c404:	2a30      	cmp	r2, #48	@ 0x30
 800c406:	d0f8      	beq.n	800c3fa <_strtod_l+0x1e2>
 800c408:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c40c:	2b08      	cmp	r3, #8
 800c40e:	f200 84d3 	bhi.w	800cdb8 <_strtod_l+0xba0>
 800c412:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c414:	930c      	str	r3, [sp, #48]	@ 0x30
 800c416:	4681      	mov	r9, r0
 800c418:	2000      	movs	r0, #0
 800c41a:	4605      	mov	r5, r0
 800c41c:	3a30      	subs	r2, #48	@ 0x30
 800c41e:	f100 0301 	add.w	r3, r0, #1
 800c422:	d02a      	beq.n	800c47a <_strtod_l+0x262>
 800c424:	4499      	add	r9, r3
 800c426:	eb00 0c05 	add.w	ip, r0, r5
 800c42a:	462b      	mov	r3, r5
 800c42c:	210a      	movs	r1, #10
 800c42e:	4563      	cmp	r3, ip
 800c430:	d10d      	bne.n	800c44e <_strtod_l+0x236>
 800c432:	1c69      	adds	r1, r5, #1
 800c434:	4401      	add	r1, r0
 800c436:	4428      	add	r0, r5
 800c438:	2808      	cmp	r0, #8
 800c43a:	dc16      	bgt.n	800c46a <_strtod_l+0x252>
 800c43c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c43e:	230a      	movs	r3, #10
 800c440:	fb03 2300 	mla	r3, r3, r0, r2
 800c444:	930a      	str	r3, [sp, #40]	@ 0x28
 800c446:	2300      	movs	r3, #0
 800c448:	e018      	b.n	800c47c <_strtod_l+0x264>
 800c44a:	4638      	mov	r0, r7
 800c44c:	e7da      	b.n	800c404 <_strtod_l+0x1ec>
 800c44e:	2b08      	cmp	r3, #8
 800c450:	f103 0301 	add.w	r3, r3, #1
 800c454:	dc03      	bgt.n	800c45e <_strtod_l+0x246>
 800c456:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c458:	434e      	muls	r6, r1
 800c45a:	960a      	str	r6, [sp, #40]	@ 0x28
 800c45c:	e7e7      	b.n	800c42e <_strtod_l+0x216>
 800c45e:	2b10      	cmp	r3, #16
 800c460:	bfde      	ittt	le
 800c462:	9e08      	ldrle	r6, [sp, #32]
 800c464:	434e      	mulle	r6, r1
 800c466:	9608      	strle	r6, [sp, #32]
 800c468:	e7e1      	b.n	800c42e <_strtod_l+0x216>
 800c46a:	280f      	cmp	r0, #15
 800c46c:	dceb      	bgt.n	800c446 <_strtod_l+0x22e>
 800c46e:	9808      	ldr	r0, [sp, #32]
 800c470:	230a      	movs	r3, #10
 800c472:	fb03 2300 	mla	r3, r3, r0, r2
 800c476:	9308      	str	r3, [sp, #32]
 800c478:	e7e5      	b.n	800c446 <_strtod_l+0x22e>
 800c47a:	4629      	mov	r1, r5
 800c47c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c47e:	1c50      	adds	r0, r2, #1
 800c480:	9019      	str	r0, [sp, #100]	@ 0x64
 800c482:	7852      	ldrb	r2, [r2, #1]
 800c484:	4618      	mov	r0, r3
 800c486:	460d      	mov	r5, r1
 800c488:	e7b1      	b.n	800c3ee <_strtod_l+0x1d6>
 800c48a:	f04f 0900 	mov.w	r9, #0
 800c48e:	2301      	movs	r3, #1
 800c490:	e77d      	b.n	800c38e <_strtod_l+0x176>
 800c492:	f04f 0c00 	mov.w	ip, #0
 800c496:	1ca2      	adds	r2, r4, #2
 800c498:	9219      	str	r2, [sp, #100]	@ 0x64
 800c49a:	78a2      	ldrb	r2, [r4, #2]
 800c49c:	e785      	b.n	800c3aa <_strtod_l+0x192>
 800c49e:	f04f 0c01 	mov.w	ip, #1
 800c4a2:	e7f8      	b.n	800c496 <_strtod_l+0x27e>
 800c4a4:	0800f128 	.word	0x0800f128
 800c4a8:	0800f110 	.word	0x0800f110
 800c4ac:	7ff00000 	.word	0x7ff00000
 800c4b0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c4b2:	1c51      	adds	r1, r2, #1
 800c4b4:	9119      	str	r1, [sp, #100]	@ 0x64
 800c4b6:	7852      	ldrb	r2, [r2, #1]
 800c4b8:	2a30      	cmp	r2, #48	@ 0x30
 800c4ba:	d0f9      	beq.n	800c4b0 <_strtod_l+0x298>
 800c4bc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c4c0:	2908      	cmp	r1, #8
 800c4c2:	f63f af78 	bhi.w	800c3b6 <_strtod_l+0x19e>
 800c4c6:	3a30      	subs	r2, #48	@ 0x30
 800c4c8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c4ca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c4cc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c4ce:	f04f 080a 	mov.w	r8, #10
 800c4d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c4d4:	1c56      	adds	r6, r2, #1
 800c4d6:	9619      	str	r6, [sp, #100]	@ 0x64
 800c4d8:	7852      	ldrb	r2, [r2, #1]
 800c4da:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c4de:	f1be 0f09 	cmp.w	lr, #9
 800c4e2:	d939      	bls.n	800c558 <_strtod_l+0x340>
 800c4e4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c4e6:	1a76      	subs	r6, r6, r1
 800c4e8:	2e08      	cmp	r6, #8
 800c4ea:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c4ee:	dc03      	bgt.n	800c4f8 <_strtod_l+0x2e0>
 800c4f0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c4f2:	4588      	cmp	r8, r1
 800c4f4:	bfa8      	it	ge
 800c4f6:	4688      	movge	r8, r1
 800c4f8:	f1bc 0f00 	cmp.w	ip, #0
 800c4fc:	d001      	beq.n	800c502 <_strtod_l+0x2ea>
 800c4fe:	f1c8 0800 	rsb	r8, r8, #0
 800c502:	2d00      	cmp	r5, #0
 800c504:	d14e      	bne.n	800c5a4 <_strtod_l+0x38c>
 800c506:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c508:	4308      	orrs	r0, r1
 800c50a:	f47f aebe 	bne.w	800c28a <_strtod_l+0x72>
 800c50e:	2b00      	cmp	r3, #0
 800c510:	f47f aed6 	bne.w	800c2c0 <_strtod_l+0xa8>
 800c514:	2a69      	cmp	r2, #105	@ 0x69
 800c516:	d028      	beq.n	800c56a <_strtod_l+0x352>
 800c518:	dc25      	bgt.n	800c566 <_strtod_l+0x34e>
 800c51a:	2a49      	cmp	r2, #73	@ 0x49
 800c51c:	d025      	beq.n	800c56a <_strtod_l+0x352>
 800c51e:	2a4e      	cmp	r2, #78	@ 0x4e
 800c520:	f47f aece 	bne.w	800c2c0 <_strtod_l+0xa8>
 800c524:	499b      	ldr	r1, [pc, #620]	@ (800c794 <_strtod_l+0x57c>)
 800c526:	a819      	add	r0, sp, #100	@ 0x64
 800c528:	f001 fd6a 	bl	800e000 <__match>
 800c52c:	2800      	cmp	r0, #0
 800c52e:	f43f aec7 	beq.w	800c2c0 <_strtod_l+0xa8>
 800c532:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c534:	781b      	ldrb	r3, [r3, #0]
 800c536:	2b28      	cmp	r3, #40	@ 0x28
 800c538:	d12e      	bne.n	800c598 <_strtod_l+0x380>
 800c53a:	4997      	ldr	r1, [pc, #604]	@ (800c798 <_strtod_l+0x580>)
 800c53c:	aa1c      	add	r2, sp, #112	@ 0x70
 800c53e:	a819      	add	r0, sp, #100	@ 0x64
 800c540:	f001 fd72 	bl	800e028 <__hexnan>
 800c544:	2805      	cmp	r0, #5
 800c546:	d127      	bne.n	800c598 <_strtod_l+0x380>
 800c548:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c54a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c54e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c552:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c556:	e698      	b.n	800c28a <_strtod_l+0x72>
 800c558:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c55a:	fb08 2101 	mla	r1, r8, r1, r2
 800c55e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c562:	920e      	str	r2, [sp, #56]	@ 0x38
 800c564:	e7b5      	b.n	800c4d2 <_strtod_l+0x2ba>
 800c566:	2a6e      	cmp	r2, #110	@ 0x6e
 800c568:	e7da      	b.n	800c520 <_strtod_l+0x308>
 800c56a:	498c      	ldr	r1, [pc, #560]	@ (800c79c <_strtod_l+0x584>)
 800c56c:	a819      	add	r0, sp, #100	@ 0x64
 800c56e:	f001 fd47 	bl	800e000 <__match>
 800c572:	2800      	cmp	r0, #0
 800c574:	f43f aea4 	beq.w	800c2c0 <_strtod_l+0xa8>
 800c578:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c57a:	4989      	ldr	r1, [pc, #548]	@ (800c7a0 <_strtod_l+0x588>)
 800c57c:	3b01      	subs	r3, #1
 800c57e:	a819      	add	r0, sp, #100	@ 0x64
 800c580:	9319      	str	r3, [sp, #100]	@ 0x64
 800c582:	f001 fd3d 	bl	800e000 <__match>
 800c586:	b910      	cbnz	r0, 800c58e <_strtod_l+0x376>
 800c588:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c58a:	3301      	adds	r3, #1
 800c58c:	9319      	str	r3, [sp, #100]	@ 0x64
 800c58e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800c7b0 <_strtod_l+0x598>
 800c592:	f04f 0a00 	mov.w	sl, #0
 800c596:	e678      	b.n	800c28a <_strtod_l+0x72>
 800c598:	4882      	ldr	r0, [pc, #520]	@ (800c7a4 <_strtod_l+0x58c>)
 800c59a:	f001 fa6d 	bl	800da78 <nan>
 800c59e:	ec5b ab10 	vmov	sl, fp, d0
 800c5a2:	e672      	b.n	800c28a <_strtod_l+0x72>
 800c5a4:	eba8 0309 	sub.w	r3, r8, r9
 800c5a8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c5aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5ac:	2f00      	cmp	r7, #0
 800c5ae:	bf08      	it	eq
 800c5b0:	462f      	moveq	r7, r5
 800c5b2:	2d10      	cmp	r5, #16
 800c5b4:	462c      	mov	r4, r5
 800c5b6:	bfa8      	it	ge
 800c5b8:	2410      	movge	r4, #16
 800c5ba:	f7f3 ffa3 	bl	8000504 <__aeabi_ui2d>
 800c5be:	2d09      	cmp	r5, #9
 800c5c0:	4682      	mov	sl, r0
 800c5c2:	468b      	mov	fp, r1
 800c5c4:	dc13      	bgt.n	800c5ee <_strtod_l+0x3d6>
 800c5c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	f43f ae5e 	beq.w	800c28a <_strtod_l+0x72>
 800c5ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5d0:	dd78      	ble.n	800c6c4 <_strtod_l+0x4ac>
 800c5d2:	2b16      	cmp	r3, #22
 800c5d4:	dc5f      	bgt.n	800c696 <_strtod_l+0x47e>
 800c5d6:	4974      	ldr	r1, [pc, #464]	@ (800c7a8 <_strtod_l+0x590>)
 800c5d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c5dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5e0:	4652      	mov	r2, sl
 800c5e2:	465b      	mov	r3, fp
 800c5e4:	f7f4 f808 	bl	80005f8 <__aeabi_dmul>
 800c5e8:	4682      	mov	sl, r0
 800c5ea:	468b      	mov	fp, r1
 800c5ec:	e64d      	b.n	800c28a <_strtod_l+0x72>
 800c5ee:	4b6e      	ldr	r3, [pc, #440]	@ (800c7a8 <_strtod_l+0x590>)
 800c5f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c5f4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c5f8:	f7f3 fffe 	bl	80005f8 <__aeabi_dmul>
 800c5fc:	4682      	mov	sl, r0
 800c5fe:	9808      	ldr	r0, [sp, #32]
 800c600:	468b      	mov	fp, r1
 800c602:	f7f3 ff7f 	bl	8000504 <__aeabi_ui2d>
 800c606:	4602      	mov	r2, r0
 800c608:	460b      	mov	r3, r1
 800c60a:	4650      	mov	r0, sl
 800c60c:	4659      	mov	r1, fp
 800c60e:	f7f3 fe3d 	bl	800028c <__adddf3>
 800c612:	2d0f      	cmp	r5, #15
 800c614:	4682      	mov	sl, r0
 800c616:	468b      	mov	fp, r1
 800c618:	ddd5      	ble.n	800c5c6 <_strtod_l+0x3ae>
 800c61a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c61c:	1b2c      	subs	r4, r5, r4
 800c61e:	441c      	add	r4, r3
 800c620:	2c00      	cmp	r4, #0
 800c622:	f340 8096 	ble.w	800c752 <_strtod_l+0x53a>
 800c626:	f014 030f 	ands.w	r3, r4, #15
 800c62a:	d00a      	beq.n	800c642 <_strtod_l+0x42a>
 800c62c:	495e      	ldr	r1, [pc, #376]	@ (800c7a8 <_strtod_l+0x590>)
 800c62e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c632:	4652      	mov	r2, sl
 800c634:	465b      	mov	r3, fp
 800c636:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c63a:	f7f3 ffdd 	bl	80005f8 <__aeabi_dmul>
 800c63e:	4682      	mov	sl, r0
 800c640:	468b      	mov	fp, r1
 800c642:	f034 040f 	bics.w	r4, r4, #15
 800c646:	d073      	beq.n	800c730 <_strtod_l+0x518>
 800c648:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c64c:	dd48      	ble.n	800c6e0 <_strtod_l+0x4c8>
 800c64e:	2400      	movs	r4, #0
 800c650:	46a0      	mov	r8, r4
 800c652:	940a      	str	r4, [sp, #40]	@ 0x28
 800c654:	46a1      	mov	r9, r4
 800c656:	9a05      	ldr	r2, [sp, #20]
 800c658:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800c7b0 <_strtod_l+0x598>
 800c65c:	2322      	movs	r3, #34	@ 0x22
 800c65e:	6013      	str	r3, [r2, #0]
 800c660:	f04f 0a00 	mov.w	sl, #0
 800c664:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c666:	2b00      	cmp	r3, #0
 800c668:	f43f ae0f 	beq.w	800c28a <_strtod_l+0x72>
 800c66c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c66e:	9805      	ldr	r0, [sp, #20]
 800c670:	f7ff f942 	bl	800b8f8 <_Bfree>
 800c674:	9805      	ldr	r0, [sp, #20]
 800c676:	4649      	mov	r1, r9
 800c678:	f7ff f93e 	bl	800b8f8 <_Bfree>
 800c67c:	9805      	ldr	r0, [sp, #20]
 800c67e:	4641      	mov	r1, r8
 800c680:	f7ff f93a 	bl	800b8f8 <_Bfree>
 800c684:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c686:	9805      	ldr	r0, [sp, #20]
 800c688:	f7ff f936 	bl	800b8f8 <_Bfree>
 800c68c:	9805      	ldr	r0, [sp, #20]
 800c68e:	4621      	mov	r1, r4
 800c690:	f7ff f932 	bl	800b8f8 <_Bfree>
 800c694:	e5f9      	b.n	800c28a <_strtod_l+0x72>
 800c696:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c698:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c69c:	4293      	cmp	r3, r2
 800c69e:	dbbc      	blt.n	800c61a <_strtod_l+0x402>
 800c6a0:	4c41      	ldr	r4, [pc, #260]	@ (800c7a8 <_strtod_l+0x590>)
 800c6a2:	f1c5 050f 	rsb	r5, r5, #15
 800c6a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c6aa:	4652      	mov	r2, sl
 800c6ac:	465b      	mov	r3, fp
 800c6ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6b2:	f7f3 ffa1 	bl	80005f8 <__aeabi_dmul>
 800c6b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6b8:	1b5d      	subs	r5, r3, r5
 800c6ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c6be:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c6c2:	e78f      	b.n	800c5e4 <_strtod_l+0x3cc>
 800c6c4:	3316      	adds	r3, #22
 800c6c6:	dba8      	blt.n	800c61a <_strtod_l+0x402>
 800c6c8:	4b37      	ldr	r3, [pc, #220]	@ (800c7a8 <_strtod_l+0x590>)
 800c6ca:	eba9 0808 	sub.w	r8, r9, r8
 800c6ce:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c6d2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c6d6:	4650      	mov	r0, sl
 800c6d8:	4659      	mov	r1, fp
 800c6da:	f7f4 f8b7 	bl	800084c <__aeabi_ddiv>
 800c6de:	e783      	b.n	800c5e8 <_strtod_l+0x3d0>
 800c6e0:	4b32      	ldr	r3, [pc, #200]	@ (800c7ac <_strtod_l+0x594>)
 800c6e2:	9308      	str	r3, [sp, #32]
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	1124      	asrs	r4, r4, #4
 800c6e8:	4650      	mov	r0, sl
 800c6ea:	4659      	mov	r1, fp
 800c6ec:	461e      	mov	r6, r3
 800c6ee:	2c01      	cmp	r4, #1
 800c6f0:	dc21      	bgt.n	800c736 <_strtod_l+0x51e>
 800c6f2:	b10b      	cbz	r3, 800c6f8 <_strtod_l+0x4e0>
 800c6f4:	4682      	mov	sl, r0
 800c6f6:	468b      	mov	fp, r1
 800c6f8:	492c      	ldr	r1, [pc, #176]	@ (800c7ac <_strtod_l+0x594>)
 800c6fa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c6fe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c702:	4652      	mov	r2, sl
 800c704:	465b      	mov	r3, fp
 800c706:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c70a:	f7f3 ff75 	bl	80005f8 <__aeabi_dmul>
 800c70e:	4b28      	ldr	r3, [pc, #160]	@ (800c7b0 <_strtod_l+0x598>)
 800c710:	460a      	mov	r2, r1
 800c712:	400b      	ands	r3, r1
 800c714:	4927      	ldr	r1, [pc, #156]	@ (800c7b4 <_strtod_l+0x59c>)
 800c716:	428b      	cmp	r3, r1
 800c718:	4682      	mov	sl, r0
 800c71a:	d898      	bhi.n	800c64e <_strtod_l+0x436>
 800c71c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c720:	428b      	cmp	r3, r1
 800c722:	bf86      	itte	hi
 800c724:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800c7b8 <_strtod_l+0x5a0>
 800c728:	f04f 3aff 	movhi.w	sl, #4294967295
 800c72c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c730:	2300      	movs	r3, #0
 800c732:	9308      	str	r3, [sp, #32]
 800c734:	e07a      	b.n	800c82c <_strtod_l+0x614>
 800c736:	07e2      	lsls	r2, r4, #31
 800c738:	d505      	bpl.n	800c746 <_strtod_l+0x52e>
 800c73a:	9b08      	ldr	r3, [sp, #32]
 800c73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c740:	f7f3 ff5a 	bl	80005f8 <__aeabi_dmul>
 800c744:	2301      	movs	r3, #1
 800c746:	9a08      	ldr	r2, [sp, #32]
 800c748:	3208      	adds	r2, #8
 800c74a:	3601      	adds	r6, #1
 800c74c:	1064      	asrs	r4, r4, #1
 800c74e:	9208      	str	r2, [sp, #32]
 800c750:	e7cd      	b.n	800c6ee <_strtod_l+0x4d6>
 800c752:	d0ed      	beq.n	800c730 <_strtod_l+0x518>
 800c754:	4264      	negs	r4, r4
 800c756:	f014 020f 	ands.w	r2, r4, #15
 800c75a:	d00a      	beq.n	800c772 <_strtod_l+0x55a>
 800c75c:	4b12      	ldr	r3, [pc, #72]	@ (800c7a8 <_strtod_l+0x590>)
 800c75e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c762:	4650      	mov	r0, sl
 800c764:	4659      	mov	r1, fp
 800c766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76a:	f7f4 f86f 	bl	800084c <__aeabi_ddiv>
 800c76e:	4682      	mov	sl, r0
 800c770:	468b      	mov	fp, r1
 800c772:	1124      	asrs	r4, r4, #4
 800c774:	d0dc      	beq.n	800c730 <_strtod_l+0x518>
 800c776:	2c1f      	cmp	r4, #31
 800c778:	dd20      	ble.n	800c7bc <_strtod_l+0x5a4>
 800c77a:	2400      	movs	r4, #0
 800c77c:	46a0      	mov	r8, r4
 800c77e:	940a      	str	r4, [sp, #40]	@ 0x28
 800c780:	46a1      	mov	r9, r4
 800c782:	9a05      	ldr	r2, [sp, #20]
 800c784:	2322      	movs	r3, #34	@ 0x22
 800c786:	f04f 0a00 	mov.w	sl, #0
 800c78a:	f04f 0b00 	mov.w	fp, #0
 800c78e:	6013      	str	r3, [r2, #0]
 800c790:	e768      	b.n	800c664 <_strtod_l+0x44c>
 800c792:	bf00      	nop
 800c794:	0800eefd 	.word	0x0800eefd
 800c798:	0800f114 	.word	0x0800f114
 800c79c:	0800eef5 	.word	0x0800eef5
 800c7a0:	0800ef2a 	.word	0x0800ef2a
 800c7a4:	0800f2d8 	.word	0x0800f2d8
 800c7a8:	0800f048 	.word	0x0800f048
 800c7ac:	0800f020 	.word	0x0800f020
 800c7b0:	7ff00000 	.word	0x7ff00000
 800c7b4:	7ca00000 	.word	0x7ca00000
 800c7b8:	7fefffff 	.word	0x7fefffff
 800c7bc:	f014 0310 	ands.w	r3, r4, #16
 800c7c0:	bf18      	it	ne
 800c7c2:	236a      	movne	r3, #106	@ 0x6a
 800c7c4:	4ea9      	ldr	r6, [pc, #676]	@ (800ca6c <_strtod_l+0x854>)
 800c7c6:	9308      	str	r3, [sp, #32]
 800c7c8:	4650      	mov	r0, sl
 800c7ca:	4659      	mov	r1, fp
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	07e2      	lsls	r2, r4, #31
 800c7d0:	d504      	bpl.n	800c7dc <_strtod_l+0x5c4>
 800c7d2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c7d6:	f7f3 ff0f 	bl	80005f8 <__aeabi_dmul>
 800c7da:	2301      	movs	r3, #1
 800c7dc:	1064      	asrs	r4, r4, #1
 800c7de:	f106 0608 	add.w	r6, r6, #8
 800c7e2:	d1f4      	bne.n	800c7ce <_strtod_l+0x5b6>
 800c7e4:	b10b      	cbz	r3, 800c7ea <_strtod_l+0x5d2>
 800c7e6:	4682      	mov	sl, r0
 800c7e8:	468b      	mov	fp, r1
 800c7ea:	9b08      	ldr	r3, [sp, #32]
 800c7ec:	b1b3      	cbz	r3, 800c81c <_strtod_l+0x604>
 800c7ee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c7f2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	4659      	mov	r1, fp
 800c7fa:	dd0f      	ble.n	800c81c <_strtod_l+0x604>
 800c7fc:	2b1f      	cmp	r3, #31
 800c7fe:	dd55      	ble.n	800c8ac <_strtod_l+0x694>
 800c800:	2b34      	cmp	r3, #52	@ 0x34
 800c802:	bfde      	ittt	le
 800c804:	f04f 33ff 	movle.w	r3, #4294967295
 800c808:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c80c:	4093      	lslle	r3, r2
 800c80e:	f04f 0a00 	mov.w	sl, #0
 800c812:	bfcc      	ite	gt
 800c814:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c818:	ea03 0b01 	andle.w	fp, r3, r1
 800c81c:	2200      	movs	r2, #0
 800c81e:	2300      	movs	r3, #0
 800c820:	4650      	mov	r0, sl
 800c822:	4659      	mov	r1, fp
 800c824:	f7f4 f950 	bl	8000ac8 <__aeabi_dcmpeq>
 800c828:	2800      	cmp	r0, #0
 800c82a:	d1a6      	bne.n	800c77a <_strtod_l+0x562>
 800c82c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c82e:	9300      	str	r3, [sp, #0]
 800c830:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c832:	9805      	ldr	r0, [sp, #20]
 800c834:	462b      	mov	r3, r5
 800c836:	463a      	mov	r2, r7
 800c838:	f7ff f8c6 	bl	800b9c8 <__s2b>
 800c83c:	900a      	str	r0, [sp, #40]	@ 0x28
 800c83e:	2800      	cmp	r0, #0
 800c840:	f43f af05 	beq.w	800c64e <_strtod_l+0x436>
 800c844:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c846:	2a00      	cmp	r2, #0
 800c848:	eba9 0308 	sub.w	r3, r9, r8
 800c84c:	bfa8      	it	ge
 800c84e:	2300      	movge	r3, #0
 800c850:	9312      	str	r3, [sp, #72]	@ 0x48
 800c852:	2400      	movs	r4, #0
 800c854:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c858:	9316      	str	r3, [sp, #88]	@ 0x58
 800c85a:	46a0      	mov	r8, r4
 800c85c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c85e:	9805      	ldr	r0, [sp, #20]
 800c860:	6859      	ldr	r1, [r3, #4]
 800c862:	f7ff f809 	bl	800b878 <_Balloc>
 800c866:	4681      	mov	r9, r0
 800c868:	2800      	cmp	r0, #0
 800c86a:	f43f aef4 	beq.w	800c656 <_strtod_l+0x43e>
 800c86e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c870:	691a      	ldr	r2, [r3, #16]
 800c872:	3202      	adds	r2, #2
 800c874:	f103 010c 	add.w	r1, r3, #12
 800c878:	0092      	lsls	r2, r2, #2
 800c87a:	300c      	adds	r0, #12
 800c87c:	f001 f8ee 	bl	800da5c <memcpy>
 800c880:	ec4b ab10 	vmov	d0, sl, fp
 800c884:	9805      	ldr	r0, [sp, #20]
 800c886:	aa1c      	add	r2, sp, #112	@ 0x70
 800c888:	a91b      	add	r1, sp, #108	@ 0x6c
 800c88a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c88e:	f7ff fbd7 	bl	800c040 <__d2b>
 800c892:	901a      	str	r0, [sp, #104]	@ 0x68
 800c894:	2800      	cmp	r0, #0
 800c896:	f43f aede 	beq.w	800c656 <_strtod_l+0x43e>
 800c89a:	9805      	ldr	r0, [sp, #20]
 800c89c:	2101      	movs	r1, #1
 800c89e:	f7ff f929 	bl	800baf4 <__i2b>
 800c8a2:	4680      	mov	r8, r0
 800c8a4:	b948      	cbnz	r0, 800c8ba <_strtod_l+0x6a2>
 800c8a6:	f04f 0800 	mov.w	r8, #0
 800c8aa:	e6d4      	b.n	800c656 <_strtod_l+0x43e>
 800c8ac:	f04f 32ff 	mov.w	r2, #4294967295
 800c8b0:	fa02 f303 	lsl.w	r3, r2, r3
 800c8b4:	ea03 0a0a 	and.w	sl, r3, sl
 800c8b8:	e7b0      	b.n	800c81c <_strtod_l+0x604>
 800c8ba:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c8bc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c8be:	2d00      	cmp	r5, #0
 800c8c0:	bfab      	itete	ge
 800c8c2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c8c4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c8c6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c8c8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c8ca:	bfac      	ite	ge
 800c8cc:	18ef      	addge	r7, r5, r3
 800c8ce:	1b5e      	sublt	r6, r3, r5
 800c8d0:	9b08      	ldr	r3, [sp, #32]
 800c8d2:	1aed      	subs	r5, r5, r3
 800c8d4:	4415      	add	r5, r2
 800c8d6:	4b66      	ldr	r3, [pc, #408]	@ (800ca70 <_strtod_l+0x858>)
 800c8d8:	3d01      	subs	r5, #1
 800c8da:	429d      	cmp	r5, r3
 800c8dc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c8e0:	da50      	bge.n	800c984 <_strtod_l+0x76c>
 800c8e2:	1b5b      	subs	r3, r3, r5
 800c8e4:	2b1f      	cmp	r3, #31
 800c8e6:	eba2 0203 	sub.w	r2, r2, r3
 800c8ea:	f04f 0101 	mov.w	r1, #1
 800c8ee:	dc3d      	bgt.n	800c96c <_strtod_l+0x754>
 800c8f0:	fa01 f303 	lsl.w	r3, r1, r3
 800c8f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	9310      	str	r3, [sp, #64]	@ 0x40
 800c8fa:	18bd      	adds	r5, r7, r2
 800c8fc:	9b08      	ldr	r3, [sp, #32]
 800c8fe:	42af      	cmp	r7, r5
 800c900:	4416      	add	r6, r2
 800c902:	441e      	add	r6, r3
 800c904:	463b      	mov	r3, r7
 800c906:	bfa8      	it	ge
 800c908:	462b      	movge	r3, r5
 800c90a:	42b3      	cmp	r3, r6
 800c90c:	bfa8      	it	ge
 800c90e:	4633      	movge	r3, r6
 800c910:	2b00      	cmp	r3, #0
 800c912:	bfc2      	ittt	gt
 800c914:	1aed      	subgt	r5, r5, r3
 800c916:	1af6      	subgt	r6, r6, r3
 800c918:	1aff      	subgt	r7, r7, r3
 800c91a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	dd16      	ble.n	800c94e <_strtod_l+0x736>
 800c920:	4641      	mov	r1, r8
 800c922:	9805      	ldr	r0, [sp, #20]
 800c924:	461a      	mov	r2, r3
 800c926:	f7ff f9a5 	bl	800bc74 <__pow5mult>
 800c92a:	4680      	mov	r8, r0
 800c92c:	2800      	cmp	r0, #0
 800c92e:	d0ba      	beq.n	800c8a6 <_strtod_l+0x68e>
 800c930:	4601      	mov	r1, r0
 800c932:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c934:	9805      	ldr	r0, [sp, #20]
 800c936:	f7ff f8f3 	bl	800bb20 <__multiply>
 800c93a:	900e      	str	r0, [sp, #56]	@ 0x38
 800c93c:	2800      	cmp	r0, #0
 800c93e:	f43f ae8a 	beq.w	800c656 <_strtod_l+0x43e>
 800c942:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c944:	9805      	ldr	r0, [sp, #20]
 800c946:	f7fe ffd7 	bl	800b8f8 <_Bfree>
 800c94a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c94c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c94e:	2d00      	cmp	r5, #0
 800c950:	dc1d      	bgt.n	800c98e <_strtod_l+0x776>
 800c952:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c954:	2b00      	cmp	r3, #0
 800c956:	dd23      	ble.n	800c9a0 <_strtod_l+0x788>
 800c958:	4649      	mov	r1, r9
 800c95a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c95c:	9805      	ldr	r0, [sp, #20]
 800c95e:	f7ff f989 	bl	800bc74 <__pow5mult>
 800c962:	4681      	mov	r9, r0
 800c964:	b9e0      	cbnz	r0, 800c9a0 <_strtod_l+0x788>
 800c966:	f04f 0900 	mov.w	r9, #0
 800c96a:	e674      	b.n	800c656 <_strtod_l+0x43e>
 800c96c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c970:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c974:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c978:	35e2      	adds	r5, #226	@ 0xe2
 800c97a:	fa01 f305 	lsl.w	r3, r1, r5
 800c97e:	9310      	str	r3, [sp, #64]	@ 0x40
 800c980:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c982:	e7ba      	b.n	800c8fa <_strtod_l+0x6e2>
 800c984:	2300      	movs	r3, #0
 800c986:	9310      	str	r3, [sp, #64]	@ 0x40
 800c988:	2301      	movs	r3, #1
 800c98a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c98c:	e7b5      	b.n	800c8fa <_strtod_l+0x6e2>
 800c98e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c990:	9805      	ldr	r0, [sp, #20]
 800c992:	462a      	mov	r2, r5
 800c994:	f7ff f9c8 	bl	800bd28 <__lshift>
 800c998:	901a      	str	r0, [sp, #104]	@ 0x68
 800c99a:	2800      	cmp	r0, #0
 800c99c:	d1d9      	bne.n	800c952 <_strtod_l+0x73a>
 800c99e:	e65a      	b.n	800c656 <_strtod_l+0x43e>
 800c9a0:	2e00      	cmp	r6, #0
 800c9a2:	dd07      	ble.n	800c9b4 <_strtod_l+0x79c>
 800c9a4:	4649      	mov	r1, r9
 800c9a6:	9805      	ldr	r0, [sp, #20]
 800c9a8:	4632      	mov	r2, r6
 800c9aa:	f7ff f9bd 	bl	800bd28 <__lshift>
 800c9ae:	4681      	mov	r9, r0
 800c9b0:	2800      	cmp	r0, #0
 800c9b2:	d0d8      	beq.n	800c966 <_strtod_l+0x74e>
 800c9b4:	2f00      	cmp	r7, #0
 800c9b6:	dd08      	ble.n	800c9ca <_strtod_l+0x7b2>
 800c9b8:	4641      	mov	r1, r8
 800c9ba:	9805      	ldr	r0, [sp, #20]
 800c9bc:	463a      	mov	r2, r7
 800c9be:	f7ff f9b3 	bl	800bd28 <__lshift>
 800c9c2:	4680      	mov	r8, r0
 800c9c4:	2800      	cmp	r0, #0
 800c9c6:	f43f ae46 	beq.w	800c656 <_strtod_l+0x43e>
 800c9ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c9cc:	9805      	ldr	r0, [sp, #20]
 800c9ce:	464a      	mov	r2, r9
 800c9d0:	f7ff fa32 	bl	800be38 <__mdiff>
 800c9d4:	4604      	mov	r4, r0
 800c9d6:	2800      	cmp	r0, #0
 800c9d8:	f43f ae3d 	beq.w	800c656 <_strtod_l+0x43e>
 800c9dc:	68c3      	ldr	r3, [r0, #12]
 800c9de:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	60c3      	str	r3, [r0, #12]
 800c9e4:	4641      	mov	r1, r8
 800c9e6:	f7ff fa0b 	bl	800be00 <__mcmp>
 800c9ea:	2800      	cmp	r0, #0
 800c9ec:	da46      	bge.n	800ca7c <_strtod_l+0x864>
 800c9ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c9f0:	ea53 030a 	orrs.w	r3, r3, sl
 800c9f4:	d16c      	bne.n	800cad0 <_strtod_l+0x8b8>
 800c9f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d168      	bne.n	800cad0 <_strtod_l+0x8b8>
 800c9fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ca02:	0d1b      	lsrs	r3, r3, #20
 800ca04:	051b      	lsls	r3, r3, #20
 800ca06:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ca0a:	d961      	bls.n	800cad0 <_strtod_l+0x8b8>
 800ca0c:	6963      	ldr	r3, [r4, #20]
 800ca0e:	b913      	cbnz	r3, 800ca16 <_strtod_l+0x7fe>
 800ca10:	6923      	ldr	r3, [r4, #16]
 800ca12:	2b01      	cmp	r3, #1
 800ca14:	dd5c      	ble.n	800cad0 <_strtod_l+0x8b8>
 800ca16:	4621      	mov	r1, r4
 800ca18:	2201      	movs	r2, #1
 800ca1a:	9805      	ldr	r0, [sp, #20]
 800ca1c:	f7ff f984 	bl	800bd28 <__lshift>
 800ca20:	4641      	mov	r1, r8
 800ca22:	4604      	mov	r4, r0
 800ca24:	f7ff f9ec 	bl	800be00 <__mcmp>
 800ca28:	2800      	cmp	r0, #0
 800ca2a:	dd51      	ble.n	800cad0 <_strtod_l+0x8b8>
 800ca2c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ca30:	9a08      	ldr	r2, [sp, #32]
 800ca32:	0d1b      	lsrs	r3, r3, #20
 800ca34:	051b      	lsls	r3, r3, #20
 800ca36:	2a00      	cmp	r2, #0
 800ca38:	d06b      	beq.n	800cb12 <_strtod_l+0x8fa>
 800ca3a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ca3e:	d868      	bhi.n	800cb12 <_strtod_l+0x8fa>
 800ca40:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ca44:	f67f ae9d 	bls.w	800c782 <_strtod_l+0x56a>
 800ca48:	4b0a      	ldr	r3, [pc, #40]	@ (800ca74 <_strtod_l+0x85c>)
 800ca4a:	4650      	mov	r0, sl
 800ca4c:	4659      	mov	r1, fp
 800ca4e:	2200      	movs	r2, #0
 800ca50:	f7f3 fdd2 	bl	80005f8 <__aeabi_dmul>
 800ca54:	4b08      	ldr	r3, [pc, #32]	@ (800ca78 <_strtod_l+0x860>)
 800ca56:	400b      	ands	r3, r1
 800ca58:	4682      	mov	sl, r0
 800ca5a:	468b      	mov	fp, r1
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	f47f ae05 	bne.w	800c66c <_strtod_l+0x454>
 800ca62:	9a05      	ldr	r2, [sp, #20]
 800ca64:	2322      	movs	r3, #34	@ 0x22
 800ca66:	6013      	str	r3, [r2, #0]
 800ca68:	e600      	b.n	800c66c <_strtod_l+0x454>
 800ca6a:	bf00      	nop
 800ca6c:	0800f140 	.word	0x0800f140
 800ca70:	fffffc02 	.word	0xfffffc02
 800ca74:	39500000 	.word	0x39500000
 800ca78:	7ff00000 	.word	0x7ff00000
 800ca7c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ca80:	d165      	bne.n	800cb4e <_strtod_l+0x936>
 800ca82:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ca84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ca88:	b35a      	cbz	r2, 800cae2 <_strtod_l+0x8ca>
 800ca8a:	4a9f      	ldr	r2, [pc, #636]	@ (800cd08 <_strtod_l+0xaf0>)
 800ca8c:	4293      	cmp	r3, r2
 800ca8e:	d12b      	bne.n	800cae8 <_strtod_l+0x8d0>
 800ca90:	9b08      	ldr	r3, [sp, #32]
 800ca92:	4651      	mov	r1, sl
 800ca94:	b303      	cbz	r3, 800cad8 <_strtod_l+0x8c0>
 800ca96:	4b9d      	ldr	r3, [pc, #628]	@ (800cd0c <_strtod_l+0xaf4>)
 800ca98:	465a      	mov	r2, fp
 800ca9a:	4013      	ands	r3, r2
 800ca9c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800caa0:	f04f 32ff 	mov.w	r2, #4294967295
 800caa4:	d81b      	bhi.n	800cade <_strtod_l+0x8c6>
 800caa6:	0d1b      	lsrs	r3, r3, #20
 800caa8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800caac:	fa02 f303 	lsl.w	r3, r2, r3
 800cab0:	4299      	cmp	r1, r3
 800cab2:	d119      	bne.n	800cae8 <_strtod_l+0x8d0>
 800cab4:	4b96      	ldr	r3, [pc, #600]	@ (800cd10 <_strtod_l+0xaf8>)
 800cab6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cab8:	429a      	cmp	r2, r3
 800caba:	d102      	bne.n	800cac2 <_strtod_l+0x8aa>
 800cabc:	3101      	adds	r1, #1
 800cabe:	f43f adca 	beq.w	800c656 <_strtod_l+0x43e>
 800cac2:	4b92      	ldr	r3, [pc, #584]	@ (800cd0c <_strtod_l+0xaf4>)
 800cac4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cac6:	401a      	ands	r2, r3
 800cac8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800cacc:	f04f 0a00 	mov.w	sl, #0
 800cad0:	9b08      	ldr	r3, [sp, #32]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d1b8      	bne.n	800ca48 <_strtod_l+0x830>
 800cad6:	e5c9      	b.n	800c66c <_strtod_l+0x454>
 800cad8:	f04f 33ff 	mov.w	r3, #4294967295
 800cadc:	e7e8      	b.n	800cab0 <_strtod_l+0x898>
 800cade:	4613      	mov	r3, r2
 800cae0:	e7e6      	b.n	800cab0 <_strtod_l+0x898>
 800cae2:	ea53 030a 	orrs.w	r3, r3, sl
 800cae6:	d0a1      	beq.n	800ca2c <_strtod_l+0x814>
 800cae8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800caea:	b1db      	cbz	r3, 800cb24 <_strtod_l+0x90c>
 800caec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800caee:	4213      	tst	r3, r2
 800caf0:	d0ee      	beq.n	800cad0 <_strtod_l+0x8b8>
 800caf2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800caf4:	9a08      	ldr	r2, [sp, #32]
 800caf6:	4650      	mov	r0, sl
 800caf8:	4659      	mov	r1, fp
 800cafa:	b1bb      	cbz	r3, 800cb2c <_strtod_l+0x914>
 800cafc:	f7ff fb6e 	bl	800c1dc <sulp>
 800cb00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cb04:	ec53 2b10 	vmov	r2, r3, d0
 800cb08:	f7f3 fbc0 	bl	800028c <__adddf3>
 800cb0c:	4682      	mov	sl, r0
 800cb0e:	468b      	mov	fp, r1
 800cb10:	e7de      	b.n	800cad0 <_strtod_l+0x8b8>
 800cb12:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800cb16:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cb1a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cb1e:	f04f 3aff 	mov.w	sl, #4294967295
 800cb22:	e7d5      	b.n	800cad0 <_strtod_l+0x8b8>
 800cb24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cb26:	ea13 0f0a 	tst.w	r3, sl
 800cb2a:	e7e1      	b.n	800caf0 <_strtod_l+0x8d8>
 800cb2c:	f7ff fb56 	bl	800c1dc <sulp>
 800cb30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cb34:	ec53 2b10 	vmov	r2, r3, d0
 800cb38:	f7f3 fba6 	bl	8000288 <__aeabi_dsub>
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	2300      	movs	r3, #0
 800cb40:	4682      	mov	sl, r0
 800cb42:	468b      	mov	fp, r1
 800cb44:	f7f3 ffc0 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb48:	2800      	cmp	r0, #0
 800cb4a:	d0c1      	beq.n	800cad0 <_strtod_l+0x8b8>
 800cb4c:	e619      	b.n	800c782 <_strtod_l+0x56a>
 800cb4e:	4641      	mov	r1, r8
 800cb50:	4620      	mov	r0, r4
 800cb52:	f7ff facd 	bl	800c0f0 <__ratio>
 800cb56:	ec57 6b10 	vmov	r6, r7, d0
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cb60:	4630      	mov	r0, r6
 800cb62:	4639      	mov	r1, r7
 800cb64:	f7f3 ffc4 	bl	8000af0 <__aeabi_dcmple>
 800cb68:	2800      	cmp	r0, #0
 800cb6a:	d06f      	beq.n	800cc4c <_strtod_l+0xa34>
 800cb6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d17a      	bne.n	800cc68 <_strtod_l+0xa50>
 800cb72:	f1ba 0f00 	cmp.w	sl, #0
 800cb76:	d158      	bne.n	800cc2a <_strtod_l+0xa12>
 800cb78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d15a      	bne.n	800cc38 <_strtod_l+0xa20>
 800cb82:	4b64      	ldr	r3, [pc, #400]	@ (800cd14 <_strtod_l+0xafc>)
 800cb84:	2200      	movs	r2, #0
 800cb86:	4630      	mov	r0, r6
 800cb88:	4639      	mov	r1, r7
 800cb8a:	f7f3 ffa7 	bl	8000adc <__aeabi_dcmplt>
 800cb8e:	2800      	cmp	r0, #0
 800cb90:	d159      	bne.n	800cc46 <_strtod_l+0xa2e>
 800cb92:	4630      	mov	r0, r6
 800cb94:	4639      	mov	r1, r7
 800cb96:	4b60      	ldr	r3, [pc, #384]	@ (800cd18 <_strtod_l+0xb00>)
 800cb98:	2200      	movs	r2, #0
 800cb9a:	f7f3 fd2d 	bl	80005f8 <__aeabi_dmul>
 800cb9e:	4606      	mov	r6, r0
 800cba0:	460f      	mov	r7, r1
 800cba2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800cba6:	9606      	str	r6, [sp, #24]
 800cba8:	9307      	str	r3, [sp, #28]
 800cbaa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cbae:	4d57      	ldr	r5, [pc, #348]	@ (800cd0c <_strtod_l+0xaf4>)
 800cbb0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cbb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cbb6:	401d      	ands	r5, r3
 800cbb8:	4b58      	ldr	r3, [pc, #352]	@ (800cd1c <_strtod_l+0xb04>)
 800cbba:	429d      	cmp	r5, r3
 800cbbc:	f040 80b2 	bne.w	800cd24 <_strtod_l+0xb0c>
 800cbc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cbc2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800cbc6:	ec4b ab10 	vmov	d0, sl, fp
 800cbca:	f7ff f9c9 	bl	800bf60 <__ulp>
 800cbce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cbd2:	ec51 0b10 	vmov	r0, r1, d0
 800cbd6:	f7f3 fd0f 	bl	80005f8 <__aeabi_dmul>
 800cbda:	4652      	mov	r2, sl
 800cbdc:	465b      	mov	r3, fp
 800cbde:	f7f3 fb55 	bl	800028c <__adddf3>
 800cbe2:	460b      	mov	r3, r1
 800cbe4:	4949      	ldr	r1, [pc, #292]	@ (800cd0c <_strtod_l+0xaf4>)
 800cbe6:	4a4e      	ldr	r2, [pc, #312]	@ (800cd20 <_strtod_l+0xb08>)
 800cbe8:	4019      	ands	r1, r3
 800cbea:	4291      	cmp	r1, r2
 800cbec:	4682      	mov	sl, r0
 800cbee:	d942      	bls.n	800cc76 <_strtod_l+0xa5e>
 800cbf0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cbf2:	4b47      	ldr	r3, [pc, #284]	@ (800cd10 <_strtod_l+0xaf8>)
 800cbf4:	429a      	cmp	r2, r3
 800cbf6:	d103      	bne.n	800cc00 <_strtod_l+0x9e8>
 800cbf8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cbfa:	3301      	adds	r3, #1
 800cbfc:	f43f ad2b 	beq.w	800c656 <_strtod_l+0x43e>
 800cc00:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800cd10 <_strtod_l+0xaf8>
 800cc04:	f04f 3aff 	mov.w	sl, #4294967295
 800cc08:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cc0a:	9805      	ldr	r0, [sp, #20]
 800cc0c:	f7fe fe74 	bl	800b8f8 <_Bfree>
 800cc10:	9805      	ldr	r0, [sp, #20]
 800cc12:	4649      	mov	r1, r9
 800cc14:	f7fe fe70 	bl	800b8f8 <_Bfree>
 800cc18:	9805      	ldr	r0, [sp, #20]
 800cc1a:	4641      	mov	r1, r8
 800cc1c:	f7fe fe6c 	bl	800b8f8 <_Bfree>
 800cc20:	9805      	ldr	r0, [sp, #20]
 800cc22:	4621      	mov	r1, r4
 800cc24:	f7fe fe68 	bl	800b8f8 <_Bfree>
 800cc28:	e618      	b.n	800c85c <_strtod_l+0x644>
 800cc2a:	f1ba 0f01 	cmp.w	sl, #1
 800cc2e:	d103      	bne.n	800cc38 <_strtod_l+0xa20>
 800cc30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	f43f ada5 	beq.w	800c782 <_strtod_l+0x56a>
 800cc38:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800cce8 <_strtod_l+0xad0>
 800cc3c:	4f35      	ldr	r7, [pc, #212]	@ (800cd14 <_strtod_l+0xafc>)
 800cc3e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cc42:	2600      	movs	r6, #0
 800cc44:	e7b1      	b.n	800cbaa <_strtod_l+0x992>
 800cc46:	4f34      	ldr	r7, [pc, #208]	@ (800cd18 <_strtod_l+0xb00>)
 800cc48:	2600      	movs	r6, #0
 800cc4a:	e7aa      	b.n	800cba2 <_strtod_l+0x98a>
 800cc4c:	4b32      	ldr	r3, [pc, #200]	@ (800cd18 <_strtod_l+0xb00>)
 800cc4e:	4630      	mov	r0, r6
 800cc50:	4639      	mov	r1, r7
 800cc52:	2200      	movs	r2, #0
 800cc54:	f7f3 fcd0 	bl	80005f8 <__aeabi_dmul>
 800cc58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc5a:	4606      	mov	r6, r0
 800cc5c:	460f      	mov	r7, r1
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d09f      	beq.n	800cba2 <_strtod_l+0x98a>
 800cc62:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800cc66:	e7a0      	b.n	800cbaa <_strtod_l+0x992>
 800cc68:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ccf0 <_strtod_l+0xad8>
 800cc6c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cc70:	ec57 6b17 	vmov	r6, r7, d7
 800cc74:	e799      	b.n	800cbaa <_strtod_l+0x992>
 800cc76:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800cc7a:	9b08      	ldr	r3, [sp, #32]
 800cc7c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d1c1      	bne.n	800cc08 <_strtod_l+0x9f0>
 800cc84:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cc88:	0d1b      	lsrs	r3, r3, #20
 800cc8a:	051b      	lsls	r3, r3, #20
 800cc8c:	429d      	cmp	r5, r3
 800cc8e:	d1bb      	bne.n	800cc08 <_strtod_l+0x9f0>
 800cc90:	4630      	mov	r0, r6
 800cc92:	4639      	mov	r1, r7
 800cc94:	f7f4 f810 	bl	8000cb8 <__aeabi_d2lz>
 800cc98:	f7f3 fc80 	bl	800059c <__aeabi_l2d>
 800cc9c:	4602      	mov	r2, r0
 800cc9e:	460b      	mov	r3, r1
 800cca0:	4630      	mov	r0, r6
 800cca2:	4639      	mov	r1, r7
 800cca4:	f7f3 faf0 	bl	8000288 <__aeabi_dsub>
 800cca8:	460b      	mov	r3, r1
 800ccaa:	4602      	mov	r2, r0
 800ccac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ccb0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ccb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ccb6:	ea46 060a 	orr.w	r6, r6, sl
 800ccba:	431e      	orrs	r6, r3
 800ccbc:	d06f      	beq.n	800cd9e <_strtod_l+0xb86>
 800ccbe:	a30e      	add	r3, pc, #56	@ (adr r3, 800ccf8 <_strtod_l+0xae0>)
 800ccc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc4:	f7f3 ff0a 	bl	8000adc <__aeabi_dcmplt>
 800ccc8:	2800      	cmp	r0, #0
 800ccca:	f47f accf 	bne.w	800c66c <_strtod_l+0x454>
 800ccce:	a30c      	add	r3, pc, #48	@ (adr r3, 800cd00 <_strtod_l+0xae8>)
 800ccd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ccd8:	f7f3 ff1e 	bl	8000b18 <__aeabi_dcmpgt>
 800ccdc:	2800      	cmp	r0, #0
 800ccde:	d093      	beq.n	800cc08 <_strtod_l+0x9f0>
 800cce0:	e4c4      	b.n	800c66c <_strtod_l+0x454>
 800cce2:	bf00      	nop
 800cce4:	f3af 8000 	nop.w
 800cce8:	00000000 	.word	0x00000000
 800ccec:	bff00000 	.word	0xbff00000
 800ccf0:	00000000 	.word	0x00000000
 800ccf4:	3ff00000 	.word	0x3ff00000
 800ccf8:	94a03595 	.word	0x94a03595
 800ccfc:	3fdfffff 	.word	0x3fdfffff
 800cd00:	35afe535 	.word	0x35afe535
 800cd04:	3fe00000 	.word	0x3fe00000
 800cd08:	000fffff 	.word	0x000fffff
 800cd0c:	7ff00000 	.word	0x7ff00000
 800cd10:	7fefffff 	.word	0x7fefffff
 800cd14:	3ff00000 	.word	0x3ff00000
 800cd18:	3fe00000 	.word	0x3fe00000
 800cd1c:	7fe00000 	.word	0x7fe00000
 800cd20:	7c9fffff 	.word	0x7c9fffff
 800cd24:	9b08      	ldr	r3, [sp, #32]
 800cd26:	b323      	cbz	r3, 800cd72 <_strtod_l+0xb5a>
 800cd28:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800cd2c:	d821      	bhi.n	800cd72 <_strtod_l+0xb5a>
 800cd2e:	a328      	add	r3, pc, #160	@ (adr r3, 800cdd0 <_strtod_l+0xbb8>)
 800cd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd34:	4630      	mov	r0, r6
 800cd36:	4639      	mov	r1, r7
 800cd38:	f7f3 feda 	bl	8000af0 <__aeabi_dcmple>
 800cd3c:	b1a0      	cbz	r0, 800cd68 <_strtod_l+0xb50>
 800cd3e:	4639      	mov	r1, r7
 800cd40:	4630      	mov	r0, r6
 800cd42:	f7f3 ff31 	bl	8000ba8 <__aeabi_d2uiz>
 800cd46:	2801      	cmp	r0, #1
 800cd48:	bf38      	it	cc
 800cd4a:	2001      	movcc	r0, #1
 800cd4c:	f7f3 fbda 	bl	8000504 <__aeabi_ui2d>
 800cd50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd52:	4606      	mov	r6, r0
 800cd54:	460f      	mov	r7, r1
 800cd56:	b9fb      	cbnz	r3, 800cd98 <_strtod_l+0xb80>
 800cd58:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cd5c:	9014      	str	r0, [sp, #80]	@ 0x50
 800cd5e:	9315      	str	r3, [sp, #84]	@ 0x54
 800cd60:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800cd64:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cd68:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cd6a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800cd6e:	1b5b      	subs	r3, r3, r5
 800cd70:	9311      	str	r3, [sp, #68]	@ 0x44
 800cd72:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cd76:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800cd7a:	f7ff f8f1 	bl	800bf60 <__ulp>
 800cd7e:	4650      	mov	r0, sl
 800cd80:	ec53 2b10 	vmov	r2, r3, d0
 800cd84:	4659      	mov	r1, fp
 800cd86:	f7f3 fc37 	bl	80005f8 <__aeabi_dmul>
 800cd8a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800cd8e:	f7f3 fa7d 	bl	800028c <__adddf3>
 800cd92:	4682      	mov	sl, r0
 800cd94:	468b      	mov	fp, r1
 800cd96:	e770      	b.n	800cc7a <_strtod_l+0xa62>
 800cd98:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800cd9c:	e7e0      	b.n	800cd60 <_strtod_l+0xb48>
 800cd9e:	a30e      	add	r3, pc, #56	@ (adr r3, 800cdd8 <_strtod_l+0xbc0>)
 800cda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda4:	f7f3 fe9a 	bl	8000adc <__aeabi_dcmplt>
 800cda8:	e798      	b.n	800ccdc <_strtod_l+0xac4>
 800cdaa:	2300      	movs	r3, #0
 800cdac:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cdae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800cdb0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cdb2:	6013      	str	r3, [r2, #0]
 800cdb4:	f7ff ba6d 	b.w	800c292 <_strtod_l+0x7a>
 800cdb8:	2a65      	cmp	r2, #101	@ 0x65
 800cdba:	f43f ab66 	beq.w	800c48a <_strtod_l+0x272>
 800cdbe:	2a45      	cmp	r2, #69	@ 0x45
 800cdc0:	f43f ab63 	beq.w	800c48a <_strtod_l+0x272>
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	f7ff bb9e 	b.w	800c506 <_strtod_l+0x2ee>
 800cdca:	bf00      	nop
 800cdcc:	f3af 8000 	nop.w
 800cdd0:	ffc00000 	.word	0xffc00000
 800cdd4:	41dfffff 	.word	0x41dfffff
 800cdd8:	94a03595 	.word	0x94a03595
 800cddc:	3fcfffff 	.word	0x3fcfffff

0800cde0 <_strtod_r>:
 800cde0:	4b01      	ldr	r3, [pc, #4]	@ (800cde8 <_strtod_r+0x8>)
 800cde2:	f7ff ba19 	b.w	800c218 <_strtod_l>
 800cde6:	bf00      	nop
 800cde8:	2000009c 	.word	0x2000009c

0800cdec <_strtol_l.constprop.0>:
 800cdec:	2b24      	cmp	r3, #36	@ 0x24
 800cdee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdf2:	4686      	mov	lr, r0
 800cdf4:	4690      	mov	r8, r2
 800cdf6:	d801      	bhi.n	800cdfc <_strtol_l.constprop.0+0x10>
 800cdf8:	2b01      	cmp	r3, #1
 800cdfa:	d106      	bne.n	800ce0a <_strtol_l.constprop.0+0x1e>
 800cdfc:	f7fd fdb4 	bl	800a968 <__errno>
 800ce00:	2316      	movs	r3, #22
 800ce02:	6003      	str	r3, [r0, #0]
 800ce04:	2000      	movs	r0, #0
 800ce06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce0a:	4834      	ldr	r0, [pc, #208]	@ (800cedc <_strtol_l.constprop.0+0xf0>)
 800ce0c:	460d      	mov	r5, r1
 800ce0e:	462a      	mov	r2, r5
 800ce10:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce14:	5d06      	ldrb	r6, [r0, r4]
 800ce16:	f016 0608 	ands.w	r6, r6, #8
 800ce1a:	d1f8      	bne.n	800ce0e <_strtol_l.constprop.0+0x22>
 800ce1c:	2c2d      	cmp	r4, #45	@ 0x2d
 800ce1e:	d12d      	bne.n	800ce7c <_strtol_l.constprop.0+0x90>
 800ce20:	782c      	ldrb	r4, [r5, #0]
 800ce22:	2601      	movs	r6, #1
 800ce24:	1c95      	adds	r5, r2, #2
 800ce26:	f033 0210 	bics.w	r2, r3, #16
 800ce2a:	d109      	bne.n	800ce40 <_strtol_l.constprop.0+0x54>
 800ce2c:	2c30      	cmp	r4, #48	@ 0x30
 800ce2e:	d12a      	bne.n	800ce86 <_strtol_l.constprop.0+0x9a>
 800ce30:	782a      	ldrb	r2, [r5, #0]
 800ce32:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ce36:	2a58      	cmp	r2, #88	@ 0x58
 800ce38:	d125      	bne.n	800ce86 <_strtol_l.constprop.0+0x9a>
 800ce3a:	786c      	ldrb	r4, [r5, #1]
 800ce3c:	2310      	movs	r3, #16
 800ce3e:	3502      	adds	r5, #2
 800ce40:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ce44:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ce48:	2200      	movs	r2, #0
 800ce4a:	fbbc f9f3 	udiv	r9, ip, r3
 800ce4e:	4610      	mov	r0, r2
 800ce50:	fb03 ca19 	mls	sl, r3, r9, ip
 800ce54:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ce58:	2f09      	cmp	r7, #9
 800ce5a:	d81b      	bhi.n	800ce94 <_strtol_l.constprop.0+0xa8>
 800ce5c:	463c      	mov	r4, r7
 800ce5e:	42a3      	cmp	r3, r4
 800ce60:	dd27      	ble.n	800ceb2 <_strtol_l.constprop.0+0xc6>
 800ce62:	1c57      	adds	r7, r2, #1
 800ce64:	d007      	beq.n	800ce76 <_strtol_l.constprop.0+0x8a>
 800ce66:	4581      	cmp	r9, r0
 800ce68:	d320      	bcc.n	800ceac <_strtol_l.constprop.0+0xc0>
 800ce6a:	d101      	bne.n	800ce70 <_strtol_l.constprop.0+0x84>
 800ce6c:	45a2      	cmp	sl, r4
 800ce6e:	db1d      	blt.n	800ceac <_strtol_l.constprop.0+0xc0>
 800ce70:	fb00 4003 	mla	r0, r0, r3, r4
 800ce74:	2201      	movs	r2, #1
 800ce76:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce7a:	e7eb      	b.n	800ce54 <_strtol_l.constprop.0+0x68>
 800ce7c:	2c2b      	cmp	r4, #43	@ 0x2b
 800ce7e:	bf04      	itt	eq
 800ce80:	782c      	ldrbeq	r4, [r5, #0]
 800ce82:	1c95      	addeq	r5, r2, #2
 800ce84:	e7cf      	b.n	800ce26 <_strtol_l.constprop.0+0x3a>
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d1da      	bne.n	800ce40 <_strtol_l.constprop.0+0x54>
 800ce8a:	2c30      	cmp	r4, #48	@ 0x30
 800ce8c:	bf0c      	ite	eq
 800ce8e:	2308      	moveq	r3, #8
 800ce90:	230a      	movne	r3, #10
 800ce92:	e7d5      	b.n	800ce40 <_strtol_l.constprop.0+0x54>
 800ce94:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ce98:	2f19      	cmp	r7, #25
 800ce9a:	d801      	bhi.n	800cea0 <_strtol_l.constprop.0+0xb4>
 800ce9c:	3c37      	subs	r4, #55	@ 0x37
 800ce9e:	e7de      	b.n	800ce5e <_strtol_l.constprop.0+0x72>
 800cea0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800cea4:	2f19      	cmp	r7, #25
 800cea6:	d804      	bhi.n	800ceb2 <_strtol_l.constprop.0+0xc6>
 800cea8:	3c57      	subs	r4, #87	@ 0x57
 800ceaa:	e7d8      	b.n	800ce5e <_strtol_l.constprop.0+0x72>
 800ceac:	f04f 32ff 	mov.w	r2, #4294967295
 800ceb0:	e7e1      	b.n	800ce76 <_strtol_l.constprop.0+0x8a>
 800ceb2:	1c53      	adds	r3, r2, #1
 800ceb4:	d108      	bne.n	800cec8 <_strtol_l.constprop.0+0xdc>
 800ceb6:	2322      	movs	r3, #34	@ 0x22
 800ceb8:	f8ce 3000 	str.w	r3, [lr]
 800cebc:	4660      	mov	r0, ip
 800cebe:	f1b8 0f00 	cmp.w	r8, #0
 800cec2:	d0a0      	beq.n	800ce06 <_strtol_l.constprop.0+0x1a>
 800cec4:	1e69      	subs	r1, r5, #1
 800cec6:	e006      	b.n	800ced6 <_strtol_l.constprop.0+0xea>
 800cec8:	b106      	cbz	r6, 800cecc <_strtol_l.constprop.0+0xe0>
 800ceca:	4240      	negs	r0, r0
 800cecc:	f1b8 0f00 	cmp.w	r8, #0
 800ced0:	d099      	beq.n	800ce06 <_strtol_l.constprop.0+0x1a>
 800ced2:	2a00      	cmp	r2, #0
 800ced4:	d1f6      	bne.n	800cec4 <_strtol_l.constprop.0+0xd8>
 800ced6:	f8c8 1000 	str.w	r1, [r8]
 800ceda:	e794      	b.n	800ce06 <_strtol_l.constprop.0+0x1a>
 800cedc:	0800f169 	.word	0x0800f169

0800cee0 <_strtol_r>:
 800cee0:	f7ff bf84 	b.w	800cdec <_strtol_l.constprop.0>

0800cee4 <__ssputs_r>:
 800cee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cee8:	688e      	ldr	r6, [r1, #8]
 800ceea:	461f      	mov	r7, r3
 800ceec:	42be      	cmp	r6, r7
 800ceee:	680b      	ldr	r3, [r1, #0]
 800cef0:	4682      	mov	sl, r0
 800cef2:	460c      	mov	r4, r1
 800cef4:	4690      	mov	r8, r2
 800cef6:	d82d      	bhi.n	800cf54 <__ssputs_r+0x70>
 800cef8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cefc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cf00:	d026      	beq.n	800cf50 <__ssputs_r+0x6c>
 800cf02:	6965      	ldr	r5, [r4, #20]
 800cf04:	6909      	ldr	r1, [r1, #16]
 800cf06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf0a:	eba3 0901 	sub.w	r9, r3, r1
 800cf0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf12:	1c7b      	adds	r3, r7, #1
 800cf14:	444b      	add	r3, r9
 800cf16:	106d      	asrs	r5, r5, #1
 800cf18:	429d      	cmp	r5, r3
 800cf1a:	bf38      	it	cc
 800cf1c:	461d      	movcc	r5, r3
 800cf1e:	0553      	lsls	r3, r2, #21
 800cf20:	d527      	bpl.n	800cf72 <__ssputs_r+0x8e>
 800cf22:	4629      	mov	r1, r5
 800cf24:	f7fe fc1c 	bl	800b760 <_malloc_r>
 800cf28:	4606      	mov	r6, r0
 800cf2a:	b360      	cbz	r0, 800cf86 <__ssputs_r+0xa2>
 800cf2c:	6921      	ldr	r1, [r4, #16]
 800cf2e:	464a      	mov	r2, r9
 800cf30:	f000 fd94 	bl	800da5c <memcpy>
 800cf34:	89a3      	ldrh	r3, [r4, #12]
 800cf36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cf3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf3e:	81a3      	strh	r3, [r4, #12]
 800cf40:	6126      	str	r6, [r4, #16]
 800cf42:	6165      	str	r5, [r4, #20]
 800cf44:	444e      	add	r6, r9
 800cf46:	eba5 0509 	sub.w	r5, r5, r9
 800cf4a:	6026      	str	r6, [r4, #0]
 800cf4c:	60a5      	str	r5, [r4, #8]
 800cf4e:	463e      	mov	r6, r7
 800cf50:	42be      	cmp	r6, r7
 800cf52:	d900      	bls.n	800cf56 <__ssputs_r+0x72>
 800cf54:	463e      	mov	r6, r7
 800cf56:	6820      	ldr	r0, [r4, #0]
 800cf58:	4632      	mov	r2, r6
 800cf5a:	4641      	mov	r1, r8
 800cf5c:	f000 fd53 	bl	800da06 <memmove>
 800cf60:	68a3      	ldr	r3, [r4, #8]
 800cf62:	1b9b      	subs	r3, r3, r6
 800cf64:	60a3      	str	r3, [r4, #8]
 800cf66:	6823      	ldr	r3, [r4, #0]
 800cf68:	4433      	add	r3, r6
 800cf6a:	6023      	str	r3, [r4, #0]
 800cf6c:	2000      	movs	r0, #0
 800cf6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf72:	462a      	mov	r2, r5
 800cf74:	f001 f905 	bl	800e182 <_realloc_r>
 800cf78:	4606      	mov	r6, r0
 800cf7a:	2800      	cmp	r0, #0
 800cf7c:	d1e0      	bne.n	800cf40 <__ssputs_r+0x5c>
 800cf7e:	6921      	ldr	r1, [r4, #16]
 800cf80:	4650      	mov	r0, sl
 800cf82:	f7fe fb79 	bl	800b678 <_free_r>
 800cf86:	230c      	movs	r3, #12
 800cf88:	f8ca 3000 	str.w	r3, [sl]
 800cf8c:	89a3      	ldrh	r3, [r4, #12]
 800cf8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf92:	81a3      	strh	r3, [r4, #12]
 800cf94:	f04f 30ff 	mov.w	r0, #4294967295
 800cf98:	e7e9      	b.n	800cf6e <__ssputs_r+0x8a>
	...

0800cf9c <_svfiprintf_r>:
 800cf9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfa0:	4698      	mov	r8, r3
 800cfa2:	898b      	ldrh	r3, [r1, #12]
 800cfa4:	061b      	lsls	r3, r3, #24
 800cfa6:	b09d      	sub	sp, #116	@ 0x74
 800cfa8:	4607      	mov	r7, r0
 800cfaa:	460d      	mov	r5, r1
 800cfac:	4614      	mov	r4, r2
 800cfae:	d510      	bpl.n	800cfd2 <_svfiprintf_r+0x36>
 800cfb0:	690b      	ldr	r3, [r1, #16]
 800cfb2:	b973      	cbnz	r3, 800cfd2 <_svfiprintf_r+0x36>
 800cfb4:	2140      	movs	r1, #64	@ 0x40
 800cfb6:	f7fe fbd3 	bl	800b760 <_malloc_r>
 800cfba:	6028      	str	r0, [r5, #0]
 800cfbc:	6128      	str	r0, [r5, #16]
 800cfbe:	b930      	cbnz	r0, 800cfce <_svfiprintf_r+0x32>
 800cfc0:	230c      	movs	r3, #12
 800cfc2:	603b      	str	r3, [r7, #0]
 800cfc4:	f04f 30ff 	mov.w	r0, #4294967295
 800cfc8:	b01d      	add	sp, #116	@ 0x74
 800cfca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfce:	2340      	movs	r3, #64	@ 0x40
 800cfd0:	616b      	str	r3, [r5, #20]
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfd6:	2320      	movs	r3, #32
 800cfd8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cfdc:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfe0:	2330      	movs	r3, #48	@ 0x30
 800cfe2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d180 <_svfiprintf_r+0x1e4>
 800cfe6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cfea:	f04f 0901 	mov.w	r9, #1
 800cfee:	4623      	mov	r3, r4
 800cff0:	469a      	mov	sl, r3
 800cff2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cff6:	b10a      	cbz	r2, 800cffc <_svfiprintf_r+0x60>
 800cff8:	2a25      	cmp	r2, #37	@ 0x25
 800cffa:	d1f9      	bne.n	800cff0 <_svfiprintf_r+0x54>
 800cffc:	ebba 0b04 	subs.w	fp, sl, r4
 800d000:	d00b      	beq.n	800d01a <_svfiprintf_r+0x7e>
 800d002:	465b      	mov	r3, fp
 800d004:	4622      	mov	r2, r4
 800d006:	4629      	mov	r1, r5
 800d008:	4638      	mov	r0, r7
 800d00a:	f7ff ff6b 	bl	800cee4 <__ssputs_r>
 800d00e:	3001      	adds	r0, #1
 800d010:	f000 80a7 	beq.w	800d162 <_svfiprintf_r+0x1c6>
 800d014:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d016:	445a      	add	r2, fp
 800d018:	9209      	str	r2, [sp, #36]	@ 0x24
 800d01a:	f89a 3000 	ldrb.w	r3, [sl]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	f000 809f 	beq.w	800d162 <_svfiprintf_r+0x1c6>
 800d024:	2300      	movs	r3, #0
 800d026:	f04f 32ff 	mov.w	r2, #4294967295
 800d02a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d02e:	f10a 0a01 	add.w	sl, sl, #1
 800d032:	9304      	str	r3, [sp, #16]
 800d034:	9307      	str	r3, [sp, #28]
 800d036:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d03a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d03c:	4654      	mov	r4, sl
 800d03e:	2205      	movs	r2, #5
 800d040:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d044:	484e      	ldr	r0, [pc, #312]	@ (800d180 <_svfiprintf_r+0x1e4>)
 800d046:	f7f3 f8c3 	bl	80001d0 <memchr>
 800d04a:	9a04      	ldr	r2, [sp, #16]
 800d04c:	b9d8      	cbnz	r0, 800d086 <_svfiprintf_r+0xea>
 800d04e:	06d0      	lsls	r0, r2, #27
 800d050:	bf44      	itt	mi
 800d052:	2320      	movmi	r3, #32
 800d054:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d058:	0711      	lsls	r1, r2, #28
 800d05a:	bf44      	itt	mi
 800d05c:	232b      	movmi	r3, #43	@ 0x2b
 800d05e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d062:	f89a 3000 	ldrb.w	r3, [sl]
 800d066:	2b2a      	cmp	r3, #42	@ 0x2a
 800d068:	d015      	beq.n	800d096 <_svfiprintf_r+0xfa>
 800d06a:	9a07      	ldr	r2, [sp, #28]
 800d06c:	4654      	mov	r4, sl
 800d06e:	2000      	movs	r0, #0
 800d070:	f04f 0c0a 	mov.w	ip, #10
 800d074:	4621      	mov	r1, r4
 800d076:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d07a:	3b30      	subs	r3, #48	@ 0x30
 800d07c:	2b09      	cmp	r3, #9
 800d07e:	d94b      	bls.n	800d118 <_svfiprintf_r+0x17c>
 800d080:	b1b0      	cbz	r0, 800d0b0 <_svfiprintf_r+0x114>
 800d082:	9207      	str	r2, [sp, #28]
 800d084:	e014      	b.n	800d0b0 <_svfiprintf_r+0x114>
 800d086:	eba0 0308 	sub.w	r3, r0, r8
 800d08a:	fa09 f303 	lsl.w	r3, r9, r3
 800d08e:	4313      	orrs	r3, r2
 800d090:	9304      	str	r3, [sp, #16]
 800d092:	46a2      	mov	sl, r4
 800d094:	e7d2      	b.n	800d03c <_svfiprintf_r+0xa0>
 800d096:	9b03      	ldr	r3, [sp, #12]
 800d098:	1d19      	adds	r1, r3, #4
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	9103      	str	r1, [sp, #12]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	bfbb      	ittet	lt
 800d0a2:	425b      	neglt	r3, r3
 800d0a4:	f042 0202 	orrlt.w	r2, r2, #2
 800d0a8:	9307      	strge	r3, [sp, #28]
 800d0aa:	9307      	strlt	r3, [sp, #28]
 800d0ac:	bfb8      	it	lt
 800d0ae:	9204      	strlt	r2, [sp, #16]
 800d0b0:	7823      	ldrb	r3, [r4, #0]
 800d0b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800d0b4:	d10a      	bne.n	800d0cc <_svfiprintf_r+0x130>
 800d0b6:	7863      	ldrb	r3, [r4, #1]
 800d0b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d0ba:	d132      	bne.n	800d122 <_svfiprintf_r+0x186>
 800d0bc:	9b03      	ldr	r3, [sp, #12]
 800d0be:	1d1a      	adds	r2, r3, #4
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	9203      	str	r2, [sp, #12]
 800d0c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d0c8:	3402      	adds	r4, #2
 800d0ca:	9305      	str	r3, [sp, #20]
 800d0cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d190 <_svfiprintf_r+0x1f4>
 800d0d0:	7821      	ldrb	r1, [r4, #0]
 800d0d2:	2203      	movs	r2, #3
 800d0d4:	4650      	mov	r0, sl
 800d0d6:	f7f3 f87b 	bl	80001d0 <memchr>
 800d0da:	b138      	cbz	r0, 800d0ec <_svfiprintf_r+0x150>
 800d0dc:	9b04      	ldr	r3, [sp, #16]
 800d0de:	eba0 000a 	sub.w	r0, r0, sl
 800d0e2:	2240      	movs	r2, #64	@ 0x40
 800d0e4:	4082      	lsls	r2, r0
 800d0e6:	4313      	orrs	r3, r2
 800d0e8:	3401      	adds	r4, #1
 800d0ea:	9304      	str	r3, [sp, #16]
 800d0ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0f0:	4824      	ldr	r0, [pc, #144]	@ (800d184 <_svfiprintf_r+0x1e8>)
 800d0f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d0f6:	2206      	movs	r2, #6
 800d0f8:	f7f3 f86a 	bl	80001d0 <memchr>
 800d0fc:	2800      	cmp	r0, #0
 800d0fe:	d036      	beq.n	800d16e <_svfiprintf_r+0x1d2>
 800d100:	4b21      	ldr	r3, [pc, #132]	@ (800d188 <_svfiprintf_r+0x1ec>)
 800d102:	bb1b      	cbnz	r3, 800d14c <_svfiprintf_r+0x1b0>
 800d104:	9b03      	ldr	r3, [sp, #12]
 800d106:	3307      	adds	r3, #7
 800d108:	f023 0307 	bic.w	r3, r3, #7
 800d10c:	3308      	adds	r3, #8
 800d10e:	9303      	str	r3, [sp, #12]
 800d110:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d112:	4433      	add	r3, r6
 800d114:	9309      	str	r3, [sp, #36]	@ 0x24
 800d116:	e76a      	b.n	800cfee <_svfiprintf_r+0x52>
 800d118:	fb0c 3202 	mla	r2, ip, r2, r3
 800d11c:	460c      	mov	r4, r1
 800d11e:	2001      	movs	r0, #1
 800d120:	e7a8      	b.n	800d074 <_svfiprintf_r+0xd8>
 800d122:	2300      	movs	r3, #0
 800d124:	3401      	adds	r4, #1
 800d126:	9305      	str	r3, [sp, #20]
 800d128:	4619      	mov	r1, r3
 800d12a:	f04f 0c0a 	mov.w	ip, #10
 800d12e:	4620      	mov	r0, r4
 800d130:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d134:	3a30      	subs	r2, #48	@ 0x30
 800d136:	2a09      	cmp	r2, #9
 800d138:	d903      	bls.n	800d142 <_svfiprintf_r+0x1a6>
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d0c6      	beq.n	800d0cc <_svfiprintf_r+0x130>
 800d13e:	9105      	str	r1, [sp, #20]
 800d140:	e7c4      	b.n	800d0cc <_svfiprintf_r+0x130>
 800d142:	fb0c 2101 	mla	r1, ip, r1, r2
 800d146:	4604      	mov	r4, r0
 800d148:	2301      	movs	r3, #1
 800d14a:	e7f0      	b.n	800d12e <_svfiprintf_r+0x192>
 800d14c:	ab03      	add	r3, sp, #12
 800d14e:	9300      	str	r3, [sp, #0]
 800d150:	462a      	mov	r2, r5
 800d152:	4b0e      	ldr	r3, [pc, #56]	@ (800d18c <_svfiprintf_r+0x1f0>)
 800d154:	a904      	add	r1, sp, #16
 800d156:	4638      	mov	r0, r7
 800d158:	f7fc fc84 	bl	8009a64 <_printf_float>
 800d15c:	1c42      	adds	r2, r0, #1
 800d15e:	4606      	mov	r6, r0
 800d160:	d1d6      	bne.n	800d110 <_svfiprintf_r+0x174>
 800d162:	89ab      	ldrh	r3, [r5, #12]
 800d164:	065b      	lsls	r3, r3, #25
 800d166:	f53f af2d 	bmi.w	800cfc4 <_svfiprintf_r+0x28>
 800d16a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d16c:	e72c      	b.n	800cfc8 <_svfiprintf_r+0x2c>
 800d16e:	ab03      	add	r3, sp, #12
 800d170:	9300      	str	r3, [sp, #0]
 800d172:	462a      	mov	r2, r5
 800d174:	4b05      	ldr	r3, [pc, #20]	@ (800d18c <_svfiprintf_r+0x1f0>)
 800d176:	a904      	add	r1, sp, #16
 800d178:	4638      	mov	r0, r7
 800d17a:	f7fc ff0b 	bl	8009f94 <_printf_i>
 800d17e:	e7ed      	b.n	800d15c <_svfiprintf_r+0x1c0>
 800d180:	0800f269 	.word	0x0800f269
 800d184:	0800f273 	.word	0x0800f273
 800d188:	08009a65 	.word	0x08009a65
 800d18c:	0800cee5 	.word	0x0800cee5
 800d190:	0800f26f 	.word	0x0800f26f

0800d194 <_sungetc_r>:
 800d194:	b538      	push	{r3, r4, r5, lr}
 800d196:	1c4b      	adds	r3, r1, #1
 800d198:	4614      	mov	r4, r2
 800d19a:	d103      	bne.n	800d1a4 <_sungetc_r+0x10>
 800d19c:	f04f 35ff 	mov.w	r5, #4294967295
 800d1a0:	4628      	mov	r0, r5
 800d1a2:	bd38      	pop	{r3, r4, r5, pc}
 800d1a4:	8993      	ldrh	r3, [r2, #12]
 800d1a6:	f023 0320 	bic.w	r3, r3, #32
 800d1aa:	8193      	strh	r3, [r2, #12]
 800d1ac:	6853      	ldr	r3, [r2, #4]
 800d1ae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800d1b0:	b2cd      	uxtb	r5, r1
 800d1b2:	b18a      	cbz	r2, 800d1d8 <_sungetc_r+0x44>
 800d1b4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800d1b6:	429a      	cmp	r2, r3
 800d1b8:	dd08      	ble.n	800d1cc <_sungetc_r+0x38>
 800d1ba:	6823      	ldr	r3, [r4, #0]
 800d1bc:	1e5a      	subs	r2, r3, #1
 800d1be:	6022      	str	r2, [r4, #0]
 800d1c0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d1c4:	6863      	ldr	r3, [r4, #4]
 800d1c6:	3301      	adds	r3, #1
 800d1c8:	6063      	str	r3, [r4, #4]
 800d1ca:	e7e9      	b.n	800d1a0 <_sungetc_r+0xc>
 800d1cc:	4621      	mov	r1, r4
 800d1ce:	f000 fbe0 	bl	800d992 <__submore>
 800d1d2:	2800      	cmp	r0, #0
 800d1d4:	d0f1      	beq.n	800d1ba <_sungetc_r+0x26>
 800d1d6:	e7e1      	b.n	800d19c <_sungetc_r+0x8>
 800d1d8:	6921      	ldr	r1, [r4, #16]
 800d1da:	6822      	ldr	r2, [r4, #0]
 800d1dc:	b141      	cbz	r1, 800d1f0 <_sungetc_r+0x5c>
 800d1de:	4291      	cmp	r1, r2
 800d1e0:	d206      	bcs.n	800d1f0 <_sungetc_r+0x5c>
 800d1e2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800d1e6:	42a9      	cmp	r1, r5
 800d1e8:	d102      	bne.n	800d1f0 <_sungetc_r+0x5c>
 800d1ea:	3a01      	subs	r2, #1
 800d1ec:	6022      	str	r2, [r4, #0]
 800d1ee:	e7ea      	b.n	800d1c6 <_sungetc_r+0x32>
 800d1f0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800d1f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d1f8:	6363      	str	r3, [r4, #52]	@ 0x34
 800d1fa:	2303      	movs	r3, #3
 800d1fc:	63a3      	str	r3, [r4, #56]	@ 0x38
 800d1fe:	4623      	mov	r3, r4
 800d200:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d204:	6023      	str	r3, [r4, #0]
 800d206:	2301      	movs	r3, #1
 800d208:	e7de      	b.n	800d1c8 <_sungetc_r+0x34>

0800d20a <__ssrefill_r>:
 800d20a:	b510      	push	{r4, lr}
 800d20c:	460c      	mov	r4, r1
 800d20e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800d210:	b169      	cbz	r1, 800d22e <__ssrefill_r+0x24>
 800d212:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d216:	4299      	cmp	r1, r3
 800d218:	d001      	beq.n	800d21e <__ssrefill_r+0x14>
 800d21a:	f7fe fa2d 	bl	800b678 <_free_r>
 800d21e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d220:	6063      	str	r3, [r4, #4]
 800d222:	2000      	movs	r0, #0
 800d224:	6360      	str	r0, [r4, #52]	@ 0x34
 800d226:	b113      	cbz	r3, 800d22e <__ssrefill_r+0x24>
 800d228:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d22a:	6023      	str	r3, [r4, #0]
 800d22c:	bd10      	pop	{r4, pc}
 800d22e:	6923      	ldr	r3, [r4, #16]
 800d230:	6023      	str	r3, [r4, #0]
 800d232:	2300      	movs	r3, #0
 800d234:	6063      	str	r3, [r4, #4]
 800d236:	89a3      	ldrh	r3, [r4, #12]
 800d238:	f043 0320 	orr.w	r3, r3, #32
 800d23c:	81a3      	strh	r3, [r4, #12]
 800d23e:	f04f 30ff 	mov.w	r0, #4294967295
 800d242:	e7f3      	b.n	800d22c <__ssrefill_r+0x22>

0800d244 <__ssvfiscanf_r>:
 800d244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d248:	460c      	mov	r4, r1
 800d24a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800d24e:	2100      	movs	r1, #0
 800d250:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800d254:	49a5      	ldr	r1, [pc, #660]	@ (800d4ec <__ssvfiscanf_r+0x2a8>)
 800d256:	91a0      	str	r1, [sp, #640]	@ 0x280
 800d258:	f10d 0804 	add.w	r8, sp, #4
 800d25c:	49a4      	ldr	r1, [pc, #656]	@ (800d4f0 <__ssvfiscanf_r+0x2ac>)
 800d25e:	4fa5      	ldr	r7, [pc, #660]	@ (800d4f4 <__ssvfiscanf_r+0x2b0>)
 800d260:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800d264:	4606      	mov	r6, r0
 800d266:	91a1      	str	r1, [sp, #644]	@ 0x284
 800d268:	9300      	str	r3, [sp, #0]
 800d26a:	7813      	ldrb	r3, [r2, #0]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	f000 8158 	beq.w	800d522 <__ssvfiscanf_r+0x2de>
 800d272:	5cf9      	ldrb	r1, [r7, r3]
 800d274:	f011 0108 	ands.w	r1, r1, #8
 800d278:	f102 0501 	add.w	r5, r2, #1
 800d27c:	d019      	beq.n	800d2b2 <__ssvfiscanf_r+0x6e>
 800d27e:	6863      	ldr	r3, [r4, #4]
 800d280:	2b00      	cmp	r3, #0
 800d282:	dd0f      	ble.n	800d2a4 <__ssvfiscanf_r+0x60>
 800d284:	6823      	ldr	r3, [r4, #0]
 800d286:	781a      	ldrb	r2, [r3, #0]
 800d288:	5cba      	ldrb	r2, [r7, r2]
 800d28a:	0712      	lsls	r2, r2, #28
 800d28c:	d401      	bmi.n	800d292 <__ssvfiscanf_r+0x4e>
 800d28e:	462a      	mov	r2, r5
 800d290:	e7eb      	b.n	800d26a <__ssvfiscanf_r+0x26>
 800d292:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d294:	3201      	adds	r2, #1
 800d296:	9245      	str	r2, [sp, #276]	@ 0x114
 800d298:	6862      	ldr	r2, [r4, #4]
 800d29a:	3301      	adds	r3, #1
 800d29c:	3a01      	subs	r2, #1
 800d29e:	6062      	str	r2, [r4, #4]
 800d2a0:	6023      	str	r3, [r4, #0]
 800d2a2:	e7ec      	b.n	800d27e <__ssvfiscanf_r+0x3a>
 800d2a4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d2a6:	4621      	mov	r1, r4
 800d2a8:	4630      	mov	r0, r6
 800d2aa:	4798      	blx	r3
 800d2ac:	2800      	cmp	r0, #0
 800d2ae:	d0e9      	beq.n	800d284 <__ssvfiscanf_r+0x40>
 800d2b0:	e7ed      	b.n	800d28e <__ssvfiscanf_r+0x4a>
 800d2b2:	2b25      	cmp	r3, #37	@ 0x25
 800d2b4:	d012      	beq.n	800d2dc <__ssvfiscanf_r+0x98>
 800d2b6:	4699      	mov	r9, r3
 800d2b8:	6863      	ldr	r3, [r4, #4]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	f340 8093 	ble.w	800d3e6 <__ssvfiscanf_r+0x1a2>
 800d2c0:	6822      	ldr	r2, [r4, #0]
 800d2c2:	7813      	ldrb	r3, [r2, #0]
 800d2c4:	454b      	cmp	r3, r9
 800d2c6:	f040 812c 	bne.w	800d522 <__ssvfiscanf_r+0x2de>
 800d2ca:	6863      	ldr	r3, [r4, #4]
 800d2cc:	3b01      	subs	r3, #1
 800d2ce:	6063      	str	r3, [r4, #4]
 800d2d0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800d2d2:	3201      	adds	r2, #1
 800d2d4:	3301      	adds	r3, #1
 800d2d6:	6022      	str	r2, [r4, #0]
 800d2d8:	9345      	str	r3, [sp, #276]	@ 0x114
 800d2da:	e7d8      	b.n	800d28e <__ssvfiscanf_r+0x4a>
 800d2dc:	9141      	str	r1, [sp, #260]	@ 0x104
 800d2de:	9143      	str	r1, [sp, #268]	@ 0x10c
 800d2e0:	7853      	ldrb	r3, [r2, #1]
 800d2e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800d2e4:	bf02      	ittt	eq
 800d2e6:	2310      	moveq	r3, #16
 800d2e8:	1c95      	addeq	r5, r2, #2
 800d2ea:	9341      	streq	r3, [sp, #260]	@ 0x104
 800d2ec:	220a      	movs	r2, #10
 800d2ee:	46a9      	mov	r9, r5
 800d2f0:	f819 1b01 	ldrb.w	r1, [r9], #1
 800d2f4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800d2f8:	2b09      	cmp	r3, #9
 800d2fa:	d91e      	bls.n	800d33a <__ssvfiscanf_r+0xf6>
 800d2fc:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800d4f8 <__ssvfiscanf_r+0x2b4>
 800d300:	2203      	movs	r2, #3
 800d302:	4650      	mov	r0, sl
 800d304:	f7f2 ff64 	bl	80001d0 <memchr>
 800d308:	b138      	cbz	r0, 800d31a <__ssvfiscanf_r+0xd6>
 800d30a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d30c:	eba0 000a 	sub.w	r0, r0, sl
 800d310:	2301      	movs	r3, #1
 800d312:	4083      	lsls	r3, r0
 800d314:	4313      	orrs	r3, r2
 800d316:	9341      	str	r3, [sp, #260]	@ 0x104
 800d318:	464d      	mov	r5, r9
 800d31a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d31e:	2b78      	cmp	r3, #120	@ 0x78
 800d320:	d806      	bhi.n	800d330 <__ssvfiscanf_r+0xec>
 800d322:	2b57      	cmp	r3, #87	@ 0x57
 800d324:	d810      	bhi.n	800d348 <__ssvfiscanf_r+0x104>
 800d326:	2b25      	cmp	r3, #37	@ 0x25
 800d328:	d0c5      	beq.n	800d2b6 <__ssvfiscanf_r+0x72>
 800d32a:	d857      	bhi.n	800d3dc <__ssvfiscanf_r+0x198>
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d065      	beq.n	800d3fc <__ssvfiscanf_r+0x1b8>
 800d330:	2303      	movs	r3, #3
 800d332:	9347      	str	r3, [sp, #284]	@ 0x11c
 800d334:	230a      	movs	r3, #10
 800d336:	9342      	str	r3, [sp, #264]	@ 0x108
 800d338:	e078      	b.n	800d42c <__ssvfiscanf_r+0x1e8>
 800d33a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800d33c:	fb02 1103 	mla	r1, r2, r3, r1
 800d340:	3930      	subs	r1, #48	@ 0x30
 800d342:	9143      	str	r1, [sp, #268]	@ 0x10c
 800d344:	464d      	mov	r5, r9
 800d346:	e7d2      	b.n	800d2ee <__ssvfiscanf_r+0xaa>
 800d348:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800d34c:	2a20      	cmp	r2, #32
 800d34e:	d8ef      	bhi.n	800d330 <__ssvfiscanf_r+0xec>
 800d350:	a101      	add	r1, pc, #4	@ (adr r1, 800d358 <__ssvfiscanf_r+0x114>)
 800d352:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d356:	bf00      	nop
 800d358:	0800d40b 	.word	0x0800d40b
 800d35c:	0800d331 	.word	0x0800d331
 800d360:	0800d331 	.word	0x0800d331
 800d364:	0800d465 	.word	0x0800d465
 800d368:	0800d331 	.word	0x0800d331
 800d36c:	0800d331 	.word	0x0800d331
 800d370:	0800d331 	.word	0x0800d331
 800d374:	0800d331 	.word	0x0800d331
 800d378:	0800d331 	.word	0x0800d331
 800d37c:	0800d331 	.word	0x0800d331
 800d380:	0800d331 	.word	0x0800d331
 800d384:	0800d47b 	.word	0x0800d47b
 800d388:	0800d461 	.word	0x0800d461
 800d38c:	0800d3e3 	.word	0x0800d3e3
 800d390:	0800d3e3 	.word	0x0800d3e3
 800d394:	0800d3e3 	.word	0x0800d3e3
 800d398:	0800d331 	.word	0x0800d331
 800d39c:	0800d41d 	.word	0x0800d41d
 800d3a0:	0800d331 	.word	0x0800d331
 800d3a4:	0800d331 	.word	0x0800d331
 800d3a8:	0800d331 	.word	0x0800d331
 800d3ac:	0800d331 	.word	0x0800d331
 800d3b0:	0800d48b 	.word	0x0800d48b
 800d3b4:	0800d425 	.word	0x0800d425
 800d3b8:	0800d403 	.word	0x0800d403
 800d3bc:	0800d331 	.word	0x0800d331
 800d3c0:	0800d331 	.word	0x0800d331
 800d3c4:	0800d487 	.word	0x0800d487
 800d3c8:	0800d331 	.word	0x0800d331
 800d3cc:	0800d461 	.word	0x0800d461
 800d3d0:	0800d331 	.word	0x0800d331
 800d3d4:	0800d331 	.word	0x0800d331
 800d3d8:	0800d40b 	.word	0x0800d40b
 800d3dc:	3b45      	subs	r3, #69	@ 0x45
 800d3de:	2b02      	cmp	r3, #2
 800d3e0:	d8a6      	bhi.n	800d330 <__ssvfiscanf_r+0xec>
 800d3e2:	2305      	movs	r3, #5
 800d3e4:	e021      	b.n	800d42a <__ssvfiscanf_r+0x1e6>
 800d3e6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d3e8:	4621      	mov	r1, r4
 800d3ea:	4630      	mov	r0, r6
 800d3ec:	4798      	blx	r3
 800d3ee:	2800      	cmp	r0, #0
 800d3f0:	f43f af66 	beq.w	800d2c0 <__ssvfiscanf_r+0x7c>
 800d3f4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800d3f6:	2800      	cmp	r0, #0
 800d3f8:	f040 808b 	bne.w	800d512 <__ssvfiscanf_r+0x2ce>
 800d3fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d400:	e08b      	b.n	800d51a <__ssvfiscanf_r+0x2d6>
 800d402:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d404:	f042 0220 	orr.w	r2, r2, #32
 800d408:	9241      	str	r2, [sp, #260]	@ 0x104
 800d40a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d40c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d410:	9241      	str	r2, [sp, #260]	@ 0x104
 800d412:	2210      	movs	r2, #16
 800d414:	2b6e      	cmp	r3, #110	@ 0x6e
 800d416:	9242      	str	r2, [sp, #264]	@ 0x108
 800d418:	d902      	bls.n	800d420 <__ssvfiscanf_r+0x1dc>
 800d41a:	e005      	b.n	800d428 <__ssvfiscanf_r+0x1e4>
 800d41c:	2300      	movs	r3, #0
 800d41e:	9342      	str	r3, [sp, #264]	@ 0x108
 800d420:	2303      	movs	r3, #3
 800d422:	e002      	b.n	800d42a <__ssvfiscanf_r+0x1e6>
 800d424:	2308      	movs	r3, #8
 800d426:	9342      	str	r3, [sp, #264]	@ 0x108
 800d428:	2304      	movs	r3, #4
 800d42a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800d42c:	6863      	ldr	r3, [r4, #4]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	dd39      	ble.n	800d4a6 <__ssvfiscanf_r+0x262>
 800d432:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800d434:	0659      	lsls	r1, r3, #25
 800d436:	d404      	bmi.n	800d442 <__ssvfiscanf_r+0x1fe>
 800d438:	6823      	ldr	r3, [r4, #0]
 800d43a:	781a      	ldrb	r2, [r3, #0]
 800d43c:	5cba      	ldrb	r2, [r7, r2]
 800d43e:	0712      	lsls	r2, r2, #28
 800d440:	d438      	bmi.n	800d4b4 <__ssvfiscanf_r+0x270>
 800d442:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800d444:	2b02      	cmp	r3, #2
 800d446:	dc47      	bgt.n	800d4d8 <__ssvfiscanf_r+0x294>
 800d448:	466b      	mov	r3, sp
 800d44a:	4622      	mov	r2, r4
 800d44c:	a941      	add	r1, sp, #260	@ 0x104
 800d44e:	4630      	mov	r0, r6
 800d450:	f000 f86c 	bl	800d52c <_scanf_chars>
 800d454:	2801      	cmp	r0, #1
 800d456:	d064      	beq.n	800d522 <__ssvfiscanf_r+0x2de>
 800d458:	2802      	cmp	r0, #2
 800d45a:	f47f af18 	bne.w	800d28e <__ssvfiscanf_r+0x4a>
 800d45e:	e7c9      	b.n	800d3f4 <__ssvfiscanf_r+0x1b0>
 800d460:	220a      	movs	r2, #10
 800d462:	e7d7      	b.n	800d414 <__ssvfiscanf_r+0x1d0>
 800d464:	4629      	mov	r1, r5
 800d466:	4640      	mov	r0, r8
 800d468:	f000 fa5a 	bl	800d920 <__sccl>
 800d46c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800d46e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d472:	9341      	str	r3, [sp, #260]	@ 0x104
 800d474:	4605      	mov	r5, r0
 800d476:	2301      	movs	r3, #1
 800d478:	e7d7      	b.n	800d42a <__ssvfiscanf_r+0x1e6>
 800d47a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800d47c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d480:	9341      	str	r3, [sp, #260]	@ 0x104
 800d482:	2300      	movs	r3, #0
 800d484:	e7d1      	b.n	800d42a <__ssvfiscanf_r+0x1e6>
 800d486:	2302      	movs	r3, #2
 800d488:	e7cf      	b.n	800d42a <__ssvfiscanf_r+0x1e6>
 800d48a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800d48c:	06c3      	lsls	r3, r0, #27
 800d48e:	f53f aefe 	bmi.w	800d28e <__ssvfiscanf_r+0x4a>
 800d492:	9b00      	ldr	r3, [sp, #0]
 800d494:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d496:	1d19      	adds	r1, r3, #4
 800d498:	9100      	str	r1, [sp, #0]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	07c0      	lsls	r0, r0, #31
 800d49e:	bf4c      	ite	mi
 800d4a0:	801a      	strhmi	r2, [r3, #0]
 800d4a2:	601a      	strpl	r2, [r3, #0]
 800d4a4:	e6f3      	b.n	800d28e <__ssvfiscanf_r+0x4a>
 800d4a6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d4a8:	4621      	mov	r1, r4
 800d4aa:	4630      	mov	r0, r6
 800d4ac:	4798      	blx	r3
 800d4ae:	2800      	cmp	r0, #0
 800d4b0:	d0bf      	beq.n	800d432 <__ssvfiscanf_r+0x1ee>
 800d4b2:	e79f      	b.n	800d3f4 <__ssvfiscanf_r+0x1b0>
 800d4b4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d4b6:	3201      	adds	r2, #1
 800d4b8:	9245      	str	r2, [sp, #276]	@ 0x114
 800d4ba:	6862      	ldr	r2, [r4, #4]
 800d4bc:	3a01      	subs	r2, #1
 800d4be:	2a00      	cmp	r2, #0
 800d4c0:	6062      	str	r2, [r4, #4]
 800d4c2:	dd02      	ble.n	800d4ca <__ssvfiscanf_r+0x286>
 800d4c4:	3301      	adds	r3, #1
 800d4c6:	6023      	str	r3, [r4, #0]
 800d4c8:	e7b6      	b.n	800d438 <__ssvfiscanf_r+0x1f4>
 800d4ca:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d4cc:	4621      	mov	r1, r4
 800d4ce:	4630      	mov	r0, r6
 800d4d0:	4798      	blx	r3
 800d4d2:	2800      	cmp	r0, #0
 800d4d4:	d0b0      	beq.n	800d438 <__ssvfiscanf_r+0x1f4>
 800d4d6:	e78d      	b.n	800d3f4 <__ssvfiscanf_r+0x1b0>
 800d4d8:	2b04      	cmp	r3, #4
 800d4da:	dc0f      	bgt.n	800d4fc <__ssvfiscanf_r+0x2b8>
 800d4dc:	466b      	mov	r3, sp
 800d4de:	4622      	mov	r2, r4
 800d4e0:	a941      	add	r1, sp, #260	@ 0x104
 800d4e2:	4630      	mov	r0, r6
 800d4e4:	f000 f87c 	bl	800d5e0 <_scanf_i>
 800d4e8:	e7b4      	b.n	800d454 <__ssvfiscanf_r+0x210>
 800d4ea:	bf00      	nop
 800d4ec:	0800d195 	.word	0x0800d195
 800d4f0:	0800d20b 	.word	0x0800d20b
 800d4f4:	0800f169 	.word	0x0800f169
 800d4f8:	0800f26f 	.word	0x0800f26f
 800d4fc:	4b0a      	ldr	r3, [pc, #40]	@ (800d528 <__ssvfiscanf_r+0x2e4>)
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	f43f aec5 	beq.w	800d28e <__ssvfiscanf_r+0x4a>
 800d504:	466b      	mov	r3, sp
 800d506:	4622      	mov	r2, r4
 800d508:	a941      	add	r1, sp, #260	@ 0x104
 800d50a:	4630      	mov	r0, r6
 800d50c:	f7fc fe62 	bl	800a1d4 <_scanf_float>
 800d510:	e7a0      	b.n	800d454 <__ssvfiscanf_r+0x210>
 800d512:	89a3      	ldrh	r3, [r4, #12]
 800d514:	065b      	lsls	r3, r3, #25
 800d516:	f53f af71 	bmi.w	800d3fc <__ssvfiscanf_r+0x1b8>
 800d51a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800d51e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d522:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800d524:	e7f9      	b.n	800d51a <__ssvfiscanf_r+0x2d6>
 800d526:	bf00      	nop
 800d528:	0800a1d5 	.word	0x0800a1d5

0800d52c <_scanf_chars>:
 800d52c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d530:	4615      	mov	r5, r2
 800d532:	688a      	ldr	r2, [r1, #8]
 800d534:	4680      	mov	r8, r0
 800d536:	460c      	mov	r4, r1
 800d538:	b932      	cbnz	r2, 800d548 <_scanf_chars+0x1c>
 800d53a:	698a      	ldr	r2, [r1, #24]
 800d53c:	2a00      	cmp	r2, #0
 800d53e:	bf14      	ite	ne
 800d540:	f04f 32ff 	movne.w	r2, #4294967295
 800d544:	2201      	moveq	r2, #1
 800d546:	608a      	str	r2, [r1, #8]
 800d548:	6822      	ldr	r2, [r4, #0]
 800d54a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800d5dc <_scanf_chars+0xb0>
 800d54e:	06d1      	lsls	r1, r2, #27
 800d550:	bf5f      	itttt	pl
 800d552:	681a      	ldrpl	r2, [r3, #0]
 800d554:	1d11      	addpl	r1, r2, #4
 800d556:	6019      	strpl	r1, [r3, #0]
 800d558:	6816      	ldrpl	r6, [r2, #0]
 800d55a:	2700      	movs	r7, #0
 800d55c:	69a0      	ldr	r0, [r4, #24]
 800d55e:	b188      	cbz	r0, 800d584 <_scanf_chars+0x58>
 800d560:	2801      	cmp	r0, #1
 800d562:	d107      	bne.n	800d574 <_scanf_chars+0x48>
 800d564:	682b      	ldr	r3, [r5, #0]
 800d566:	781a      	ldrb	r2, [r3, #0]
 800d568:	6963      	ldr	r3, [r4, #20]
 800d56a:	5c9b      	ldrb	r3, [r3, r2]
 800d56c:	b953      	cbnz	r3, 800d584 <_scanf_chars+0x58>
 800d56e:	2f00      	cmp	r7, #0
 800d570:	d031      	beq.n	800d5d6 <_scanf_chars+0xaa>
 800d572:	e022      	b.n	800d5ba <_scanf_chars+0x8e>
 800d574:	2802      	cmp	r0, #2
 800d576:	d120      	bne.n	800d5ba <_scanf_chars+0x8e>
 800d578:	682b      	ldr	r3, [r5, #0]
 800d57a:	781b      	ldrb	r3, [r3, #0]
 800d57c:	f819 3003 	ldrb.w	r3, [r9, r3]
 800d580:	071b      	lsls	r3, r3, #28
 800d582:	d41a      	bmi.n	800d5ba <_scanf_chars+0x8e>
 800d584:	6823      	ldr	r3, [r4, #0]
 800d586:	06da      	lsls	r2, r3, #27
 800d588:	bf5e      	ittt	pl
 800d58a:	682b      	ldrpl	r3, [r5, #0]
 800d58c:	781b      	ldrbpl	r3, [r3, #0]
 800d58e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800d592:	682a      	ldr	r2, [r5, #0]
 800d594:	686b      	ldr	r3, [r5, #4]
 800d596:	3201      	adds	r2, #1
 800d598:	602a      	str	r2, [r5, #0]
 800d59a:	68a2      	ldr	r2, [r4, #8]
 800d59c:	3b01      	subs	r3, #1
 800d59e:	3a01      	subs	r2, #1
 800d5a0:	606b      	str	r3, [r5, #4]
 800d5a2:	3701      	adds	r7, #1
 800d5a4:	60a2      	str	r2, [r4, #8]
 800d5a6:	b142      	cbz	r2, 800d5ba <_scanf_chars+0x8e>
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	dcd7      	bgt.n	800d55c <_scanf_chars+0x30>
 800d5ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d5b0:	4629      	mov	r1, r5
 800d5b2:	4640      	mov	r0, r8
 800d5b4:	4798      	blx	r3
 800d5b6:	2800      	cmp	r0, #0
 800d5b8:	d0d0      	beq.n	800d55c <_scanf_chars+0x30>
 800d5ba:	6823      	ldr	r3, [r4, #0]
 800d5bc:	f013 0310 	ands.w	r3, r3, #16
 800d5c0:	d105      	bne.n	800d5ce <_scanf_chars+0xa2>
 800d5c2:	68e2      	ldr	r2, [r4, #12]
 800d5c4:	3201      	adds	r2, #1
 800d5c6:	60e2      	str	r2, [r4, #12]
 800d5c8:	69a2      	ldr	r2, [r4, #24]
 800d5ca:	b102      	cbz	r2, 800d5ce <_scanf_chars+0xa2>
 800d5cc:	7033      	strb	r3, [r6, #0]
 800d5ce:	6923      	ldr	r3, [r4, #16]
 800d5d0:	443b      	add	r3, r7
 800d5d2:	6123      	str	r3, [r4, #16]
 800d5d4:	2000      	movs	r0, #0
 800d5d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5da:	bf00      	nop
 800d5dc:	0800f169 	.word	0x0800f169

0800d5e0 <_scanf_i>:
 800d5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5e4:	4698      	mov	r8, r3
 800d5e6:	4b74      	ldr	r3, [pc, #464]	@ (800d7b8 <_scanf_i+0x1d8>)
 800d5e8:	460c      	mov	r4, r1
 800d5ea:	4682      	mov	sl, r0
 800d5ec:	4616      	mov	r6, r2
 800d5ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d5f2:	b087      	sub	sp, #28
 800d5f4:	ab03      	add	r3, sp, #12
 800d5f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d5fa:	4b70      	ldr	r3, [pc, #448]	@ (800d7bc <_scanf_i+0x1dc>)
 800d5fc:	69a1      	ldr	r1, [r4, #24]
 800d5fe:	4a70      	ldr	r2, [pc, #448]	@ (800d7c0 <_scanf_i+0x1e0>)
 800d600:	2903      	cmp	r1, #3
 800d602:	bf08      	it	eq
 800d604:	461a      	moveq	r2, r3
 800d606:	68a3      	ldr	r3, [r4, #8]
 800d608:	9201      	str	r2, [sp, #4]
 800d60a:	1e5a      	subs	r2, r3, #1
 800d60c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d610:	bf88      	it	hi
 800d612:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d616:	4627      	mov	r7, r4
 800d618:	bf82      	ittt	hi
 800d61a:	eb03 0905 	addhi.w	r9, r3, r5
 800d61e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d622:	60a3      	strhi	r3, [r4, #8]
 800d624:	f857 3b1c 	ldr.w	r3, [r7], #28
 800d628:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800d62c:	bf98      	it	ls
 800d62e:	f04f 0900 	movls.w	r9, #0
 800d632:	6023      	str	r3, [r4, #0]
 800d634:	463d      	mov	r5, r7
 800d636:	f04f 0b00 	mov.w	fp, #0
 800d63a:	6831      	ldr	r1, [r6, #0]
 800d63c:	ab03      	add	r3, sp, #12
 800d63e:	7809      	ldrb	r1, [r1, #0]
 800d640:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800d644:	2202      	movs	r2, #2
 800d646:	f7f2 fdc3 	bl	80001d0 <memchr>
 800d64a:	b328      	cbz	r0, 800d698 <_scanf_i+0xb8>
 800d64c:	f1bb 0f01 	cmp.w	fp, #1
 800d650:	d159      	bne.n	800d706 <_scanf_i+0x126>
 800d652:	6862      	ldr	r2, [r4, #4]
 800d654:	b92a      	cbnz	r2, 800d662 <_scanf_i+0x82>
 800d656:	6822      	ldr	r2, [r4, #0]
 800d658:	2108      	movs	r1, #8
 800d65a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d65e:	6061      	str	r1, [r4, #4]
 800d660:	6022      	str	r2, [r4, #0]
 800d662:	6822      	ldr	r2, [r4, #0]
 800d664:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800d668:	6022      	str	r2, [r4, #0]
 800d66a:	68a2      	ldr	r2, [r4, #8]
 800d66c:	1e51      	subs	r1, r2, #1
 800d66e:	60a1      	str	r1, [r4, #8]
 800d670:	b192      	cbz	r2, 800d698 <_scanf_i+0xb8>
 800d672:	6832      	ldr	r2, [r6, #0]
 800d674:	1c51      	adds	r1, r2, #1
 800d676:	6031      	str	r1, [r6, #0]
 800d678:	7812      	ldrb	r2, [r2, #0]
 800d67a:	f805 2b01 	strb.w	r2, [r5], #1
 800d67e:	6872      	ldr	r2, [r6, #4]
 800d680:	3a01      	subs	r2, #1
 800d682:	2a00      	cmp	r2, #0
 800d684:	6072      	str	r2, [r6, #4]
 800d686:	dc07      	bgt.n	800d698 <_scanf_i+0xb8>
 800d688:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800d68c:	4631      	mov	r1, r6
 800d68e:	4650      	mov	r0, sl
 800d690:	4790      	blx	r2
 800d692:	2800      	cmp	r0, #0
 800d694:	f040 8085 	bne.w	800d7a2 <_scanf_i+0x1c2>
 800d698:	f10b 0b01 	add.w	fp, fp, #1
 800d69c:	f1bb 0f03 	cmp.w	fp, #3
 800d6a0:	d1cb      	bne.n	800d63a <_scanf_i+0x5a>
 800d6a2:	6863      	ldr	r3, [r4, #4]
 800d6a4:	b90b      	cbnz	r3, 800d6aa <_scanf_i+0xca>
 800d6a6:	230a      	movs	r3, #10
 800d6a8:	6063      	str	r3, [r4, #4]
 800d6aa:	6863      	ldr	r3, [r4, #4]
 800d6ac:	4945      	ldr	r1, [pc, #276]	@ (800d7c4 <_scanf_i+0x1e4>)
 800d6ae:	6960      	ldr	r0, [r4, #20]
 800d6b0:	1ac9      	subs	r1, r1, r3
 800d6b2:	f000 f935 	bl	800d920 <__sccl>
 800d6b6:	f04f 0b00 	mov.w	fp, #0
 800d6ba:	68a3      	ldr	r3, [r4, #8]
 800d6bc:	6822      	ldr	r2, [r4, #0]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d03d      	beq.n	800d73e <_scanf_i+0x15e>
 800d6c2:	6831      	ldr	r1, [r6, #0]
 800d6c4:	6960      	ldr	r0, [r4, #20]
 800d6c6:	f891 c000 	ldrb.w	ip, [r1]
 800d6ca:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d6ce:	2800      	cmp	r0, #0
 800d6d0:	d035      	beq.n	800d73e <_scanf_i+0x15e>
 800d6d2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800d6d6:	d124      	bne.n	800d722 <_scanf_i+0x142>
 800d6d8:	0510      	lsls	r0, r2, #20
 800d6da:	d522      	bpl.n	800d722 <_scanf_i+0x142>
 800d6dc:	f10b 0b01 	add.w	fp, fp, #1
 800d6e0:	f1b9 0f00 	cmp.w	r9, #0
 800d6e4:	d003      	beq.n	800d6ee <_scanf_i+0x10e>
 800d6e6:	3301      	adds	r3, #1
 800d6e8:	f109 39ff 	add.w	r9, r9, #4294967295
 800d6ec:	60a3      	str	r3, [r4, #8]
 800d6ee:	6873      	ldr	r3, [r6, #4]
 800d6f0:	3b01      	subs	r3, #1
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	6073      	str	r3, [r6, #4]
 800d6f6:	dd1b      	ble.n	800d730 <_scanf_i+0x150>
 800d6f8:	6833      	ldr	r3, [r6, #0]
 800d6fa:	3301      	adds	r3, #1
 800d6fc:	6033      	str	r3, [r6, #0]
 800d6fe:	68a3      	ldr	r3, [r4, #8]
 800d700:	3b01      	subs	r3, #1
 800d702:	60a3      	str	r3, [r4, #8]
 800d704:	e7d9      	b.n	800d6ba <_scanf_i+0xda>
 800d706:	f1bb 0f02 	cmp.w	fp, #2
 800d70a:	d1ae      	bne.n	800d66a <_scanf_i+0x8a>
 800d70c:	6822      	ldr	r2, [r4, #0]
 800d70e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800d712:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800d716:	d1bf      	bne.n	800d698 <_scanf_i+0xb8>
 800d718:	2110      	movs	r1, #16
 800d71a:	6061      	str	r1, [r4, #4]
 800d71c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d720:	e7a2      	b.n	800d668 <_scanf_i+0x88>
 800d722:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800d726:	6022      	str	r2, [r4, #0]
 800d728:	780b      	ldrb	r3, [r1, #0]
 800d72a:	f805 3b01 	strb.w	r3, [r5], #1
 800d72e:	e7de      	b.n	800d6ee <_scanf_i+0x10e>
 800d730:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d734:	4631      	mov	r1, r6
 800d736:	4650      	mov	r0, sl
 800d738:	4798      	blx	r3
 800d73a:	2800      	cmp	r0, #0
 800d73c:	d0df      	beq.n	800d6fe <_scanf_i+0x11e>
 800d73e:	6823      	ldr	r3, [r4, #0]
 800d740:	05d9      	lsls	r1, r3, #23
 800d742:	d50d      	bpl.n	800d760 <_scanf_i+0x180>
 800d744:	42bd      	cmp	r5, r7
 800d746:	d909      	bls.n	800d75c <_scanf_i+0x17c>
 800d748:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d74c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d750:	4632      	mov	r2, r6
 800d752:	4650      	mov	r0, sl
 800d754:	4798      	blx	r3
 800d756:	f105 39ff 	add.w	r9, r5, #4294967295
 800d75a:	464d      	mov	r5, r9
 800d75c:	42bd      	cmp	r5, r7
 800d75e:	d028      	beq.n	800d7b2 <_scanf_i+0x1d2>
 800d760:	6822      	ldr	r2, [r4, #0]
 800d762:	f012 0210 	ands.w	r2, r2, #16
 800d766:	d113      	bne.n	800d790 <_scanf_i+0x1b0>
 800d768:	702a      	strb	r2, [r5, #0]
 800d76a:	6863      	ldr	r3, [r4, #4]
 800d76c:	9e01      	ldr	r6, [sp, #4]
 800d76e:	4639      	mov	r1, r7
 800d770:	4650      	mov	r0, sl
 800d772:	47b0      	blx	r6
 800d774:	f8d8 3000 	ldr.w	r3, [r8]
 800d778:	6821      	ldr	r1, [r4, #0]
 800d77a:	1d1a      	adds	r2, r3, #4
 800d77c:	f8c8 2000 	str.w	r2, [r8]
 800d780:	f011 0f20 	tst.w	r1, #32
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	d00f      	beq.n	800d7a8 <_scanf_i+0x1c8>
 800d788:	6018      	str	r0, [r3, #0]
 800d78a:	68e3      	ldr	r3, [r4, #12]
 800d78c:	3301      	adds	r3, #1
 800d78e:	60e3      	str	r3, [r4, #12]
 800d790:	6923      	ldr	r3, [r4, #16]
 800d792:	1bed      	subs	r5, r5, r7
 800d794:	445d      	add	r5, fp
 800d796:	442b      	add	r3, r5
 800d798:	6123      	str	r3, [r4, #16]
 800d79a:	2000      	movs	r0, #0
 800d79c:	b007      	add	sp, #28
 800d79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7a2:	f04f 0b00 	mov.w	fp, #0
 800d7a6:	e7ca      	b.n	800d73e <_scanf_i+0x15e>
 800d7a8:	07ca      	lsls	r2, r1, #31
 800d7aa:	bf4c      	ite	mi
 800d7ac:	8018      	strhmi	r0, [r3, #0]
 800d7ae:	6018      	strpl	r0, [r3, #0]
 800d7b0:	e7eb      	b.n	800d78a <_scanf_i+0x1aa>
 800d7b2:	2001      	movs	r0, #1
 800d7b4:	e7f2      	b.n	800d79c <_scanf_i+0x1bc>
 800d7b6:	bf00      	nop
 800d7b8:	0800eec4 	.word	0x0800eec4
 800d7bc:	0800cee1 	.word	0x0800cee1
 800d7c0:	0800e2bd 	.word	0x0800e2bd
 800d7c4:	0800f28a 	.word	0x0800f28a

0800d7c8 <__sflush_r>:
 800d7c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7d0:	0716      	lsls	r6, r2, #28
 800d7d2:	4605      	mov	r5, r0
 800d7d4:	460c      	mov	r4, r1
 800d7d6:	d454      	bmi.n	800d882 <__sflush_r+0xba>
 800d7d8:	684b      	ldr	r3, [r1, #4]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	dc02      	bgt.n	800d7e4 <__sflush_r+0x1c>
 800d7de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	dd48      	ble.n	800d876 <__sflush_r+0xae>
 800d7e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d7e6:	2e00      	cmp	r6, #0
 800d7e8:	d045      	beq.n	800d876 <__sflush_r+0xae>
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d7f0:	682f      	ldr	r7, [r5, #0]
 800d7f2:	6a21      	ldr	r1, [r4, #32]
 800d7f4:	602b      	str	r3, [r5, #0]
 800d7f6:	d030      	beq.n	800d85a <__sflush_r+0x92>
 800d7f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d7fa:	89a3      	ldrh	r3, [r4, #12]
 800d7fc:	0759      	lsls	r1, r3, #29
 800d7fe:	d505      	bpl.n	800d80c <__sflush_r+0x44>
 800d800:	6863      	ldr	r3, [r4, #4]
 800d802:	1ad2      	subs	r2, r2, r3
 800d804:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d806:	b10b      	cbz	r3, 800d80c <__sflush_r+0x44>
 800d808:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d80a:	1ad2      	subs	r2, r2, r3
 800d80c:	2300      	movs	r3, #0
 800d80e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d810:	6a21      	ldr	r1, [r4, #32]
 800d812:	4628      	mov	r0, r5
 800d814:	47b0      	blx	r6
 800d816:	1c43      	adds	r3, r0, #1
 800d818:	89a3      	ldrh	r3, [r4, #12]
 800d81a:	d106      	bne.n	800d82a <__sflush_r+0x62>
 800d81c:	6829      	ldr	r1, [r5, #0]
 800d81e:	291d      	cmp	r1, #29
 800d820:	d82b      	bhi.n	800d87a <__sflush_r+0xb2>
 800d822:	4a2a      	ldr	r2, [pc, #168]	@ (800d8cc <__sflush_r+0x104>)
 800d824:	410a      	asrs	r2, r1
 800d826:	07d6      	lsls	r6, r2, #31
 800d828:	d427      	bmi.n	800d87a <__sflush_r+0xb2>
 800d82a:	2200      	movs	r2, #0
 800d82c:	6062      	str	r2, [r4, #4]
 800d82e:	04d9      	lsls	r1, r3, #19
 800d830:	6922      	ldr	r2, [r4, #16]
 800d832:	6022      	str	r2, [r4, #0]
 800d834:	d504      	bpl.n	800d840 <__sflush_r+0x78>
 800d836:	1c42      	adds	r2, r0, #1
 800d838:	d101      	bne.n	800d83e <__sflush_r+0x76>
 800d83a:	682b      	ldr	r3, [r5, #0]
 800d83c:	b903      	cbnz	r3, 800d840 <__sflush_r+0x78>
 800d83e:	6560      	str	r0, [r4, #84]	@ 0x54
 800d840:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d842:	602f      	str	r7, [r5, #0]
 800d844:	b1b9      	cbz	r1, 800d876 <__sflush_r+0xae>
 800d846:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d84a:	4299      	cmp	r1, r3
 800d84c:	d002      	beq.n	800d854 <__sflush_r+0x8c>
 800d84e:	4628      	mov	r0, r5
 800d850:	f7fd ff12 	bl	800b678 <_free_r>
 800d854:	2300      	movs	r3, #0
 800d856:	6363      	str	r3, [r4, #52]	@ 0x34
 800d858:	e00d      	b.n	800d876 <__sflush_r+0xae>
 800d85a:	2301      	movs	r3, #1
 800d85c:	4628      	mov	r0, r5
 800d85e:	47b0      	blx	r6
 800d860:	4602      	mov	r2, r0
 800d862:	1c50      	adds	r0, r2, #1
 800d864:	d1c9      	bne.n	800d7fa <__sflush_r+0x32>
 800d866:	682b      	ldr	r3, [r5, #0]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d0c6      	beq.n	800d7fa <__sflush_r+0x32>
 800d86c:	2b1d      	cmp	r3, #29
 800d86e:	d001      	beq.n	800d874 <__sflush_r+0xac>
 800d870:	2b16      	cmp	r3, #22
 800d872:	d11e      	bne.n	800d8b2 <__sflush_r+0xea>
 800d874:	602f      	str	r7, [r5, #0]
 800d876:	2000      	movs	r0, #0
 800d878:	e022      	b.n	800d8c0 <__sflush_r+0xf8>
 800d87a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d87e:	b21b      	sxth	r3, r3
 800d880:	e01b      	b.n	800d8ba <__sflush_r+0xf2>
 800d882:	690f      	ldr	r7, [r1, #16]
 800d884:	2f00      	cmp	r7, #0
 800d886:	d0f6      	beq.n	800d876 <__sflush_r+0xae>
 800d888:	0793      	lsls	r3, r2, #30
 800d88a:	680e      	ldr	r6, [r1, #0]
 800d88c:	bf08      	it	eq
 800d88e:	694b      	ldreq	r3, [r1, #20]
 800d890:	600f      	str	r7, [r1, #0]
 800d892:	bf18      	it	ne
 800d894:	2300      	movne	r3, #0
 800d896:	eba6 0807 	sub.w	r8, r6, r7
 800d89a:	608b      	str	r3, [r1, #8]
 800d89c:	f1b8 0f00 	cmp.w	r8, #0
 800d8a0:	dde9      	ble.n	800d876 <__sflush_r+0xae>
 800d8a2:	6a21      	ldr	r1, [r4, #32]
 800d8a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d8a6:	4643      	mov	r3, r8
 800d8a8:	463a      	mov	r2, r7
 800d8aa:	4628      	mov	r0, r5
 800d8ac:	47b0      	blx	r6
 800d8ae:	2800      	cmp	r0, #0
 800d8b0:	dc08      	bgt.n	800d8c4 <__sflush_r+0xfc>
 800d8b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d8ba:	81a3      	strh	r3, [r4, #12]
 800d8bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8c4:	4407      	add	r7, r0
 800d8c6:	eba8 0800 	sub.w	r8, r8, r0
 800d8ca:	e7e7      	b.n	800d89c <__sflush_r+0xd4>
 800d8cc:	dfbffffe 	.word	0xdfbffffe

0800d8d0 <_fflush_r>:
 800d8d0:	b538      	push	{r3, r4, r5, lr}
 800d8d2:	690b      	ldr	r3, [r1, #16]
 800d8d4:	4605      	mov	r5, r0
 800d8d6:	460c      	mov	r4, r1
 800d8d8:	b913      	cbnz	r3, 800d8e0 <_fflush_r+0x10>
 800d8da:	2500      	movs	r5, #0
 800d8dc:	4628      	mov	r0, r5
 800d8de:	bd38      	pop	{r3, r4, r5, pc}
 800d8e0:	b118      	cbz	r0, 800d8ea <_fflush_r+0x1a>
 800d8e2:	6a03      	ldr	r3, [r0, #32]
 800d8e4:	b90b      	cbnz	r3, 800d8ea <_fflush_r+0x1a>
 800d8e6:	f7fc ff15 	bl	800a714 <__sinit>
 800d8ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d0f3      	beq.n	800d8da <_fflush_r+0xa>
 800d8f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d8f4:	07d0      	lsls	r0, r2, #31
 800d8f6:	d404      	bmi.n	800d902 <_fflush_r+0x32>
 800d8f8:	0599      	lsls	r1, r3, #22
 800d8fa:	d402      	bmi.n	800d902 <_fflush_r+0x32>
 800d8fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d8fe:	f7fd f85e 	bl	800a9be <__retarget_lock_acquire_recursive>
 800d902:	4628      	mov	r0, r5
 800d904:	4621      	mov	r1, r4
 800d906:	f7ff ff5f 	bl	800d7c8 <__sflush_r>
 800d90a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d90c:	07da      	lsls	r2, r3, #31
 800d90e:	4605      	mov	r5, r0
 800d910:	d4e4      	bmi.n	800d8dc <_fflush_r+0xc>
 800d912:	89a3      	ldrh	r3, [r4, #12]
 800d914:	059b      	lsls	r3, r3, #22
 800d916:	d4e1      	bmi.n	800d8dc <_fflush_r+0xc>
 800d918:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d91a:	f7fd f851 	bl	800a9c0 <__retarget_lock_release_recursive>
 800d91e:	e7dd      	b.n	800d8dc <_fflush_r+0xc>

0800d920 <__sccl>:
 800d920:	b570      	push	{r4, r5, r6, lr}
 800d922:	780b      	ldrb	r3, [r1, #0]
 800d924:	4604      	mov	r4, r0
 800d926:	2b5e      	cmp	r3, #94	@ 0x5e
 800d928:	bf0b      	itete	eq
 800d92a:	784b      	ldrbeq	r3, [r1, #1]
 800d92c:	1c4a      	addne	r2, r1, #1
 800d92e:	1c8a      	addeq	r2, r1, #2
 800d930:	2100      	movne	r1, #0
 800d932:	bf08      	it	eq
 800d934:	2101      	moveq	r1, #1
 800d936:	3801      	subs	r0, #1
 800d938:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800d93c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800d940:	42a8      	cmp	r0, r5
 800d942:	d1fb      	bne.n	800d93c <__sccl+0x1c>
 800d944:	b90b      	cbnz	r3, 800d94a <__sccl+0x2a>
 800d946:	1e50      	subs	r0, r2, #1
 800d948:	bd70      	pop	{r4, r5, r6, pc}
 800d94a:	f081 0101 	eor.w	r1, r1, #1
 800d94e:	54e1      	strb	r1, [r4, r3]
 800d950:	4610      	mov	r0, r2
 800d952:	4602      	mov	r2, r0
 800d954:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d958:	2d2d      	cmp	r5, #45	@ 0x2d
 800d95a:	d005      	beq.n	800d968 <__sccl+0x48>
 800d95c:	2d5d      	cmp	r5, #93	@ 0x5d
 800d95e:	d016      	beq.n	800d98e <__sccl+0x6e>
 800d960:	2d00      	cmp	r5, #0
 800d962:	d0f1      	beq.n	800d948 <__sccl+0x28>
 800d964:	462b      	mov	r3, r5
 800d966:	e7f2      	b.n	800d94e <__sccl+0x2e>
 800d968:	7846      	ldrb	r6, [r0, #1]
 800d96a:	2e5d      	cmp	r6, #93	@ 0x5d
 800d96c:	d0fa      	beq.n	800d964 <__sccl+0x44>
 800d96e:	42b3      	cmp	r3, r6
 800d970:	dcf8      	bgt.n	800d964 <__sccl+0x44>
 800d972:	3002      	adds	r0, #2
 800d974:	461a      	mov	r2, r3
 800d976:	3201      	adds	r2, #1
 800d978:	4296      	cmp	r6, r2
 800d97a:	54a1      	strb	r1, [r4, r2]
 800d97c:	dcfb      	bgt.n	800d976 <__sccl+0x56>
 800d97e:	1af2      	subs	r2, r6, r3
 800d980:	3a01      	subs	r2, #1
 800d982:	1c5d      	adds	r5, r3, #1
 800d984:	42b3      	cmp	r3, r6
 800d986:	bfa8      	it	ge
 800d988:	2200      	movge	r2, #0
 800d98a:	18ab      	adds	r3, r5, r2
 800d98c:	e7e1      	b.n	800d952 <__sccl+0x32>
 800d98e:	4610      	mov	r0, r2
 800d990:	e7da      	b.n	800d948 <__sccl+0x28>

0800d992 <__submore>:
 800d992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d996:	460c      	mov	r4, r1
 800d998:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800d99a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d99e:	4299      	cmp	r1, r3
 800d9a0:	d11d      	bne.n	800d9de <__submore+0x4c>
 800d9a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d9a6:	f7fd fedb 	bl	800b760 <_malloc_r>
 800d9aa:	b918      	cbnz	r0, 800d9b4 <__submore+0x22>
 800d9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d9b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d9b8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800d9ba:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800d9be:	6360      	str	r0, [r4, #52]	@ 0x34
 800d9c0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800d9c4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800d9c8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800d9cc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d9d0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800d9d4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800d9d8:	6020      	str	r0, [r4, #0]
 800d9da:	2000      	movs	r0, #0
 800d9dc:	e7e8      	b.n	800d9b0 <__submore+0x1e>
 800d9de:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800d9e0:	0077      	lsls	r7, r6, #1
 800d9e2:	463a      	mov	r2, r7
 800d9e4:	f000 fbcd 	bl	800e182 <_realloc_r>
 800d9e8:	4605      	mov	r5, r0
 800d9ea:	2800      	cmp	r0, #0
 800d9ec:	d0de      	beq.n	800d9ac <__submore+0x1a>
 800d9ee:	eb00 0806 	add.w	r8, r0, r6
 800d9f2:	4601      	mov	r1, r0
 800d9f4:	4632      	mov	r2, r6
 800d9f6:	4640      	mov	r0, r8
 800d9f8:	f000 f830 	bl	800da5c <memcpy>
 800d9fc:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800da00:	f8c4 8000 	str.w	r8, [r4]
 800da04:	e7e9      	b.n	800d9da <__submore+0x48>

0800da06 <memmove>:
 800da06:	4288      	cmp	r0, r1
 800da08:	b510      	push	{r4, lr}
 800da0a:	eb01 0402 	add.w	r4, r1, r2
 800da0e:	d902      	bls.n	800da16 <memmove+0x10>
 800da10:	4284      	cmp	r4, r0
 800da12:	4623      	mov	r3, r4
 800da14:	d807      	bhi.n	800da26 <memmove+0x20>
 800da16:	1e43      	subs	r3, r0, #1
 800da18:	42a1      	cmp	r1, r4
 800da1a:	d008      	beq.n	800da2e <memmove+0x28>
 800da1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800da20:	f803 2f01 	strb.w	r2, [r3, #1]!
 800da24:	e7f8      	b.n	800da18 <memmove+0x12>
 800da26:	4402      	add	r2, r0
 800da28:	4601      	mov	r1, r0
 800da2a:	428a      	cmp	r2, r1
 800da2c:	d100      	bne.n	800da30 <memmove+0x2a>
 800da2e:	bd10      	pop	{r4, pc}
 800da30:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800da34:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800da38:	e7f7      	b.n	800da2a <memmove+0x24>
	...

0800da3c <_sbrk_r>:
 800da3c:	b538      	push	{r3, r4, r5, lr}
 800da3e:	4d06      	ldr	r5, [pc, #24]	@ (800da58 <_sbrk_r+0x1c>)
 800da40:	2300      	movs	r3, #0
 800da42:	4604      	mov	r4, r0
 800da44:	4608      	mov	r0, r1
 800da46:	602b      	str	r3, [r5, #0]
 800da48:	f7f4 fd2e 	bl	80024a8 <_sbrk>
 800da4c:	1c43      	adds	r3, r0, #1
 800da4e:	d102      	bne.n	800da56 <_sbrk_r+0x1a>
 800da50:	682b      	ldr	r3, [r5, #0]
 800da52:	b103      	cbz	r3, 800da56 <_sbrk_r+0x1a>
 800da54:	6023      	str	r3, [r4, #0]
 800da56:	bd38      	pop	{r3, r4, r5, pc}
 800da58:	20000f40 	.word	0x20000f40

0800da5c <memcpy>:
 800da5c:	440a      	add	r2, r1
 800da5e:	4291      	cmp	r1, r2
 800da60:	f100 33ff 	add.w	r3, r0, #4294967295
 800da64:	d100      	bne.n	800da68 <memcpy+0xc>
 800da66:	4770      	bx	lr
 800da68:	b510      	push	{r4, lr}
 800da6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da72:	4291      	cmp	r1, r2
 800da74:	d1f9      	bne.n	800da6a <memcpy+0xe>
 800da76:	bd10      	pop	{r4, pc}

0800da78 <nan>:
 800da78:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800da80 <nan+0x8>
 800da7c:	4770      	bx	lr
 800da7e:	bf00      	nop
 800da80:	00000000 	.word	0x00000000
 800da84:	7ff80000 	.word	0x7ff80000

0800da88 <__assert_func>:
 800da88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800da8a:	4614      	mov	r4, r2
 800da8c:	461a      	mov	r2, r3
 800da8e:	4b09      	ldr	r3, [pc, #36]	@ (800dab4 <__assert_func+0x2c>)
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	4605      	mov	r5, r0
 800da94:	68d8      	ldr	r0, [r3, #12]
 800da96:	b954      	cbnz	r4, 800daae <__assert_func+0x26>
 800da98:	4b07      	ldr	r3, [pc, #28]	@ (800dab8 <__assert_func+0x30>)
 800da9a:	461c      	mov	r4, r3
 800da9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800daa0:	9100      	str	r1, [sp, #0]
 800daa2:	462b      	mov	r3, r5
 800daa4:	4905      	ldr	r1, [pc, #20]	@ (800dabc <__assert_func+0x34>)
 800daa6:	f000 fc19 	bl	800e2dc <fiprintf>
 800daaa:	f000 fc29 	bl	800e300 <abort>
 800daae:	4b04      	ldr	r3, [pc, #16]	@ (800dac0 <__assert_func+0x38>)
 800dab0:	e7f4      	b.n	800da9c <__assert_func+0x14>
 800dab2:	bf00      	nop
 800dab4:	2000004c 	.word	0x2000004c
 800dab8:	0800f2d8 	.word	0x0800f2d8
 800dabc:	0800f2aa 	.word	0x0800f2aa
 800dac0:	0800f29d 	.word	0x0800f29d

0800dac4 <_calloc_r>:
 800dac4:	b570      	push	{r4, r5, r6, lr}
 800dac6:	fba1 5402 	umull	r5, r4, r1, r2
 800daca:	b93c      	cbnz	r4, 800dadc <_calloc_r+0x18>
 800dacc:	4629      	mov	r1, r5
 800dace:	f7fd fe47 	bl	800b760 <_malloc_r>
 800dad2:	4606      	mov	r6, r0
 800dad4:	b928      	cbnz	r0, 800dae2 <_calloc_r+0x1e>
 800dad6:	2600      	movs	r6, #0
 800dad8:	4630      	mov	r0, r6
 800dada:	bd70      	pop	{r4, r5, r6, pc}
 800dadc:	220c      	movs	r2, #12
 800dade:	6002      	str	r2, [r0, #0]
 800dae0:	e7f9      	b.n	800dad6 <_calloc_r+0x12>
 800dae2:	462a      	mov	r2, r5
 800dae4:	4621      	mov	r1, r4
 800dae6:	f7fc feda 	bl	800a89e <memset>
 800daea:	e7f5      	b.n	800dad8 <_calloc_r+0x14>

0800daec <rshift>:
 800daec:	6903      	ldr	r3, [r0, #16]
 800daee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800daf2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800daf6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dafa:	f100 0414 	add.w	r4, r0, #20
 800dafe:	dd45      	ble.n	800db8c <rshift+0xa0>
 800db00:	f011 011f 	ands.w	r1, r1, #31
 800db04:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800db08:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800db0c:	d10c      	bne.n	800db28 <rshift+0x3c>
 800db0e:	f100 0710 	add.w	r7, r0, #16
 800db12:	4629      	mov	r1, r5
 800db14:	42b1      	cmp	r1, r6
 800db16:	d334      	bcc.n	800db82 <rshift+0x96>
 800db18:	1a9b      	subs	r3, r3, r2
 800db1a:	009b      	lsls	r3, r3, #2
 800db1c:	1eea      	subs	r2, r5, #3
 800db1e:	4296      	cmp	r6, r2
 800db20:	bf38      	it	cc
 800db22:	2300      	movcc	r3, #0
 800db24:	4423      	add	r3, r4
 800db26:	e015      	b.n	800db54 <rshift+0x68>
 800db28:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800db2c:	f1c1 0820 	rsb	r8, r1, #32
 800db30:	40cf      	lsrs	r7, r1
 800db32:	f105 0e04 	add.w	lr, r5, #4
 800db36:	46a1      	mov	r9, r4
 800db38:	4576      	cmp	r6, lr
 800db3a:	46f4      	mov	ip, lr
 800db3c:	d815      	bhi.n	800db6a <rshift+0x7e>
 800db3e:	1a9a      	subs	r2, r3, r2
 800db40:	0092      	lsls	r2, r2, #2
 800db42:	3a04      	subs	r2, #4
 800db44:	3501      	adds	r5, #1
 800db46:	42ae      	cmp	r6, r5
 800db48:	bf38      	it	cc
 800db4a:	2200      	movcc	r2, #0
 800db4c:	18a3      	adds	r3, r4, r2
 800db4e:	50a7      	str	r7, [r4, r2]
 800db50:	b107      	cbz	r7, 800db54 <rshift+0x68>
 800db52:	3304      	adds	r3, #4
 800db54:	1b1a      	subs	r2, r3, r4
 800db56:	42a3      	cmp	r3, r4
 800db58:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800db5c:	bf08      	it	eq
 800db5e:	2300      	moveq	r3, #0
 800db60:	6102      	str	r2, [r0, #16]
 800db62:	bf08      	it	eq
 800db64:	6143      	streq	r3, [r0, #20]
 800db66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db6a:	f8dc c000 	ldr.w	ip, [ip]
 800db6e:	fa0c fc08 	lsl.w	ip, ip, r8
 800db72:	ea4c 0707 	orr.w	r7, ip, r7
 800db76:	f849 7b04 	str.w	r7, [r9], #4
 800db7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800db7e:	40cf      	lsrs	r7, r1
 800db80:	e7da      	b.n	800db38 <rshift+0x4c>
 800db82:	f851 cb04 	ldr.w	ip, [r1], #4
 800db86:	f847 cf04 	str.w	ip, [r7, #4]!
 800db8a:	e7c3      	b.n	800db14 <rshift+0x28>
 800db8c:	4623      	mov	r3, r4
 800db8e:	e7e1      	b.n	800db54 <rshift+0x68>

0800db90 <__hexdig_fun>:
 800db90:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800db94:	2b09      	cmp	r3, #9
 800db96:	d802      	bhi.n	800db9e <__hexdig_fun+0xe>
 800db98:	3820      	subs	r0, #32
 800db9a:	b2c0      	uxtb	r0, r0
 800db9c:	4770      	bx	lr
 800db9e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800dba2:	2b05      	cmp	r3, #5
 800dba4:	d801      	bhi.n	800dbaa <__hexdig_fun+0x1a>
 800dba6:	3847      	subs	r0, #71	@ 0x47
 800dba8:	e7f7      	b.n	800db9a <__hexdig_fun+0xa>
 800dbaa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800dbae:	2b05      	cmp	r3, #5
 800dbb0:	d801      	bhi.n	800dbb6 <__hexdig_fun+0x26>
 800dbb2:	3827      	subs	r0, #39	@ 0x27
 800dbb4:	e7f1      	b.n	800db9a <__hexdig_fun+0xa>
 800dbb6:	2000      	movs	r0, #0
 800dbb8:	4770      	bx	lr
	...

0800dbbc <__gethex>:
 800dbbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbc0:	b085      	sub	sp, #20
 800dbc2:	468a      	mov	sl, r1
 800dbc4:	9302      	str	r3, [sp, #8]
 800dbc6:	680b      	ldr	r3, [r1, #0]
 800dbc8:	9001      	str	r0, [sp, #4]
 800dbca:	4690      	mov	r8, r2
 800dbcc:	1c9c      	adds	r4, r3, #2
 800dbce:	46a1      	mov	r9, r4
 800dbd0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800dbd4:	2830      	cmp	r0, #48	@ 0x30
 800dbd6:	d0fa      	beq.n	800dbce <__gethex+0x12>
 800dbd8:	eba9 0303 	sub.w	r3, r9, r3
 800dbdc:	f1a3 0b02 	sub.w	fp, r3, #2
 800dbe0:	f7ff ffd6 	bl	800db90 <__hexdig_fun>
 800dbe4:	4605      	mov	r5, r0
 800dbe6:	2800      	cmp	r0, #0
 800dbe8:	d168      	bne.n	800dcbc <__gethex+0x100>
 800dbea:	49a0      	ldr	r1, [pc, #640]	@ (800de6c <__gethex+0x2b0>)
 800dbec:	2201      	movs	r2, #1
 800dbee:	4648      	mov	r0, r9
 800dbf0:	f7fc fe5d 	bl	800a8ae <strncmp>
 800dbf4:	4607      	mov	r7, r0
 800dbf6:	2800      	cmp	r0, #0
 800dbf8:	d167      	bne.n	800dcca <__gethex+0x10e>
 800dbfa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800dbfe:	4626      	mov	r6, r4
 800dc00:	f7ff ffc6 	bl	800db90 <__hexdig_fun>
 800dc04:	2800      	cmp	r0, #0
 800dc06:	d062      	beq.n	800dcce <__gethex+0x112>
 800dc08:	4623      	mov	r3, r4
 800dc0a:	7818      	ldrb	r0, [r3, #0]
 800dc0c:	2830      	cmp	r0, #48	@ 0x30
 800dc0e:	4699      	mov	r9, r3
 800dc10:	f103 0301 	add.w	r3, r3, #1
 800dc14:	d0f9      	beq.n	800dc0a <__gethex+0x4e>
 800dc16:	f7ff ffbb 	bl	800db90 <__hexdig_fun>
 800dc1a:	fab0 f580 	clz	r5, r0
 800dc1e:	096d      	lsrs	r5, r5, #5
 800dc20:	f04f 0b01 	mov.w	fp, #1
 800dc24:	464a      	mov	r2, r9
 800dc26:	4616      	mov	r6, r2
 800dc28:	3201      	adds	r2, #1
 800dc2a:	7830      	ldrb	r0, [r6, #0]
 800dc2c:	f7ff ffb0 	bl	800db90 <__hexdig_fun>
 800dc30:	2800      	cmp	r0, #0
 800dc32:	d1f8      	bne.n	800dc26 <__gethex+0x6a>
 800dc34:	498d      	ldr	r1, [pc, #564]	@ (800de6c <__gethex+0x2b0>)
 800dc36:	2201      	movs	r2, #1
 800dc38:	4630      	mov	r0, r6
 800dc3a:	f7fc fe38 	bl	800a8ae <strncmp>
 800dc3e:	2800      	cmp	r0, #0
 800dc40:	d13f      	bne.n	800dcc2 <__gethex+0x106>
 800dc42:	b944      	cbnz	r4, 800dc56 <__gethex+0x9a>
 800dc44:	1c74      	adds	r4, r6, #1
 800dc46:	4622      	mov	r2, r4
 800dc48:	4616      	mov	r6, r2
 800dc4a:	3201      	adds	r2, #1
 800dc4c:	7830      	ldrb	r0, [r6, #0]
 800dc4e:	f7ff ff9f 	bl	800db90 <__hexdig_fun>
 800dc52:	2800      	cmp	r0, #0
 800dc54:	d1f8      	bne.n	800dc48 <__gethex+0x8c>
 800dc56:	1ba4      	subs	r4, r4, r6
 800dc58:	00a7      	lsls	r7, r4, #2
 800dc5a:	7833      	ldrb	r3, [r6, #0]
 800dc5c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800dc60:	2b50      	cmp	r3, #80	@ 0x50
 800dc62:	d13e      	bne.n	800dce2 <__gethex+0x126>
 800dc64:	7873      	ldrb	r3, [r6, #1]
 800dc66:	2b2b      	cmp	r3, #43	@ 0x2b
 800dc68:	d033      	beq.n	800dcd2 <__gethex+0x116>
 800dc6a:	2b2d      	cmp	r3, #45	@ 0x2d
 800dc6c:	d034      	beq.n	800dcd8 <__gethex+0x11c>
 800dc6e:	1c71      	adds	r1, r6, #1
 800dc70:	2400      	movs	r4, #0
 800dc72:	7808      	ldrb	r0, [r1, #0]
 800dc74:	f7ff ff8c 	bl	800db90 <__hexdig_fun>
 800dc78:	1e43      	subs	r3, r0, #1
 800dc7a:	b2db      	uxtb	r3, r3
 800dc7c:	2b18      	cmp	r3, #24
 800dc7e:	d830      	bhi.n	800dce2 <__gethex+0x126>
 800dc80:	f1a0 0210 	sub.w	r2, r0, #16
 800dc84:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dc88:	f7ff ff82 	bl	800db90 <__hexdig_fun>
 800dc8c:	f100 3cff 	add.w	ip, r0, #4294967295
 800dc90:	fa5f fc8c 	uxtb.w	ip, ip
 800dc94:	f1bc 0f18 	cmp.w	ip, #24
 800dc98:	f04f 030a 	mov.w	r3, #10
 800dc9c:	d91e      	bls.n	800dcdc <__gethex+0x120>
 800dc9e:	b104      	cbz	r4, 800dca2 <__gethex+0xe6>
 800dca0:	4252      	negs	r2, r2
 800dca2:	4417      	add	r7, r2
 800dca4:	f8ca 1000 	str.w	r1, [sl]
 800dca8:	b1ed      	cbz	r5, 800dce6 <__gethex+0x12a>
 800dcaa:	f1bb 0f00 	cmp.w	fp, #0
 800dcae:	bf0c      	ite	eq
 800dcb0:	2506      	moveq	r5, #6
 800dcb2:	2500      	movne	r5, #0
 800dcb4:	4628      	mov	r0, r5
 800dcb6:	b005      	add	sp, #20
 800dcb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcbc:	2500      	movs	r5, #0
 800dcbe:	462c      	mov	r4, r5
 800dcc0:	e7b0      	b.n	800dc24 <__gethex+0x68>
 800dcc2:	2c00      	cmp	r4, #0
 800dcc4:	d1c7      	bne.n	800dc56 <__gethex+0x9a>
 800dcc6:	4627      	mov	r7, r4
 800dcc8:	e7c7      	b.n	800dc5a <__gethex+0x9e>
 800dcca:	464e      	mov	r6, r9
 800dccc:	462f      	mov	r7, r5
 800dcce:	2501      	movs	r5, #1
 800dcd0:	e7c3      	b.n	800dc5a <__gethex+0x9e>
 800dcd2:	2400      	movs	r4, #0
 800dcd4:	1cb1      	adds	r1, r6, #2
 800dcd6:	e7cc      	b.n	800dc72 <__gethex+0xb6>
 800dcd8:	2401      	movs	r4, #1
 800dcda:	e7fb      	b.n	800dcd4 <__gethex+0x118>
 800dcdc:	fb03 0002 	mla	r0, r3, r2, r0
 800dce0:	e7ce      	b.n	800dc80 <__gethex+0xc4>
 800dce2:	4631      	mov	r1, r6
 800dce4:	e7de      	b.n	800dca4 <__gethex+0xe8>
 800dce6:	eba6 0309 	sub.w	r3, r6, r9
 800dcea:	3b01      	subs	r3, #1
 800dcec:	4629      	mov	r1, r5
 800dcee:	2b07      	cmp	r3, #7
 800dcf0:	dc0a      	bgt.n	800dd08 <__gethex+0x14c>
 800dcf2:	9801      	ldr	r0, [sp, #4]
 800dcf4:	f7fd fdc0 	bl	800b878 <_Balloc>
 800dcf8:	4604      	mov	r4, r0
 800dcfa:	b940      	cbnz	r0, 800dd0e <__gethex+0x152>
 800dcfc:	4b5c      	ldr	r3, [pc, #368]	@ (800de70 <__gethex+0x2b4>)
 800dcfe:	4602      	mov	r2, r0
 800dd00:	21e4      	movs	r1, #228	@ 0xe4
 800dd02:	485c      	ldr	r0, [pc, #368]	@ (800de74 <__gethex+0x2b8>)
 800dd04:	f7ff fec0 	bl	800da88 <__assert_func>
 800dd08:	3101      	adds	r1, #1
 800dd0a:	105b      	asrs	r3, r3, #1
 800dd0c:	e7ef      	b.n	800dcee <__gethex+0x132>
 800dd0e:	f100 0a14 	add.w	sl, r0, #20
 800dd12:	2300      	movs	r3, #0
 800dd14:	4655      	mov	r5, sl
 800dd16:	469b      	mov	fp, r3
 800dd18:	45b1      	cmp	r9, r6
 800dd1a:	d337      	bcc.n	800dd8c <__gethex+0x1d0>
 800dd1c:	f845 bb04 	str.w	fp, [r5], #4
 800dd20:	eba5 050a 	sub.w	r5, r5, sl
 800dd24:	10ad      	asrs	r5, r5, #2
 800dd26:	6125      	str	r5, [r4, #16]
 800dd28:	4658      	mov	r0, fp
 800dd2a:	f7fd fe97 	bl	800ba5c <__hi0bits>
 800dd2e:	016d      	lsls	r5, r5, #5
 800dd30:	f8d8 6000 	ldr.w	r6, [r8]
 800dd34:	1a2d      	subs	r5, r5, r0
 800dd36:	42b5      	cmp	r5, r6
 800dd38:	dd54      	ble.n	800dde4 <__gethex+0x228>
 800dd3a:	1bad      	subs	r5, r5, r6
 800dd3c:	4629      	mov	r1, r5
 800dd3e:	4620      	mov	r0, r4
 800dd40:	f7fe fa2b 	bl	800c19a <__any_on>
 800dd44:	4681      	mov	r9, r0
 800dd46:	b178      	cbz	r0, 800dd68 <__gethex+0x1ac>
 800dd48:	1e6b      	subs	r3, r5, #1
 800dd4a:	1159      	asrs	r1, r3, #5
 800dd4c:	f003 021f 	and.w	r2, r3, #31
 800dd50:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800dd54:	f04f 0901 	mov.w	r9, #1
 800dd58:	fa09 f202 	lsl.w	r2, r9, r2
 800dd5c:	420a      	tst	r2, r1
 800dd5e:	d003      	beq.n	800dd68 <__gethex+0x1ac>
 800dd60:	454b      	cmp	r3, r9
 800dd62:	dc36      	bgt.n	800ddd2 <__gethex+0x216>
 800dd64:	f04f 0902 	mov.w	r9, #2
 800dd68:	4629      	mov	r1, r5
 800dd6a:	4620      	mov	r0, r4
 800dd6c:	f7ff febe 	bl	800daec <rshift>
 800dd70:	442f      	add	r7, r5
 800dd72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dd76:	42bb      	cmp	r3, r7
 800dd78:	da42      	bge.n	800de00 <__gethex+0x244>
 800dd7a:	9801      	ldr	r0, [sp, #4]
 800dd7c:	4621      	mov	r1, r4
 800dd7e:	f7fd fdbb 	bl	800b8f8 <_Bfree>
 800dd82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dd84:	2300      	movs	r3, #0
 800dd86:	6013      	str	r3, [r2, #0]
 800dd88:	25a3      	movs	r5, #163	@ 0xa3
 800dd8a:	e793      	b.n	800dcb4 <__gethex+0xf8>
 800dd8c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800dd90:	2a2e      	cmp	r2, #46	@ 0x2e
 800dd92:	d012      	beq.n	800ddba <__gethex+0x1fe>
 800dd94:	2b20      	cmp	r3, #32
 800dd96:	d104      	bne.n	800dda2 <__gethex+0x1e6>
 800dd98:	f845 bb04 	str.w	fp, [r5], #4
 800dd9c:	f04f 0b00 	mov.w	fp, #0
 800dda0:	465b      	mov	r3, fp
 800dda2:	7830      	ldrb	r0, [r6, #0]
 800dda4:	9303      	str	r3, [sp, #12]
 800dda6:	f7ff fef3 	bl	800db90 <__hexdig_fun>
 800ddaa:	9b03      	ldr	r3, [sp, #12]
 800ddac:	f000 000f 	and.w	r0, r0, #15
 800ddb0:	4098      	lsls	r0, r3
 800ddb2:	ea4b 0b00 	orr.w	fp, fp, r0
 800ddb6:	3304      	adds	r3, #4
 800ddb8:	e7ae      	b.n	800dd18 <__gethex+0x15c>
 800ddba:	45b1      	cmp	r9, r6
 800ddbc:	d8ea      	bhi.n	800dd94 <__gethex+0x1d8>
 800ddbe:	492b      	ldr	r1, [pc, #172]	@ (800de6c <__gethex+0x2b0>)
 800ddc0:	9303      	str	r3, [sp, #12]
 800ddc2:	2201      	movs	r2, #1
 800ddc4:	4630      	mov	r0, r6
 800ddc6:	f7fc fd72 	bl	800a8ae <strncmp>
 800ddca:	9b03      	ldr	r3, [sp, #12]
 800ddcc:	2800      	cmp	r0, #0
 800ddce:	d1e1      	bne.n	800dd94 <__gethex+0x1d8>
 800ddd0:	e7a2      	b.n	800dd18 <__gethex+0x15c>
 800ddd2:	1ea9      	subs	r1, r5, #2
 800ddd4:	4620      	mov	r0, r4
 800ddd6:	f7fe f9e0 	bl	800c19a <__any_on>
 800ddda:	2800      	cmp	r0, #0
 800dddc:	d0c2      	beq.n	800dd64 <__gethex+0x1a8>
 800ddde:	f04f 0903 	mov.w	r9, #3
 800dde2:	e7c1      	b.n	800dd68 <__gethex+0x1ac>
 800dde4:	da09      	bge.n	800ddfa <__gethex+0x23e>
 800dde6:	1b75      	subs	r5, r6, r5
 800dde8:	4621      	mov	r1, r4
 800ddea:	9801      	ldr	r0, [sp, #4]
 800ddec:	462a      	mov	r2, r5
 800ddee:	f7fd ff9b 	bl	800bd28 <__lshift>
 800ddf2:	1b7f      	subs	r7, r7, r5
 800ddf4:	4604      	mov	r4, r0
 800ddf6:	f100 0a14 	add.w	sl, r0, #20
 800ddfa:	f04f 0900 	mov.w	r9, #0
 800ddfe:	e7b8      	b.n	800dd72 <__gethex+0x1b6>
 800de00:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800de04:	42bd      	cmp	r5, r7
 800de06:	dd6f      	ble.n	800dee8 <__gethex+0x32c>
 800de08:	1bed      	subs	r5, r5, r7
 800de0a:	42ae      	cmp	r6, r5
 800de0c:	dc34      	bgt.n	800de78 <__gethex+0x2bc>
 800de0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800de12:	2b02      	cmp	r3, #2
 800de14:	d022      	beq.n	800de5c <__gethex+0x2a0>
 800de16:	2b03      	cmp	r3, #3
 800de18:	d024      	beq.n	800de64 <__gethex+0x2a8>
 800de1a:	2b01      	cmp	r3, #1
 800de1c:	d115      	bne.n	800de4a <__gethex+0x28e>
 800de1e:	42ae      	cmp	r6, r5
 800de20:	d113      	bne.n	800de4a <__gethex+0x28e>
 800de22:	2e01      	cmp	r6, #1
 800de24:	d10b      	bne.n	800de3e <__gethex+0x282>
 800de26:	9a02      	ldr	r2, [sp, #8]
 800de28:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800de2c:	6013      	str	r3, [r2, #0]
 800de2e:	2301      	movs	r3, #1
 800de30:	6123      	str	r3, [r4, #16]
 800de32:	f8ca 3000 	str.w	r3, [sl]
 800de36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de38:	2562      	movs	r5, #98	@ 0x62
 800de3a:	601c      	str	r4, [r3, #0]
 800de3c:	e73a      	b.n	800dcb4 <__gethex+0xf8>
 800de3e:	1e71      	subs	r1, r6, #1
 800de40:	4620      	mov	r0, r4
 800de42:	f7fe f9aa 	bl	800c19a <__any_on>
 800de46:	2800      	cmp	r0, #0
 800de48:	d1ed      	bne.n	800de26 <__gethex+0x26a>
 800de4a:	9801      	ldr	r0, [sp, #4]
 800de4c:	4621      	mov	r1, r4
 800de4e:	f7fd fd53 	bl	800b8f8 <_Bfree>
 800de52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800de54:	2300      	movs	r3, #0
 800de56:	6013      	str	r3, [r2, #0]
 800de58:	2550      	movs	r5, #80	@ 0x50
 800de5a:	e72b      	b.n	800dcb4 <__gethex+0xf8>
 800de5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d1f3      	bne.n	800de4a <__gethex+0x28e>
 800de62:	e7e0      	b.n	800de26 <__gethex+0x26a>
 800de64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800de66:	2b00      	cmp	r3, #0
 800de68:	d1dd      	bne.n	800de26 <__gethex+0x26a>
 800de6a:	e7ee      	b.n	800de4a <__gethex+0x28e>
 800de6c:	0800f110 	.word	0x0800f110
 800de70:	0800efa3 	.word	0x0800efa3
 800de74:	0800f2d9 	.word	0x0800f2d9
 800de78:	1e6f      	subs	r7, r5, #1
 800de7a:	f1b9 0f00 	cmp.w	r9, #0
 800de7e:	d130      	bne.n	800dee2 <__gethex+0x326>
 800de80:	b127      	cbz	r7, 800de8c <__gethex+0x2d0>
 800de82:	4639      	mov	r1, r7
 800de84:	4620      	mov	r0, r4
 800de86:	f7fe f988 	bl	800c19a <__any_on>
 800de8a:	4681      	mov	r9, r0
 800de8c:	117a      	asrs	r2, r7, #5
 800de8e:	2301      	movs	r3, #1
 800de90:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800de94:	f007 071f 	and.w	r7, r7, #31
 800de98:	40bb      	lsls	r3, r7
 800de9a:	4213      	tst	r3, r2
 800de9c:	4629      	mov	r1, r5
 800de9e:	4620      	mov	r0, r4
 800dea0:	bf18      	it	ne
 800dea2:	f049 0902 	orrne.w	r9, r9, #2
 800dea6:	f7ff fe21 	bl	800daec <rshift>
 800deaa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800deae:	1b76      	subs	r6, r6, r5
 800deb0:	2502      	movs	r5, #2
 800deb2:	f1b9 0f00 	cmp.w	r9, #0
 800deb6:	d047      	beq.n	800df48 <__gethex+0x38c>
 800deb8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800debc:	2b02      	cmp	r3, #2
 800debe:	d015      	beq.n	800deec <__gethex+0x330>
 800dec0:	2b03      	cmp	r3, #3
 800dec2:	d017      	beq.n	800def4 <__gethex+0x338>
 800dec4:	2b01      	cmp	r3, #1
 800dec6:	d109      	bne.n	800dedc <__gethex+0x320>
 800dec8:	f019 0f02 	tst.w	r9, #2
 800decc:	d006      	beq.n	800dedc <__gethex+0x320>
 800dece:	f8da 3000 	ldr.w	r3, [sl]
 800ded2:	ea49 0903 	orr.w	r9, r9, r3
 800ded6:	f019 0f01 	tst.w	r9, #1
 800deda:	d10e      	bne.n	800defa <__gethex+0x33e>
 800dedc:	f045 0510 	orr.w	r5, r5, #16
 800dee0:	e032      	b.n	800df48 <__gethex+0x38c>
 800dee2:	f04f 0901 	mov.w	r9, #1
 800dee6:	e7d1      	b.n	800de8c <__gethex+0x2d0>
 800dee8:	2501      	movs	r5, #1
 800deea:	e7e2      	b.n	800deb2 <__gethex+0x2f6>
 800deec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800deee:	f1c3 0301 	rsb	r3, r3, #1
 800def2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800def4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800def6:	2b00      	cmp	r3, #0
 800def8:	d0f0      	beq.n	800dedc <__gethex+0x320>
 800defa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800defe:	f104 0314 	add.w	r3, r4, #20
 800df02:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800df06:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800df0a:	f04f 0c00 	mov.w	ip, #0
 800df0e:	4618      	mov	r0, r3
 800df10:	f853 2b04 	ldr.w	r2, [r3], #4
 800df14:	f1b2 3fff 	cmp.w	r2, #4294967295
 800df18:	d01b      	beq.n	800df52 <__gethex+0x396>
 800df1a:	3201      	adds	r2, #1
 800df1c:	6002      	str	r2, [r0, #0]
 800df1e:	2d02      	cmp	r5, #2
 800df20:	f104 0314 	add.w	r3, r4, #20
 800df24:	d13c      	bne.n	800dfa0 <__gethex+0x3e4>
 800df26:	f8d8 2000 	ldr.w	r2, [r8]
 800df2a:	3a01      	subs	r2, #1
 800df2c:	42b2      	cmp	r2, r6
 800df2e:	d109      	bne.n	800df44 <__gethex+0x388>
 800df30:	1171      	asrs	r1, r6, #5
 800df32:	2201      	movs	r2, #1
 800df34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800df38:	f006 061f 	and.w	r6, r6, #31
 800df3c:	fa02 f606 	lsl.w	r6, r2, r6
 800df40:	421e      	tst	r6, r3
 800df42:	d13a      	bne.n	800dfba <__gethex+0x3fe>
 800df44:	f045 0520 	orr.w	r5, r5, #32
 800df48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df4a:	601c      	str	r4, [r3, #0]
 800df4c:	9b02      	ldr	r3, [sp, #8]
 800df4e:	601f      	str	r7, [r3, #0]
 800df50:	e6b0      	b.n	800dcb4 <__gethex+0xf8>
 800df52:	4299      	cmp	r1, r3
 800df54:	f843 cc04 	str.w	ip, [r3, #-4]
 800df58:	d8d9      	bhi.n	800df0e <__gethex+0x352>
 800df5a:	68a3      	ldr	r3, [r4, #8]
 800df5c:	459b      	cmp	fp, r3
 800df5e:	db17      	blt.n	800df90 <__gethex+0x3d4>
 800df60:	6861      	ldr	r1, [r4, #4]
 800df62:	9801      	ldr	r0, [sp, #4]
 800df64:	3101      	adds	r1, #1
 800df66:	f7fd fc87 	bl	800b878 <_Balloc>
 800df6a:	4681      	mov	r9, r0
 800df6c:	b918      	cbnz	r0, 800df76 <__gethex+0x3ba>
 800df6e:	4b1a      	ldr	r3, [pc, #104]	@ (800dfd8 <__gethex+0x41c>)
 800df70:	4602      	mov	r2, r0
 800df72:	2184      	movs	r1, #132	@ 0x84
 800df74:	e6c5      	b.n	800dd02 <__gethex+0x146>
 800df76:	6922      	ldr	r2, [r4, #16]
 800df78:	3202      	adds	r2, #2
 800df7a:	f104 010c 	add.w	r1, r4, #12
 800df7e:	0092      	lsls	r2, r2, #2
 800df80:	300c      	adds	r0, #12
 800df82:	f7ff fd6b 	bl	800da5c <memcpy>
 800df86:	4621      	mov	r1, r4
 800df88:	9801      	ldr	r0, [sp, #4]
 800df8a:	f7fd fcb5 	bl	800b8f8 <_Bfree>
 800df8e:	464c      	mov	r4, r9
 800df90:	6923      	ldr	r3, [r4, #16]
 800df92:	1c5a      	adds	r2, r3, #1
 800df94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800df98:	6122      	str	r2, [r4, #16]
 800df9a:	2201      	movs	r2, #1
 800df9c:	615a      	str	r2, [r3, #20]
 800df9e:	e7be      	b.n	800df1e <__gethex+0x362>
 800dfa0:	6922      	ldr	r2, [r4, #16]
 800dfa2:	455a      	cmp	r2, fp
 800dfa4:	dd0b      	ble.n	800dfbe <__gethex+0x402>
 800dfa6:	2101      	movs	r1, #1
 800dfa8:	4620      	mov	r0, r4
 800dfaa:	f7ff fd9f 	bl	800daec <rshift>
 800dfae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dfb2:	3701      	adds	r7, #1
 800dfb4:	42bb      	cmp	r3, r7
 800dfb6:	f6ff aee0 	blt.w	800dd7a <__gethex+0x1be>
 800dfba:	2501      	movs	r5, #1
 800dfbc:	e7c2      	b.n	800df44 <__gethex+0x388>
 800dfbe:	f016 061f 	ands.w	r6, r6, #31
 800dfc2:	d0fa      	beq.n	800dfba <__gethex+0x3fe>
 800dfc4:	4453      	add	r3, sl
 800dfc6:	f1c6 0620 	rsb	r6, r6, #32
 800dfca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800dfce:	f7fd fd45 	bl	800ba5c <__hi0bits>
 800dfd2:	42b0      	cmp	r0, r6
 800dfd4:	dbe7      	blt.n	800dfa6 <__gethex+0x3ea>
 800dfd6:	e7f0      	b.n	800dfba <__gethex+0x3fe>
 800dfd8:	0800efa3 	.word	0x0800efa3

0800dfdc <L_shift>:
 800dfdc:	f1c2 0208 	rsb	r2, r2, #8
 800dfe0:	0092      	lsls	r2, r2, #2
 800dfe2:	b570      	push	{r4, r5, r6, lr}
 800dfe4:	f1c2 0620 	rsb	r6, r2, #32
 800dfe8:	6843      	ldr	r3, [r0, #4]
 800dfea:	6804      	ldr	r4, [r0, #0]
 800dfec:	fa03 f506 	lsl.w	r5, r3, r6
 800dff0:	432c      	orrs	r4, r5
 800dff2:	40d3      	lsrs	r3, r2
 800dff4:	6004      	str	r4, [r0, #0]
 800dff6:	f840 3f04 	str.w	r3, [r0, #4]!
 800dffa:	4288      	cmp	r0, r1
 800dffc:	d3f4      	bcc.n	800dfe8 <L_shift+0xc>
 800dffe:	bd70      	pop	{r4, r5, r6, pc}

0800e000 <__match>:
 800e000:	b530      	push	{r4, r5, lr}
 800e002:	6803      	ldr	r3, [r0, #0]
 800e004:	3301      	adds	r3, #1
 800e006:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e00a:	b914      	cbnz	r4, 800e012 <__match+0x12>
 800e00c:	6003      	str	r3, [r0, #0]
 800e00e:	2001      	movs	r0, #1
 800e010:	bd30      	pop	{r4, r5, pc}
 800e012:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e016:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e01a:	2d19      	cmp	r5, #25
 800e01c:	bf98      	it	ls
 800e01e:	3220      	addls	r2, #32
 800e020:	42a2      	cmp	r2, r4
 800e022:	d0f0      	beq.n	800e006 <__match+0x6>
 800e024:	2000      	movs	r0, #0
 800e026:	e7f3      	b.n	800e010 <__match+0x10>

0800e028 <__hexnan>:
 800e028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e02c:	680b      	ldr	r3, [r1, #0]
 800e02e:	6801      	ldr	r1, [r0, #0]
 800e030:	115e      	asrs	r6, r3, #5
 800e032:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e036:	f013 031f 	ands.w	r3, r3, #31
 800e03a:	b087      	sub	sp, #28
 800e03c:	bf18      	it	ne
 800e03e:	3604      	addne	r6, #4
 800e040:	2500      	movs	r5, #0
 800e042:	1f37      	subs	r7, r6, #4
 800e044:	4682      	mov	sl, r0
 800e046:	4690      	mov	r8, r2
 800e048:	9301      	str	r3, [sp, #4]
 800e04a:	f846 5c04 	str.w	r5, [r6, #-4]
 800e04e:	46b9      	mov	r9, r7
 800e050:	463c      	mov	r4, r7
 800e052:	9502      	str	r5, [sp, #8]
 800e054:	46ab      	mov	fp, r5
 800e056:	784a      	ldrb	r2, [r1, #1]
 800e058:	1c4b      	adds	r3, r1, #1
 800e05a:	9303      	str	r3, [sp, #12]
 800e05c:	b342      	cbz	r2, 800e0b0 <__hexnan+0x88>
 800e05e:	4610      	mov	r0, r2
 800e060:	9105      	str	r1, [sp, #20]
 800e062:	9204      	str	r2, [sp, #16]
 800e064:	f7ff fd94 	bl	800db90 <__hexdig_fun>
 800e068:	2800      	cmp	r0, #0
 800e06a:	d151      	bne.n	800e110 <__hexnan+0xe8>
 800e06c:	9a04      	ldr	r2, [sp, #16]
 800e06e:	9905      	ldr	r1, [sp, #20]
 800e070:	2a20      	cmp	r2, #32
 800e072:	d818      	bhi.n	800e0a6 <__hexnan+0x7e>
 800e074:	9b02      	ldr	r3, [sp, #8]
 800e076:	459b      	cmp	fp, r3
 800e078:	dd13      	ble.n	800e0a2 <__hexnan+0x7a>
 800e07a:	454c      	cmp	r4, r9
 800e07c:	d206      	bcs.n	800e08c <__hexnan+0x64>
 800e07e:	2d07      	cmp	r5, #7
 800e080:	dc04      	bgt.n	800e08c <__hexnan+0x64>
 800e082:	462a      	mov	r2, r5
 800e084:	4649      	mov	r1, r9
 800e086:	4620      	mov	r0, r4
 800e088:	f7ff ffa8 	bl	800dfdc <L_shift>
 800e08c:	4544      	cmp	r4, r8
 800e08e:	d952      	bls.n	800e136 <__hexnan+0x10e>
 800e090:	2300      	movs	r3, #0
 800e092:	f1a4 0904 	sub.w	r9, r4, #4
 800e096:	f844 3c04 	str.w	r3, [r4, #-4]
 800e09a:	f8cd b008 	str.w	fp, [sp, #8]
 800e09e:	464c      	mov	r4, r9
 800e0a0:	461d      	mov	r5, r3
 800e0a2:	9903      	ldr	r1, [sp, #12]
 800e0a4:	e7d7      	b.n	800e056 <__hexnan+0x2e>
 800e0a6:	2a29      	cmp	r2, #41	@ 0x29
 800e0a8:	d157      	bne.n	800e15a <__hexnan+0x132>
 800e0aa:	3102      	adds	r1, #2
 800e0ac:	f8ca 1000 	str.w	r1, [sl]
 800e0b0:	f1bb 0f00 	cmp.w	fp, #0
 800e0b4:	d051      	beq.n	800e15a <__hexnan+0x132>
 800e0b6:	454c      	cmp	r4, r9
 800e0b8:	d206      	bcs.n	800e0c8 <__hexnan+0xa0>
 800e0ba:	2d07      	cmp	r5, #7
 800e0bc:	dc04      	bgt.n	800e0c8 <__hexnan+0xa0>
 800e0be:	462a      	mov	r2, r5
 800e0c0:	4649      	mov	r1, r9
 800e0c2:	4620      	mov	r0, r4
 800e0c4:	f7ff ff8a 	bl	800dfdc <L_shift>
 800e0c8:	4544      	cmp	r4, r8
 800e0ca:	d936      	bls.n	800e13a <__hexnan+0x112>
 800e0cc:	f1a8 0204 	sub.w	r2, r8, #4
 800e0d0:	4623      	mov	r3, r4
 800e0d2:	f853 1b04 	ldr.w	r1, [r3], #4
 800e0d6:	f842 1f04 	str.w	r1, [r2, #4]!
 800e0da:	429f      	cmp	r7, r3
 800e0dc:	d2f9      	bcs.n	800e0d2 <__hexnan+0xaa>
 800e0de:	1b3b      	subs	r3, r7, r4
 800e0e0:	f023 0303 	bic.w	r3, r3, #3
 800e0e4:	3304      	adds	r3, #4
 800e0e6:	3401      	adds	r4, #1
 800e0e8:	3e03      	subs	r6, #3
 800e0ea:	42b4      	cmp	r4, r6
 800e0ec:	bf88      	it	hi
 800e0ee:	2304      	movhi	r3, #4
 800e0f0:	4443      	add	r3, r8
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	f843 2b04 	str.w	r2, [r3], #4
 800e0f8:	429f      	cmp	r7, r3
 800e0fa:	d2fb      	bcs.n	800e0f4 <__hexnan+0xcc>
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	b91b      	cbnz	r3, 800e108 <__hexnan+0xe0>
 800e100:	4547      	cmp	r7, r8
 800e102:	d128      	bne.n	800e156 <__hexnan+0x12e>
 800e104:	2301      	movs	r3, #1
 800e106:	603b      	str	r3, [r7, #0]
 800e108:	2005      	movs	r0, #5
 800e10a:	b007      	add	sp, #28
 800e10c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e110:	3501      	adds	r5, #1
 800e112:	2d08      	cmp	r5, #8
 800e114:	f10b 0b01 	add.w	fp, fp, #1
 800e118:	dd06      	ble.n	800e128 <__hexnan+0x100>
 800e11a:	4544      	cmp	r4, r8
 800e11c:	d9c1      	bls.n	800e0a2 <__hexnan+0x7a>
 800e11e:	2300      	movs	r3, #0
 800e120:	f844 3c04 	str.w	r3, [r4, #-4]
 800e124:	2501      	movs	r5, #1
 800e126:	3c04      	subs	r4, #4
 800e128:	6822      	ldr	r2, [r4, #0]
 800e12a:	f000 000f 	and.w	r0, r0, #15
 800e12e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e132:	6020      	str	r0, [r4, #0]
 800e134:	e7b5      	b.n	800e0a2 <__hexnan+0x7a>
 800e136:	2508      	movs	r5, #8
 800e138:	e7b3      	b.n	800e0a2 <__hexnan+0x7a>
 800e13a:	9b01      	ldr	r3, [sp, #4]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d0dd      	beq.n	800e0fc <__hexnan+0xd4>
 800e140:	f1c3 0320 	rsb	r3, r3, #32
 800e144:	f04f 32ff 	mov.w	r2, #4294967295
 800e148:	40da      	lsrs	r2, r3
 800e14a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e14e:	4013      	ands	r3, r2
 800e150:	f846 3c04 	str.w	r3, [r6, #-4]
 800e154:	e7d2      	b.n	800e0fc <__hexnan+0xd4>
 800e156:	3f04      	subs	r7, #4
 800e158:	e7d0      	b.n	800e0fc <__hexnan+0xd4>
 800e15a:	2004      	movs	r0, #4
 800e15c:	e7d5      	b.n	800e10a <__hexnan+0xe2>

0800e15e <__ascii_mbtowc>:
 800e15e:	b082      	sub	sp, #8
 800e160:	b901      	cbnz	r1, 800e164 <__ascii_mbtowc+0x6>
 800e162:	a901      	add	r1, sp, #4
 800e164:	b142      	cbz	r2, 800e178 <__ascii_mbtowc+0x1a>
 800e166:	b14b      	cbz	r3, 800e17c <__ascii_mbtowc+0x1e>
 800e168:	7813      	ldrb	r3, [r2, #0]
 800e16a:	600b      	str	r3, [r1, #0]
 800e16c:	7812      	ldrb	r2, [r2, #0]
 800e16e:	1e10      	subs	r0, r2, #0
 800e170:	bf18      	it	ne
 800e172:	2001      	movne	r0, #1
 800e174:	b002      	add	sp, #8
 800e176:	4770      	bx	lr
 800e178:	4610      	mov	r0, r2
 800e17a:	e7fb      	b.n	800e174 <__ascii_mbtowc+0x16>
 800e17c:	f06f 0001 	mvn.w	r0, #1
 800e180:	e7f8      	b.n	800e174 <__ascii_mbtowc+0x16>

0800e182 <_realloc_r>:
 800e182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e186:	4680      	mov	r8, r0
 800e188:	4615      	mov	r5, r2
 800e18a:	460c      	mov	r4, r1
 800e18c:	b921      	cbnz	r1, 800e198 <_realloc_r+0x16>
 800e18e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e192:	4611      	mov	r1, r2
 800e194:	f7fd bae4 	b.w	800b760 <_malloc_r>
 800e198:	b92a      	cbnz	r2, 800e1a6 <_realloc_r+0x24>
 800e19a:	f7fd fa6d 	bl	800b678 <_free_r>
 800e19e:	2400      	movs	r4, #0
 800e1a0:	4620      	mov	r0, r4
 800e1a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1a6:	f000 f8b2 	bl	800e30e <_malloc_usable_size_r>
 800e1aa:	4285      	cmp	r5, r0
 800e1ac:	4606      	mov	r6, r0
 800e1ae:	d802      	bhi.n	800e1b6 <_realloc_r+0x34>
 800e1b0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e1b4:	d8f4      	bhi.n	800e1a0 <_realloc_r+0x1e>
 800e1b6:	4629      	mov	r1, r5
 800e1b8:	4640      	mov	r0, r8
 800e1ba:	f7fd fad1 	bl	800b760 <_malloc_r>
 800e1be:	4607      	mov	r7, r0
 800e1c0:	2800      	cmp	r0, #0
 800e1c2:	d0ec      	beq.n	800e19e <_realloc_r+0x1c>
 800e1c4:	42b5      	cmp	r5, r6
 800e1c6:	462a      	mov	r2, r5
 800e1c8:	4621      	mov	r1, r4
 800e1ca:	bf28      	it	cs
 800e1cc:	4632      	movcs	r2, r6
 800e1ce:	f7ff fc45 	bl	800da5c <memcpy>
 800e1d2:	4621      	mov	r1, r4
 800e1d4:	4640      	mov	r0, r8
 800e1d6:	f7fd fa4f 	bl	800b678 <_free_r>
 800e1da:	463c      	mov	r4, r7
 800e1dc:	e7e0      	b.n	800e1a0 <_realloc_r+0x1e>
	...

0800e1e0 <_strtoul_l.constprop.0>:
 800e1e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e1e4:	4e34      	ldr	r6, [pc, #208]	@ (800e2b8 <_strtoul_l.constprop.0+0xd8>)
 800e1e6:	4686      	mov	lr, r0
 800e1e8:	460d      	mov	r5, r1
 800e1ea:	4628      	mov	r0, r5
 800e1ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e1f0:	5d37      	ldrb	r7, [r6, r4]
 800e1f2:	f017 0708 	ands.w	r7, r7, #8
 800e1f6:	d1f8      	bne.n	800e1ea <_strtoul_l.constprop.0+0xa>
 800e1f8:	2c2d      	cmp	r4, #45	@ 0x2d
 800e1fa:	d12f      	bne.n	800e25c <_strtoul_l.constprop.0+0x7c>
 800e1fc:	782c      	ldrb	r4, [r5, #0]
 800e1fe:	2701      	movs	r7, #1
 800e200:	1c85      	adds	r5, r0, #2
 800e202:	f033 0010 	bics.w	r0, r3, #16
 800e206:	d109      	bne.n	800e21c <_strtoul_l.constprop.0+0x3c>
 800e208:	2c30      	cmp	r4, #48	@ 0x30
 800e20a:	d12c      	bne.n	800e266 <_strtoul_l.constprop.0+0x86>
 800e20c:	7828      	ldrb	r0, [r5, #0]
 800e20e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800e212:	2858      	cmp	r0, #88	@ 0x58
 800e214:	d127      	bne.n	800e266 <_strtoul_l.constprop.0+0x86>
 800e216:	786c      	ldrb	r4, [r5, #1]
 800e218:	2310      	movs	r3, #16
 800e21a:	3502      	adds	r5, #2
 800e21c:	f04f 38ff 	mov.w	r8, #4294967295
 800e220:	2600      	movs	r6, #0
 800e222:	fbb8 f8f3 	udiv	r8, r8, r3
 800e226:	fb03 f908 	mul.w	r9, r3, r8
 800e22a:	ea6f 0909 	mvn.w	r9, r9
 800e22e:	4630      	mov	r0, r6
 800e230:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800e234:	f1bc 0f09 	cmp.w	ip, #9
 800e238:	d81c      	bhi.n	800e274 <_strtoul_l.constprop.0+0x94>
 800e23a:	4664      	mov	r4, ip
 800e23c:	42a3      	cmp	r3, r4
 800e23e:	dd2a      	ble.n	800e296 <_strtoul_l.constprop.0+0xb6>
 800e240:	f1b6 3fff 	cmp.w	r6, #4294967295
 800e244:	d007      	beq.n	800e256 <_strtoul_l.constprop.0+0x76>
 800e246:	4580      	cmp	r8, r0
 800e248:	d322      	bcc.n	800e290 <_strtoul_l.constprop.0+0xb0>
 800e24a:	d101      	bne.n	800e250 <_strtoul_l.constprop.0+0x70>
 800e24c:	45a1      	cmp	r9, r4
 800e24e:	db1f      	blt.n	800e290 <_strtoul_l.constprop.0+0xb0>
 800e250:	fb00 4003 	mla	r0, r0, r3, r4
 800e254:	2601      	movs	r6, #1
 800e256:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e25a:	e7e9      	b.n	800e230 <_strtoul_l.constprop.0+0x50>
 800e25c:	2c2b      	cmp	r4, #43	@ 0x2b
 800e25e:	bf04      	itt	eq
 800e260:	782c      	ldrbeq	r4, [r5, #0]
 800e262:	1c85      	addeq	r5, r0, #2
 800e264:	e7cd      	b.n	800e202 <_strtoul_l.constprop.0+0x22>
 800e266:	2b00      	cmp	r3, #0
 800e268:	d1d8      	bne.n	800e21c <_strtoul_l.constprop.0+0x3c>
 800e26a:	2c30      	cmp	r4, #48	@ 0x30
 800e26c:	bf0c      	ite	eq
 800e26e:	2308      	moveq	r3, #8
 800e270:	230a      	movne	r3, #10
 800e272:	e7d3      	b.n	800e21c <_strtoul_l.constprop.0+0x3c>
 800e274:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800e278:	f1bc 0f19 	cmp.w	ip, #25
 800e27c:	d801      	bhi.n	800e282 <_strtoul_l.constprop.0+0xa2>
 800e27e:	3c37      	subs	r4, #55	@ 0x37
 800e280:	e7dc      	b.n	800e23c <_strtoul_l.constprop.0+0x5c>
 800e282:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800e286:	f1bc 0f19 	cmp.w	ip, #25
 800e28a:	d804      	bhi.n	800e296 <_strtoul_l.constprop.0+0xb6>
 800e28c:	3c57      	subs	r4, #87	@ 0x57
 800e28e:	e7d5      	b.n	800e23c <_strtoul_l.constprop.0+0x5c>
 800e290:	f04f 36ff 	mov.w	r6, #4294967295
 800e294:	e7df      	b.n	800e256 <_strtoul_l.constprop.0+0x76>
 800e296:	1c73      	adds	r3, r6, #1
 800e298:	d106      	bne.n	800e2a8 <_strtoul_l.constprop.0+0xc8>
 800e29a:	2322      	movs	r3, #34	@ 0x22
 800e29c:	f8ce 3000 	str.w	r3, [lr]
 800e2a0:	4630      	mov	r0, r6
 800e2a2:	b932      	cbnz	r2, 800e2b2 <_strtoul_l.constprop.0+0xd2>
 800e2a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e2a8:	b107      	cbz	r7, 800e2ac <_strtoul_l.constprop.0+0xcc>
 800e2aa:	4240      	negs	r0, r0
 800e2ac:	2a00      	cmp	r2, #0
 800e2ae:	d0f9      	beq.n	800e2a4 <_strtoul_l.constprop.0+0xc4>
 800e2b0:	b106      	cbz	r6, 800e2b4 <_strtoul_l.constprop.0+0xd4>
 800e2b2:	1e69      	subs	r1, r5, #1
 800e2b4:	6011      	str	r1, [r2, #0]
 800e2b6:	e7f5      	b.n	800e2a4 <_strtoul_l.constprop.0+0xc4>
 800e2b8:	0800f169 	.word	0x0800f169

0800e2bc <_strtoul_r>:
 800e2bc:	f7ff bf90 	b.w	800e1e0 <_strtoul_l.constprop.0>

0800e2c0 <__ascii_wctomb>:
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	4608      	mov	r0, r1
 800e2c4:	b141      	cbz	r1, 800e2d8 <__ascii_wctomb+0x18>
 800e2c6:	2aff      	cmp	r2, #255	@ 0xff
 800e2c8:	d904      	bls.n	800e2d4 <__ascii_wctomb+0x14>
 800e2ca:	228a      	movs	r2, #138	@ 0x8a
 800e2cc:	601a      	str	r2, [r3, #0]
 800e2ce:	f04f 30ff 	mov.w	r0, #4294967295
 800e2d2:	4770      	bx	lr
 800e2d4:	700a      	strb	r2, [r1, #0]
 800e2d6:	2001      	movs	r0, #1
 800e2d8:	4770      	bx	lr
	...

0800e2dc <fiprintf>:
 800e2dc:	b40e      	push	{r1, r2, r3}
 800e2de:	b503      	push	{r0, r1, lr}
 800e2e0:	4601      	mov	r1, r0
 800e2e2:	ab03      	add	r3, sp, #12
 800e2e4:	4805      	ldr	r0, [pc, #20]	@ (800e2fc <fiprintf+0x20>)
 800e2e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2ea:	6800      	ldr	r0, [r0, #0]
 800e2ec:	9301      	str	r3, [sp, #4]
 800e2ee:	f000 f83f 	bl	800e370 <_vfiprintf_r>
 800e2f2:	b002      	add	sp, #8
 800e2f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e2f8:	b003      	add	sp, #12
 800e2fa:	4770      	bx	lr
 800e2fc:	2000004c 	.word	0x2000004c

0800e300 <abort>:
 800e300:	b508      	push	{r3, lr}
 800e302:	2006      	movs	r0, #6
 800e304:	f000 fa08 	bl	800e718 <raise>
 800e308:	2001      	movs	r0, #1
 800e30a:	f7f4 f855 	bl	80023b8 <_exit>

0800e30e <_malloc_usable_size_r>:
 800e30e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e312:	1f18      	subs	r0, r3, #4
 800e314:	2b00      	cmp	r3, #0
 800e316:	bfbc      	itt	lt
 800e318:	580b      	ldrlt	r3, [r1, r0]
 800e31a:	18c0      	addlt	r0, r0, r3
 800e31c:	4770      	bx	lr

0800e31e <__sfputc_r>:
 800e31e:	6893      	ldr	r3, [r2, #8]
 800e320:	3b01      	subs	r3, #1
 800e322:	2b00      	cmp	r3, #0
 800e324:	b410      	push	{r4}
 800e326:	6093      	str	r3, [r2, #8]
 800e328:	da08      	bge.n	800e33c <__sfputc_r+0x1e>
 800e32a:	6994      	ldr	r4, [r2, #24]
 800e32c:	42a3      	cmp	r3, r4
 800e32e:	db01      	blt.n	800e334 <__sfputc_r+0x16>
 800e330:	290a      	cmp	r1, #10
 800e332:	d103      	bne.n	800e33c <__sfputc_r+0x1e>
 800e334:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e338:	f000 b932 	b.w	800e5a0 <__swbuf_r>
 800e33c:	6813      	ldr	r3, [r2, #0]
 800e33e:	1c58      	adds	r0, r3, #1
 800e340:	6010      	str	r0, [r2, #0]
 800e342:	7019      	strb	r1, [r3, #0]
 800e344:	4608      	mov	r0, r1
 800e346:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e34a:	4770      	bx	lr

0800e34c <__sfputs_r>:
 800e34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e34e:	4606      	mov	r6, r0
 800e350:	460f      	mov	r7, r1
 800e352:	4614      	mov	r4, r2
 800e354:	18d5      	adds	r5, r2, r3
 800e356:	42ac      	cmp	r4, r5
 800e358:	d101      	bne.n	800e35e <__sfputs_r+0x12>
 800e35a:	2000      	movs	r0, #0
 800e35c:	e007      	b.n	800e36e <__sfputs_r+0x22>
 800e35e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e362:	463a      	mov	r2, r7
 800e364:	4630      	mov	r0, r6
 800e366:	f7ff ffda 	bl	800e31e <__sfputc_r>
 800e36a:	1c43      	adds	r3, r0, #1
 800e36c:	d1f3      	bne.n	800e356 <__sfputs_r+0xa>
 800e36e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e370 <_vfiprintf_r>:
 800e370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e374:	460d      	mov	r5, r1
 800e376:	b09d      	sub	sp, #116	@ 0x74
 800e378:	4614      	mov	r4, r2
 800e37a:	4698      	mov	r8, r3
 800e37c:	4606      	mov	r6, r0
 800e37e:	b118      	cbz	r0, 800e388 <_vfiprintf_r+0x18>
 800e380:	6a03      	ldr	r3, [r0, #32]
 800e382:	b90b      	cbnz	r3, 800e388 <_vfiprintf_r+0x18>
 800e384:	f7fc f9c6 	bl	800a714 <__sinit>
 800e388:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e38a:	07d9      	lsls	r1, r3, #31
 800e38c:	d405      	bmi.n	800e39a <_vfiprintf_r+0x2a>
 800e38e:	89ab      	ldrh	r3, [r5, #12]
 800e390:	059a      	lsls	r2, r3, #22
 800e392:	d402      	bmi.n	800e39a <_vfiprintf_r+0x2a>
 800e394:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e396:	f7fc fb12 	bl	800a9be <__retarget_lock_acquire_recursive>
 800e39a:	89ab      	ldrh	r3, [r5, #12]
 800e39c:	071b      	lsls	r3, r3, #28
 800e39e:	d501      	bpl.n	800e3a4 <_vfiprintf_r+0x34>
 800e3a0:	692b      	ldr	r3, [r5, #16]
 800e3a2:	b99b      	cbnz	r3, 800e3cc <_vfiprintf_r+0x5c>
 800e3a4:	4629      	mov	r1, r5
 800e3a6:	4630      	mov	r0, r6
 800e3a8:	f000 f938 	bl	800e61c <__swsetup_r>
 800e3ac:	b170      	cbz	r0, 800e3cc <_vfiprintf_r+0x5c>
 800e3ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e3b0:	07dc      	lsls	r4, r3, #31
 800e3b2:	d504      	bpl.n	800e3be <_vfiprintf_r+0x4e>
 800e3b4:	f04f 30ff 	mov.w	r0, #4294967295
 800e3b8:	b01d      	add	sp, #116	@ 0x74
 800e3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3be:	89ab      	ldrh	r3, [r5, #12]
 800e3c0:	0598      	lsls	r0, r3, #22
 800e3c2:	d4f7      	bmi.n	800e3b4 <_vfiprintf_r+0x44>
 800e3c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e3c6:	f7fc fafb 	bl	800a9c0 <__retarget_lock_release_recursive>
 800e3ca:	e7f3      	b.n	800e3b4 <_vfiprintf_r+0x44>
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3d0:	2320      	movs	r3, #32
 800e3d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e3d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800e3da:	2330      	movs	r3, #48	@ 0x30
 800e3dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e58c <_vfiprintf_r+0x21c>
 800e3e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e3e4:	f04f 0901 	mov.w	r9, #1
 800e3e8:	4623      	mov	r3, r4
 800e3ea:	469a      	mov	sl, r3
 800e3ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3f0:	b10a      	cbz	r2, 800e3f6 <_vfiprintf_r+0x86>
 800e3f2:	2a25      	cmp	r2, #37	@ 0x25
 800e3f4:	d1f9      	bne.n	800e3ea <_vfiprintf_r+0x7a>
 800e3f6:	ebba 0b04 	subs.w	fp, sl, r4
 800e3fa:	d00b      	beq.n	800e414 <_vfiprintf_r+0xa4>
 800e3fc:	465b      	mov	r3, fp
 800e3fe:	4622      	mov	r2, r4
 800e400:	4629      	mov	r1, r5
 800e402:	4630      	mov	r0, r6
 800e404:	f7ff ffa2 	bl	800e34c <__sfputs_r>
 800e408:	3001      	adds	r0, #1
 800e40a:	f000 80a7 	beq.w	800e55c <_vfiprintf_r+0x1ec>
 800e40e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e410:	445a      	add	r2, fp
 800e412:	9209      	str	r2, [sp, #36]	@ 0x24
 800e414:	f89a 3000 	ldrb.w	r3, [sl]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	f000 809f 	beq.w	800e55c <_vfiprintf_r+0x1ec>
 800e41e:	2300      	movs	r3, #0
 800e420:	f04f 32ff 	mov.w	r2, #4294967295
 800e424:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e428:	f10a 0a01 	add.w	sl, sl, #1
 800e42c:	9304      	str	r3, [sp, #16]
 800e42e:	9307      	str	r3, [sp, #28]
 800e430:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e434:	931a      	str	r3, [sp, #104]	@ 0x68
 800e436:	4654      	mov	r4, sl
 800e438:	2205      	movs	r2, #5
 800e43a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e43e:	4853      	ldr	r0, [pc, #332]	@ (800e58c <_vfiprintf_r+0x21c>)
 800e440:	f7f1 fec6 	bl	80001d0 <memchr>
 800e444:	9a04      	ldr	r2, [sp, #16]
 800e446:	b9d8      	cbnz	r0, 800e480 <_vfiprintf_r+0x110>
 800e448:	06d1      	lsls	r1, r2, #27
 800e44a:	bf44      	itt	mi
 800e44c:	2320      	movmi	r3, #32
 800e44e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e452:	0713      	lsls	r3, r2, #28
 800e454:	bf44      	itt	mi
 800e456:	232b      	movmi	r3, #43	@ 0x2b
 800e458:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e45c:	f89a 3000 	ldrb.w	r3, [sl]
 800e460:	2b2a      	cmp	r3, #42	@ 0x2a
 800e462:	d015      	beq.n	800e490 <_vfiprintf_r+0x120>
 800e464:	9a07      	ldr	r2, [sp, #28]
 800e466:	4654      	mov	r4, sl
 800e468:	2000      	movs	r0, #0
 800e46a:	f04f 0c0a 	mov.w	ip, #10
 800e46e:	4621      	mov	r1, r4
 800e470:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e474:	3b30      	subs	r3, #48	@ 0x30
 800e476:	2b09      	cmp	r3, #9
 800e478:	d94b      	bls.n	800e512 <_vfiprintf_r+0x1a2>
 800e47a:	b1b0      	cbz	r0, 800e4aa <_vfiprintf_r+0x13a>
 800e47c:	9207      	str	r2, [sp, #28]
 800e47e:	e014      	b.n	800e4aa <_vfiprintf_r+0x13a>
 800e480:	eba0 0308 	sub.w	r3, r0, r8
 800e484:	fa09 f303 	lsl.w	r3, r9, r3
 800e488:	4313      	orrs	r3, r2
 800e48a:	9304      	str	r3, [sp, #16]
 800e48c:	46a2      	mov	sl, r4
 800e48e:	e7d2      	b.n	800e436 <_vfiprintf_r+0xc6>
 800e490:	9b03      	ldr	r3, [sp, #12]
 800e492:	1d19      	adds	r1, r3, #4
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	9103      	str	r1, [sp, #12]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	bfbb      	ittet	lt
 800e49c:	425b      	neglt	r3, r3
 800e49e:	f042 0202 	orrlt.w	r2, r2, #2
 800e4a2:	9307      	strge	r3, [sp, #28]
 800e4a4:	9307      	strlt	r3, [sp, #28]
 800e4a6:	bfb8      	it	lt
 800e4a8:	9204      	strlt	r2, [sp, #16]
 800e4aa:	7823      	ldrb	r3, [r4, #0]
 800e4ac:	2b2e      	cmp	r3, #46	@ 0x2e
 800e4ae:	d10a      	bne.n	800e4c6 <_vfiprintf_r+0x156>
 800e4b0:	7863      	ldrb	r3, [r4, #1]
 800e4b2:	2b2a      	cmp	r3, #42	@ 0x2a
 800e4b4:	d132      	bne.n	800e51c <_vfiprintf_r+0x1ac>
 800e4b6:	9b03      	ldr	r3, [sp, #12]
 800e4b8:	1d1a      	adds	r2, r3, #4
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	9203      	str	r2, [sp, #12]
 800e4be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e4c2:	3402      	adds	r4, #2
 800e4c4:	9305      	str	r3, [sp, #20]
 800e4c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e59c <_vfiprintf_r+0x22c>
 800e4ca:	7821      	ldrb	r1, [r4, #0]
 800e4cc:	2203      	movs	r2, #3
 800e4ce:	4650      	mov	r0, sl
 800e4d0:	f7f1 fe7e 	bl	80001d0 <memchr>
 800e4d4:	b138      	cbz	r0, 800e4e6 <_vfiprintf_r+0x176>
 800e4d6:	9b04      	ldr	r3, [sp, #16]
 800e4d8:	eba0 000a 	sub.w	r0, r0, sl
 800e4dc:	2240      	movs	r2, #64	@ 0x40
 800e4de:	4082      	lsls	r2, r0
 800e4e0:	4313      	orrs	r3, r2
 800e4e2:	3401      	adds	r4, #1
 800e4e4:	9304      	str	r3, [sp, #16]
 800e4e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4ea:	4829      	ldr	r0, [pc, #164]	@ (800e590 <_vfiprintf_r+0x220>)
 800e4ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e4f0:	2206      	movs	r2, #6
 800e4f2:	f7f1 fe6d 	bl	80001d0 <memchr>
 800e4f6:	2800      	cmp	r0, #0
 800e4f8:	d03f      	beq.n	800e57a <_vfiprintf_r+0x20a>
 800e4fa:	4b26      	ldr	r3, [pc, #152]	@ (800e594 <_vfiprintf_r+0x224>)
 800e4fc:	bb1b      	cbnz	r3, 800e546 <_vfiprintf_r+0x1d6>
 800e4fe:	9b03      	ldr	r3, [sp, #12]
 800e500:	3307      	adds	r3, #7
 800e502:	f023 0307 	bic.w	r3, r3, #7
 800e506:	3308      	adds	r3, #8
 800e508:	9303      	str	r3, [sp, #12]
 800e50a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e50c:	443b      	add	r3, r7
 800e50e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e510:	e76a      	b.n	800e3e8 <_vfiprintf_r+0x78>
 800e512:	fb0c 3202 	mla	r2, ip, r2, r3
 800e516:	460c      	mov	r4, r1
 800e518:	2001      	movs	r0, #1
 800e51a:	e7a8      	b.n	800e46e <_vfiprintf_r+0xfe>
 800e51c:	2300      	movs	r3, #0
 800e51e:	3401      	adds	r4, #1
 800e520:	9305      	str	r3, [sp, #20]
 800e522:	4619      	mov	r1, r3
 800e524:	f04f 0c0a 	mov.w	ip, #10
 800e528:	4620      	mov	r0, r4
 800e52a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e52e:	3a30      	subs	r2, #48	@ 0x30
 800e530:	2a09      	cmp	r2, #9
 800e532:	d903      	bls.n	800e53c <_vfiprintf_r+0x1cc>
 800e534:	2b00      	cmp	r3, #0
 800e536:	d0c6      	beq.n	800e4c6 <_vfiprintf_r+0x156>
 800e538:	9105      	str	r1, [sp, #20]
 800e53a:	e7c4      	b.n	800e4c6 <_vfiprintf_r+0x156>
 800e53c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e540:	4604      	mov	r4, r0
 800e542:	2301      	movs	r3, #1
 800e544:	e7f0      	b.n	800e528 <_vfiprintf_r+0x1b8>
 800e546:	ab03      	add	r3, sp, #12
 800e548:	9300      	str	r3, [sp, #0]
 800e54a:	462a      	mov	r2, r5
 800e54c:	4b12      	ldr	r3, [pc, #72]	@ (800e598 <_vfiprintf_r+0x228>)
 800e54e:	a904      	add	r1, sp, #16
 800e550:	4630      	mov	r0, r6
 800e552:	f7fb fa87 	bl	8009a64 <_printf_float>
 800e556:	4607      	mov	r7, r0
 800e558:	1c78      	adds	r0, r7, #1
 800e55a:	d1d6      	bne.n	800e50a <_vfiprintf_r+0x19a>
 800e55c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e55e:	07d9      	lsls	r1, r3, #31
 800e560:	d405      	bmi.n	800e56e <_vfiprintf_r+0x1fe>
 800e562:	89ab      	ldrh	r3, [r5, #12]
 800e564:	059a      	lsls	r2, r3, #22
 800e566:	d402      	bmi.n	800e56e <_vfiprintf_r+0x1fe>
 800e568:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e56a:	f7fc fa29 	bl	800a9c0 <__retarget_lock_release_recursive>
 800e56e:	89ab      	ldrh	r3, [r5, #12]
 800e570:	065b      	lsls	r3, r3, #25
 800e572:	f53f af1f 	bmi.w	800e3b4 <_vfiprintf_r+0x44>
 800e576:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e578:	e71e      	b.n	800e3b8 <_vfiprintf_r+0x48>
 800e57a:	ab03      	add	r3, sp, #12
 800e57c:	9300      	str	r3, [sp, #0]
 800e57e:	462a      	mov	r2, r5
 800e580:	4b05      	ldr	r3, [pc, #20]	@ (800e598 <_vfiprintf_r+0x228>)
 800e582:	a904      	add	r1, sp, #16
 800e584:	4630      	mov	r0, r6
 800e586:	f7fb fd05 	bl	8009f94 <_printf_i>
 800e58a:	e7e4      	b.n	800e556 <_vfiprintf_r+0x1e6>
 800e58c:	0800f269 	.word	0x0800f269
 800e590:	0800f273 	.word	0x0800f273
 800e594:	08009a65 	.word	0x08009a65
 800e598:	0800e34d 	.word	0x0800e34d
 800e59c:	0800f26f 	.word	0x0800f26f

0800e5a0 <__swbuf_r>:
 800e5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5a2:	460e      	mov	r6, r1
 800e5a4:	4614      	mov	r4, r2
 800e5a6:	4605      	mov	r5, r0
 800e5a8:	b118      	cbz	r0, 800e5b2 <__swbuf_r+0x12>
 800e5aa:	6a03      	ldr	r3, [r0, #32]
 800e5ac:	b90b      	cbnz	r3, 800e5b2 <__swbuf_r+0x12>
 800e5ae:	f7fc f8b1 	bl	800a714 <__sinit>
 800e5b2:	69a3      	ldr	r3, [r4, #24]
 800e5b4:	60a3      	str	r3, [r4, #8]
 800e5b6:	89a3      	ldrh	r3, [r4, #12]
 800e5b8:	071a      	lsls	r2, r3, #28
 800e5ba:	d501      	bpl.n	800e5c0 <__swbuf_r+0x20>
 800e5bc:	6923      	ldr	r3, [r4, #16]
 800e5be:	b943      	cbnz	r3, 800e5d2 <__swbuf_r+0x32>
 800e5c0:	4621      	mov	r1, r4
 800e5c2:	4628      	mov	r0, r5
 800e5c4:	f000 f82a 	bl	800e61c <__swsetup_r>
 800e5c8:	b118      	cbz	r0, 800e5d2 <__swbuf_r+0x32>
 800e5ca:	f04f 37ff 	mov.w	r7, #4294967295
 800e5ce:	4638      	mov	r0, r7
 800e5d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5d2:	6823      	ldr	r3, [r4, #0]
 800e5d4:	6922      	ldr	r2, [r4, #16]
 800e5d6:	1a98      	subs	r0, r3, r2
 800e5d8:	6963      	ldr	r3, [r4, #20]
 800e5da:	b2f6      	uxtb	r6, r6
 800e5dc:	4283      	cmp	r3, r0
 800e5de:	4637      	mov	r7, r6
 800e5e0:	dc05      	bgt.n	800e5ee <__swbuf_r+0x4e>
 800e5e2:	4621      	mov	r1, r4
 800e5e4:	4628      	mov	r0, r5
 800e5e6:	f7ff f973 	bl	800d8d0 <_fflush_r>
 800e5ea:	2800      	cmp	r0, #0
 800e5ec:	d1ed      	bne.n	800e5ca <__swbuf_r+0x2a>
 800e5ee:	68a3      	ldr	r3, [r4, #8]
 800e5f0:	3b01      	subs	r3, #1
 800e5f2:	60a3      	str	r3, [r4, #8]
 800e5f4:	6823      	ldr	r3, [r4, #0]
 800e5f6:	1c5a      	adds	r2, r3, #1
 800e5f8:	6022      	str	r2, [r4, #0]
 800e5fa:	701e      	strb	r6, [r3, #0]
 800e5fc:	6962      	ldr	r2, [r4, #20]
 800e5fe:	1c43      	adds	r3, r0, #1
 800e600:	429a      	cmp	r2, r3
 800e602:	d004      	beq.n	800e60e <__swbuf_r+0x6e>
 800e604:	89a3      	ldrh	r3, [r4, #12]
 800e606:	07db      	lsls	r3, r3, #31
 800e608:	d5e1      	bpl.n	800e5ce <__swbuf_r+0x2e>
 800e60a:	2e0a      	cmp	r6, #10
 800e60c:	d1df      	bne.n	800e5ce <__swbuf_r+0x2e>
 800e60e:	4621      	mov	r1, r4
 800e610:	4628      	mov	r0, r5
 800e612:	f7ff f95d 	bl	800d8d0 <_fflush_r>
 800e616:	2800      	cmp	r0, #0
 800e618:	d0d9      	beq.n	800e5ce <__swbuf_r+0x2e>
 800e61a:	e7d6      	b.n	800e5ca <__swbuf_r+0x2a>

0800e61c <__swsetup_r>:
 800e61c:	b538      	push	{r3, r4, r5, lr}
 800e61e:	4b29      	ldr	r3, [pc, #164]	@ (800e6c4 <__swsetup_r+0xa8>)
 800e620:	4605      	mov	r5, r0
 800e622:	6818      	ldr	r0, [r3, #0]
 800e624:	460c      	mov	r4, r1
 800e626:	b118      	cbz	r0, 800e630 <__swsetup_r+0x14>
 800e628:	6a03      	ldr	r3, [r0, #32]
 800e62a:	b90b      	cbnz	r3, 800e630 <__swsetup_r+0x14>
 800e62c:	f7fc f872 	bl	800a714 <__sinit>
 800e630:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e634:	0719      	lsls	r1, r3, #28
 800e636:	d422      	bmi.n	800e67e <__swsetup_r+0x62>
 800e638:	06da      	lsls	r2, r3, #27
 800e63a:	d407      	bmi.n	800e64c <__swsetup_r+0x30>
 800e63c:	2209      	movs	r2, #9
 800e63e:	602a      	str	r2, [r5, #0]
 800e640:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e644:	81a3      	strh	r3, [r4, #12]
 800e646:	f04f 30ff 	mov.w	r0, #4294967295
 800e64a:	e033      	b.n	800e6b4 <__swsetup_r+0x98>
 800e64c:	0758      	lsls	r0, r3, #29
 800e64e:	d512      	bpl.n	800e676 <__swsetup_r+0x5a>
 800e650:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e652:	b141      	cbz	r1, 800e666 <__swsetup_r+0x4a>
 800e654:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e658:	4299      	cmp	r1, r3
 800e65a:	d002      	beq.n	800e662 <__swsetup_r+0x46>
 800e65c:	4628      	mov	r0, r5
 800e65e:	f7fd f80b 	bl	800b678 <_free_r>
 800e662:	2300      	movs	r3, #0
 800e664:	6363      	str	r3, [r4, #52]	@ 0x34
 800e666:	89a3      	ldrh	r3, [r4, #12]
 800e668:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e66c:	81a3      	strh	r3, [r4, #12]
 800e66e:	2300      	movs	r3, #0
 800e670:	6063      	str	r3, [r4, #4]
 800e672:	6923      	ldr	r3, [r4, #16]
 800e674:	6023      	str	r3, [r4, #0]
 800e676:	89a3      	ldrh	r3, [r4, #12]
 800e678:	f043 0308 	orr.w	r3, r3, #8
 800e67c:	81a3      	strh	r3, [r4, #12]
 800e67e:	6923      	ldr	r3, [r4, #16]
 800e680:	b94b      	cbnz	r3, 800e696 <__swsetup_r+0x7a>
 800e682:	89a3      	ldrh	r3, [r4, #12]
 800e684:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e688:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e68c:	d003      	beq.n	800e696 <__swsetup_r+0x7a>
 800e68e:	4621      	mov	r1, r4
 800e690:	4628      	mov	r0, r5
 800e692:	f000 f883 	bl	800e79c <__smakebuf_r>
 800e696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e69a:	f013 0201 	ands.w	r2, r3, #1
 800e69e:	d00a      	beq.n	800e6b6 <__swsetup_r+0x9a>
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	60a2      	str	r2, [r4, #8]
 800e6a4:	6962      	ldr	r2, [r4, #20]
 800e6a6:	4252      	negs	r2, r2
 800e6a8:	61a2      	str	r2, [r4, #24]
 800e6aa:	6922      	ldr	r2, [r4, #16]
 800e6ac:	b942      	cbnz	r2, 800e6c0 <__swsetup_r+0xa4>
 800e6ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e6b2:	d1c5      	bne.n	800e640 <__swsetup_r+0x24>
 800e6b4:	bd38      	pop	{r3, r4, r5, pc}
 800e6b6:	0799      	lsls	r1, r3, #30
 800e6b8:	bf58      	it	pl
 800e6ba:	6962      	ldrpl	r2, [r4, #20]
 800e6bc:	60a2      	str	r2, [r4, #8]
 800e6be:	e7f4      	b.n	800e6aa <__swsetup_r+0x8e>
 800e6c0:	2000      	movs	r0, #0
 800e6c2:	e7f7      	b.n	800e6b4 <__swsetup_r+0x98>
 800e6c4:	2000004c 	.word	0x2000004c

0800e6c8 <_raise_r>:
 800e6c8:	291f      	cmp	r1, #31
 800e6ca:	b538      	push	{r3, r4, r5, lr}
 800e6cc:	4605      	mov	r5, r0
 800e6ce:	460c      	mov	r4, r1
 800e6d0:	d904      	bls.n	800e6dc <_raise_r+0x14>
 800e6d2:	2316      	movs	r3, #22
 800e6d4:	6003      	str	r3, [r0, #0]
 800e6d6:	f04f 30ff 	mov.w	r0, #4294967295
 800e6da:	bd38      	pop	{r3, r4, r5, pc}
 800e6dc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e6de:	b112      	cbz	r2, 800e6e6 <_raise_r+0x1e>
 800e6e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e6e4:	b94b      	cbnz	r3, 800e6fa <_raise_r+0x32>
 800e6e6:	4628      	mov	r0, r5
 800e6e8:	f000 f830 	bl	800e74c <_getpid_r>
 800e6ec:	4622      	mov	r2, r4
 800e6ee:	4601      	mov	r1, r0
 800e6f0:	4628      	mov	r0, r5
 800e6f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e6f6:	f000 b817 	b.w	800e728 <_kill_r>
 800e6fa:	2b01      	cmp	r3, #1
 800e6fc:	d00a      	beq.n	800e714 <_raise_r+0x4c>
 800e6fe:	1c59      	adds	r1, r3, #1
 800e700:	d103      	bne.n	800e70a <_raise_r+0x42>
 800e702:	2316      	movs	r3, #22
 800e704:	6003      	str	r3, [r0, #0]
 800e706:	2001      	movs	r0, #1
 800e708:	e7e7      	b.n	800e6da <_raise_r+0x12>
 800e70a:	2100      	movs	r1, #0
 800e70c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e710:	4620      	mov	r0, r4
 800e712:	4798      	blx	r3
 800e714:	2000      	movs	r0, #0
 800e716:	e7e0      	b.n	800e6da <_raise_r+0x12>

0800e718 <raise>:
 800e718:	4b02      	ldr	r3, [pc, #8]	@ (800e724 <raise+0xc>)
 800e71a:	4601      	mov	r1, r0
 800e71c:	6818      	ldr	r0, [r3, #0]
 800e71e:	f7ff bfd3 	b.w	800e6c8 <_raise_r>
 800e722:	bf00      	nop
 800e724:	2000004c 	.word	0x2000004c

0800e728 <_kill_r>:
 800e728:	b538      	push	{r3, r4, r5, lr}
 800e72a:	4d07      	ldr	r5, [pc, #28]	@ (800e748 <_kill_r+0x20>)
 800e72c:	2300      	movs	r3, #0
 800e72e:	4604      	mov	r4, r0
 800e730:	4608      	mov	r0, r1
 800e732:	4611      	mov	r1, r2
 800e734:	602b      	str	r3, [r5, #0]
 800e736:	f7f3 fe2f 	bl	8002398 <_kill>
 800e73a:	1c43      	adds	r3, r0, #1
 800e73c:	d102      	bne.n	800e744 <_kill_r+0x1c>
 800e73e:	682b      	ldr	r3, [r5, #0]
 800e740:	b103      	cbz	r3, 800e744 <_kill_r+0x1c>
 800e742:	6023      	str	r3, [r4, #0]
 800e744:	bd38      	pop	{r3, r4, r5, pc}
 800e746:	bf00      	nop
 800e748:	20000f40 	.word	0x20000f40

0800e74c <_getpid_r>:
 800e74c:	f7f3 be1c 	b.w	8002388 <_getpid>

0800e750 <__swhatbuf_r>:
 800e750:	b570      	push	{r4, r5, r6, lr}
 800e752:	460c      	mov	r4, r1
 800e754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e758:	2900      	cmp	r1, #0
 800e75a:	b096      	sub	sp, #88	@ 0x58
 800e75c:	4615      	mov	r5, r2
 800e75e:	461e      	mov	r6, r3
 800e760:	da0d      	bge.n	800e77e <__swhatbuf_r+0x2e>
 800e762:	89a3      	ldrh	r3, [r4, #12]
 800e764:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e768:	f04f 0100 	mov.w	r1, #0
 800e76c:	bf14      	ite	ne
 800e76e:	2340      	movne	r3, #64	@ 0x40
 800e770:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e774:	2000      	movs	r0, #0
 800e776:	6031      	str	r1, [r6, #0]
 800e778:	602b      	str	r3, [r5, #0]
 800e77a:	b016      	add	sp, #88	@ 0x58
 800e77c:	bd70      	pop	{r4, r5, r6, pc}
 800e77e:	466a      	mov	r2, sp
 800e780:	f000 f848 	bl	800e814 <_fstat_r>
 800e784:	2800      	cmp	r0, #0
 800e786:	dbec      	blt.n	800e762 <__swhatbuf_r+0x12>
 800e788:	9901      	ldr	r1, [sp, #4]
 800e78a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e78e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e792:	4259      	negs	r1, r3
 800e794:	4159      	adcs	r1, r3
 800e796:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e79a:	e7eb      	b.n	800e774 <__swhatbuf_r+0x24>

0800e79c <__smakebuf_r>:
 800e79c:	898b      	ldrh	r3, [r1, #12]
 800e79e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e7a0:	079d      	lsls	r5, r3, #30
 800e7a2:	4606      	mov	r6, r0
 800e7a4:	460c      	mov	r4, r1
 800e7a6:	d507      	bpl.n	800e7b8 <__smakebuf_r+0x1c>
 800e7a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e7ac:	6023      	str	r3, [r4, #0]
 800e7ae:	6123      	str	r3, [r4, #16]
 800e7b0:	2301      	movs	r3, #1
 800e7b2:	6163      	str	r3, [r4, #20]
 800e7b4:	b003      	add	sp, #12
 800e7b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7b8:	ab01      	add	r3, sp, #4
 800e7ba:	466a      	mov	r2, sp
 800e7bc:	f7ff ffc8 	bl	800e750 <__swhatbuf_r>
 800e7c0:	9f00      	ldr	r7, [sp, #0]
 800e7c2:	4605      	mov	r5, r0
 800e7c4:	4639      	mov	r1, r7
 800e7c6:	4630      	mov	r0, r6
 800e7c8:	f7fc ffca 	bl	800b760 <_malloc_r>
 800e7cc:	b948      	cbnz	r0, 800e7e2 <__smakebuf_r+0x46>
 800e7ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7d2:	059a      	lsls	r2, r3, #22
 800e7d4:	d4ee      	bmi.n	800e7b4 <__smakebuf_r+0x18>
 800e7d6:	f023 0303 	bic.w	r3, r3, #3
 800e7da:	f043 0302 	orr.w	r3, r3, #2
 800e7de:	81a3      	strh	r3, [r4, #12]
 800e7e0:	e7e2      	b.n	800e7a8 <__smakebuf_r+0xc>
 800e7e2:	89a3      	ldrh	r3, [r4, #12]
 800e7e4:	6020      	str	r0, [r4, #0]
 800e7e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e7ea:	81a3      	strh	r3, [r4, #12]
 800e7ec:	9b01      	ldr	r3, [sp, #4]
 800e7ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e7f2:	b15b      	cbz	r3, 800e80c <__smakebuf_r+0x70>
 800e7f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e7f8:	4630      	mov	r0, r6
 800e7fa:	f000 f81d 	bl	800e838 <_isatty_r>
 800e7fe:	b128      	cbz	r0, 800e80c <__smakebuf_r+0x70>
 800e800:	89a3      	ldrh	r3, [r4, #12]
 800e802:	f023 0303 	bic.w	r3, r3, #3
 800e806:	f043 0301 	orr.w	r3, r3, #1
 800e80a:	81a3      	strh	r3, [r4, #12]
 800e80c:	89a3      	ldrh	r3, [r4, #12]
 800e80e:	431d      	orrs	r5, r3
 800e810:	81a5      	strh	r5, [r4, #12]
 800e812:	e7cf      	b.n	800e7b4 <__smakebuf_r+0x18>

0800e814 <_fstat_r>:
 800e814:	b538      	push	{r3, r4, r5, lr}
 800e816:	4d07      	ldr	r5, [pc, #28]	@ (800e834 <_fstat_r+0x20>)
 800e818:	2300      	movs	r3, #0
 800e81a:	4604      	mov	r4, r0
 800e81c:	4608      	mov	r0, r1
 800e81e:	4611      	mov	r1, r2
 800e820:	602b      	str	r3, [r5, #0]
 800e822:	f7f3 fe19 	bl	8002458 <_fstat>
 800e826:	1c43      	adds	r3, r0, #1
 800e828:	d102      	bne.n	800e830 <_fstat_r+0x1c>
 800e82a:	682b      	ldr	r3, [r5, #0]
 800e82c:	b103      	cbz	r3, 800e830 <_fstat_r+0x1c>
 800e82e:	6023      	str	r3, [r4, #0]
 800e830:	bd38      	pop	{r3, r4, r5, pc}
 800e832:	bf00      	nop
 800e834:	20000f40 	.word	0x20000f40

0800e838 <_isatty_r>:
 800e838:	b538      	push	{r3, r4, r5, lr}
 800e83a:	4d06      	ldr	r5, [pc, #24]	@ (800e854 <_isatty_r+0x1c>)
 800e83c:	2300      	movs	r3, #0
 800e83e:	4604      	mov	r4, r0
 800e840:	4608      	mov	r0, r1
 800e842:	602b      	str	r3, [r5, #0]
 800e844:	f7f3 fe18 	bl	8002478 <_isatty>
 800e848:	1c43      	adds	r3, r0, #1
 800e84a:	d102      	bne.n	800e852 <_isatty_r+0x1a>
 800e84c:	682b      	ldr	r3, [r5, #0]
 800e84e:	b103      	cbz	r3, 800e852 <_isatty_r+0x1a>
 800e850:	6023      	str	r3, [r4, #0]
 800e852:	bd38      	pop	{r3, r4, r5, pc}
 800e854:	20000f40 	.word	0x20000f40

0800e858 <round>:
 800e858:	ec51 0b10 	vmov	r0, r1, d0
 800e85c:	b570      	push	{r4, r5, r6, lr}
 800e85e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800e862:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800e866:	2a13      	cmp	r2, #19
 800e868:	460b      	mov	r3, r1
 800e86a:	4605      	mov	r5, r0
 800e86c:	dc1b      	bgt.n	800e8a6 <round+0x4e>
 800e86e:	2a00      	cmp	r2, #0
 800e870:	da0b      	bge.n	800e88a <round+0x32>
 800e872:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800e876:	3201      	adds	r2, #1
 800e878:	bf04      	itt	eq
 800e87a:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800e87e:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800e882:	2200      	movs	r2, #0
 800e884:	4619      	mov	r1, r3
 800e886:	4610      	mov	r0, r2
 800e888:	e015      	b.n	800e8b6 <round+0x5e>
 800e88a:	4c15      	ldr	r4, [pc, #84]	@ (800e8e0 <round+0x88>)
 800e88c:	4114      	asrs	r4, r2
 800e88e:	ea04 0601 	and.w	r6, r4, r1
 800e892:	4306      	orrs	r6, r0
 800e894:	d00f      	beq.n	800e8b6 <round+0x5e>
 800e896:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800e89a:	fa41 f202 	asr.w	r2, r1, r2
 800e89e:	4413      	add	r3, r2
 800e8a0:	ea23 0304 	bic.w	r3, r3, r4
 800e8a4:	e7ed      	b.n	800e882 <round+0x2a>
 800e8a6:	2a33      	cmp	r2, #51	@ 0x33
 800e8a8:	dd08      	ble.n	800e8bc <round+0x64>
 800e8aa:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800e8ae:	d102      	bne.n	800e8b6 <round+0x5e>
 800e8b0:	4602      	mov	r2, r0
 800e8b2:	f7f1 fceb 	bl	800028c <__adddf3>
 800e8b6:	ec41 0b10 	vmov	d0, r0, r1
 800e8ba:	bd70      	pop	{r4, r5, r6, pc}
 800e8bc:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800e8c0:	f04f 34ff 	mov.w	r4, #4294967295
 800e8c4:	40f4      	lsrs	r4, r6
 800e8c6:	4204      	tst	r4, r0
 800e8c8:	d0f5      	beq.n	800e8b6 <round+0x5e>
 800e8ca:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800e8ce:	2201      	movs	r2, #1
 800e8d0:	408a      	lsls	r2, r1
 800e8d2:	1952      	adds	r2, r2, r5
 800e8d4:	bf28      	it	cs
 800e8d6:	3301      	addcs	r3, #1
 800e8d8:	ea22 0204 	bic.w	r2, r2, r4
 800e8dc:	e7d2      	b.n	800e884 <round+0x2c>
 800e8de:	bf00      	nop
 800e8e0:	000fffff 	.word	0x000fffff

0800e8e4 <_init>:
 800e8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8e6:	bf00      	nop
 800e8e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8ea:	bc08      	pop	{r3}
 800e8ec:	469e      	mov	lr, r3
 800e8ee:	4770      	bx	lr

0800e8f0 <_fini>:
 800e8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8f2:	bf00      	nop
 800e8f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8f6:	bc08      	pop	{r3}
 800e8f8:	469e      	mov	lr, r3
 800e8fa:	4770      	bx	lr
